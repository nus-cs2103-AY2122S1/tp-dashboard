[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103T-F11-3/tp/actions)","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* This is **HeRon**, an application.\u003cbr\u003e","lastModifiedDate":"2021-09-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* HeRon is a product designed for Human Resource (HR) Managers in companies to increase the convenience of managing employee information.","lastModifiedDate":"2021-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2021-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  Example usages:","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  * To assist in managing HR administrative tasks such as:","lastModifiedDate":"2021-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    * tracking leaves and offs","lastModifiedDate":"2021-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    * calculating overtime pay","lastModifiedDate":"2021-09-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    * updating payroll information like salaries and bank account numbers","lastModifiedDate":"2021-09-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * To allow users to quickly assess the balance of work between employees.","lastModifiedDate":"2021-09-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* For the detailed documentation of this project, see the **[HeRon Product Website](https://ay2122s1-cs2103t-f11-3.github.io/tp/)**.","lastModifiedDate":"2021-09-12"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"szelongq":3,"-":14}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"### Lim Boon Hai","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"\u003cimg src\u003d\"images/boonhaii.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"[[github](https://github.com/boonhaii)]","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"[[portfolio](team/boonhaii.md)]","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"* Role: UI/UX Designer","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"* Responsibilities: Designs the user interface of the application.","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"### Ng Wee Han","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"\u003cimg src\u003d\"images/beefham.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"[[github](http://github.com/beefham)]","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"[[portfolio](team/beefham.md)]","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"* Role: Scheduling/Issue Tracking Manager","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"* Responsibilities: Manages deadlines and tracks the progress of issues assigned to each member.","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"### Sim Rui En, Daniel","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"\u003cimg src\u003d\"images/danielsimre.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"[[github](http://github.com/danielsimre)]","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"[[portfolio](team/danielsimre.md)]","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"* Role: Testing Manager","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"* Responsibilities: Manages and advise on testing related issues.","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"### Quek Sze Long","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"\u003cimg src\u003d\"images/szelongq.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"[[github](http://github.com/szelongq)]","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"[[portfolio](team/szelongq.md)]","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"* Role: Code Quality Manager","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"* Responsibilities: Manages and advise on code quality related issues.","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"### Wan Wei Kiat","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"\u003cimg src\u003d\"images/1waykiat.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"[[github](http://github.com/1waykiat)]","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"[[portfolio](team/1waykiat.md)]","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"* Role: Documentation Manager","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"* Responsibilities: Manages the updating of the documentations.","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"boonhaii":30,"-":28}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"szelongq"},"content":"* is a HR manager of a small company (10 - 50 employees)","lastModifiedDate":"2021-09-30"},{"lineNumber":261,"author":{"gitId":"szelongq"},"content":"* is the only one in charge of handling HR","lastModifiedDate":"2021-09-30"},{"lineNumber":262,"author":{"gitId":"szelongq"},"content":"* has a need to manage information on all employees","lastModifiedDate":"2021-09-30"},{"lineNumber":263,"author":{"gitId":"boonhaii"},"content":"* prefers desktop apps over other types","lastModifiedDate":"2021-10-01"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":266,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"szelongq"},"content":"**Value proposition**: ","lastModifiedDate":"2021-09-30"},{"lineNumber":269,"author":{"gitId":"szelongq"},"content":"* More convenient to manage employees’ information than a typical mouse/GUI driven app. ","lastModifiedDate":"2021-09-30"},{"lineNumber":270,"author":{"gitId":"szelongq"},"content":"* Able to quickly assess the balance of work between employees.","lastModifiedDate":"2021-09-30"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                                            | So that I can…​                                                     |","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"boonhaii"},"content":"| -------- | ------------------------------------------ | --------------------------------------------------------------| ---------------------------------------------------------------------- |","lastModifiedDate":"2021-09-26"},{"lineNumber":279,"author":{"gitId":"beefham"},"content":"| `* * *`  | user                                       | add a new employee                                                                                                    |                                                                                                                           |","lastModifiedDate":"2021-09-29"},{"lineNumber":280,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | delete an employee                                                                                                    | remove entries that I no longer need.                                                                                     |","lastModifiedDate":"2021-09-26"},{"lineNumber":281,"author":{"gitId":"boonhaii"},"content":"| `* * * ` | user                                       | edit an employee\u0027s data                                                                                               |                                                                                                                           |","lastModifiedDate":"2021-09-26"},{"lineNumber":282,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user with many employees in the app        | search for an employee\u0027s data easily                                                                                  | locate details of employees without having to go through the entire list.                                                   |","lastModifiedDate":"2021-10-01"},{"lineNumber":283,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | keep track of my employee\u0027s current leaves                                                                            | determine if a given employee\u0027s request for leave is valid.                                                               |","lastModifiedDate":"2021-09-26"},{"lineNumber":284,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | update leaves for certain employees                                                                                   | have a more accurate count of their remaining leaves.                                                                     |","lastModifiedDate":"2021-09-26"},{"lineNumber":285,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | keep track of an employee\u0027s unpaid leaves                                                                             | know how much to deduct from their monthly salary.                                                                        |","lastModifiedDate":"2021-09-26"},{"lineNumber":286,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | get all the offs and leaves that every employee has                                                                   | get those with remaining leaves to clear them before the end of the year.                                                 |","lastModifiedDate":"2021-09-26"},{"lineNumber":287,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | calculate the pay of all employees and view them easily                                                               | make it easier to complete administrative tasks.                                                                          |","lastModifiedDate":"2021-09-26"},{"lineNumber":288,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | have an application to account for factors like unpaid leave and overtime when calculating salary                     | reduce chances of errors by manual calculations.                                                                          |","lastModifiedDate":"2021-10-01"},{"lineNumber":289,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | keep track of employees which I have not paid yet                                                                     | ensure all employees are paid.                                                                                            |","lastModifiedDate":"2021-09-26"},{"lineNumber":290,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | get all the overtime that every employee has done for the month                                                       | keep track of each employee and analyze the amount of overtime being done in the company.                                 |","lastModifiedDate":"2021-09-26"},{"lineNumber":291,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | organized user                             | group up employees into specified groups                                                                              | sort through them easily with color coding and tags.                                                                      |","lastModifiedDate":"2021-09-26"},{"lineNumber":292,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | input a schedule for an employee                                                                                      | keep track of how many hours he/she are intending to work.                                                                  |","lastModifiedDate":"2021-10-01"},{"lineNumber":293,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | schedule employees and their work schedules                                                                           | ensure they hit the minimum work quota and all employees are working equally.                                             |","lastModifiedDate":"2021-09-26"},{"lineNumber":294,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user in a company that does shift work     | see the schedule for the week                                                                                         | have a rough idea of how to assign people to shifts.                                                                      |","lastModifiedDate":"2021-09-26"},{"lineNumber":295,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | generate a work schedule according to certain specified rules                                                         | do not have to make one manually while ensuring it abides by the rules.                                                   |","lastModifiedDate":"2021-09-26"},{"lineNumber":296,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | keep track of any documents relating to my employees.                                                                 |                                                                                                                           |","lastModifiedDate":"2021-09-26"},{"lineNumber":297,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | keep tack of any complaints lodged against employees                                                                  | address the employees accordingly.                                                                                        |","lastModifiedDate":"2021-09-26"},{"lineNumber":298,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | have short and readable summaries of day-to-day statuses in the company                                               | access it at anytime for any potential tracking in the future.                                                            |","lastModifiedDate":"2021-09-26"},{"lineNumber":299,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | get a summary of certain information of employees                                                                     | include it easily in monthly reports.                                                                                     |","lastModifiedDate":"2021-09-26"},{"lineNumber":300,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | organized user                             | group up employees into specified groups                                                                              | update information for the specific group without manually updating each member one by one.                               |","lastModifiedDate":"2021-09-26"},{"lineNumber":301,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | organized user                             | be able to easily archive/filter employees that are not relevant                                                      | ensure they do not distract me from doing my work.                                                                        |","lastModifiedDate":"2021-09-26"},{"lineNumber":302,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | compute all the relevant information that I require in a short amount of time regardless of the number of employees   | ensure the workflow will take similar amounts of time regardless of company size.                                         |","lastModifiedDate":"2021-09-26"},{"lineNumber":303,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | expert user                                | have an automation system that handles tasks which have to be done periodically (eg. everyday)                        | do not have to do them manually and make the processing of data more efficient.                                           |","lastModifiedDate":"2021-09-26"},{"lineNumber":304,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | expert user                                | make the least effort to get the employee\u0027s information                                                               | be more efficient.                                                                                                        |","lastModifiedDate":"2021-09-26"},{"lineNumber":305,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | new user                                   | spend the least effort to learn how to use the application                                                            | spend more time focusing on my tasks.                                                                                     |","lastModifiedDate":"2021-09-26"},{"lineNumber":306,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | forgetful user                             | have a convenient way to access help while using the application                                                      | have an overview of how to execute certain commands if I forget.                                                          |","lastModifiedDate":"2021-09-26"},{"lineNumber":307,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | lazy user                                  | have customized shortcuts                                                                                             | reduce effort needed to complete my tasks, especially if they are done often.                                             |","lastModifiedDate":"2021-09-26"},{"lineNumber":308,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | have different settings for different employees                                                                       | quickly do computations on all employees even if they are treated differently, such as having different pay calculations. |","lastModifiedDate":"2021-09-26"},{"lineNumber":309,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | save certain employee settings and apply them to other employees                                                      | add new employees into the database with previously used settings.                                                        |","lastModifiedDate":"2021-09-26"},{"lineNumber":310,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | potential user                             | insert dummy data into the app                                                                                        | see how the interface looks.                                                                                              |","lastModifiedDate":"2021-09-26"},{"lineNumber":311,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | potential user                             | clear out all the dummy data inserted                                                                                 | immediately start using the app after testing it.                                                                         |","lastModifiedDate":"2021-09-26"},{"lineNumber":312,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | can see everything                                                                                                    | feel like I am in charge.                                                                                                 |","lastModifiedDate":"2021-09-26"},{"lineNumber":313,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user dealing with confidential information | have some form of authentication                                                                                      | ensure only authorized personnel are allowed to access the data.                                                          |","lastModifiedDate":"2021-09-26"},{"lineNumber":314,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | mark important days such as payday                                                                                    | manage my work more effectively.                                                                                          |","lastModifiedDate":"2021-09-26"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":318,"author":{"gitId":"szelongq"},"content":"(For all use cases below, the **System** is the `HeRon` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2021-09-30"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"boonhaii"},"content":"**Use case: Delete an employee**","lastModifiedDate":"2021-09-28"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"boonhaii"},"content":"1.  User requests to list employees","lastModifiedDate":"2021-10-01"},{"lineNumber":325,"author":{"gitId":"boonhaii"},"content":"2.  HeRon shows a list of employees","lastModifiedDate":"2021-10-01"},{"lineNumber":326,"author":{"gitId":"boonhaii"},"content":"3.  User requests to delete a specific employee in the list","lastModifiedDate":"2021-10-01"},{"lineNumber":327,"author":{"gitId":"boonhaii"},"content":"4.  HeRon deletes the employee","lastModifiedDate":"2021-10-01"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"danielsimre"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"danielsimre"},"content":"**Use case: Add leaves to an employee**","lastModifiedDate":"2021-09-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":345,"author":{"gitId":"beefham"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":347,"author":{"gitId":"danielsimre"},"content":"1.  User requests to list employees","lastModifiedDate":"2021-09-29"},{"lineNumber":348,"author":{"gitId":"danielsimre"},"content":"2.  HeRon shows a list of employees","lastModifiedDate":"2021-09-29"},{"lineNumber":349,"author":{"gitId":"danielsimre"},"content":"3.  User requests to add a certain number of leaves to a specific employee in the list","lastModifiedDate":"2021-09-29"},{"lineNumber":350,"author":{"gitId":"danielsimre"},"content":"4.  HeRon adds the leaves to the employee","lastModifiedDate":"2021-09-29"},{"lineNumber":351,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":352,"author":{"gitId":"danielsimre"},"content":"    Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":353,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":354,"author":{"gitId":"beefham"},"content":"**Extensions**","lastModifiedDate":"2021-09-29"},{"lineNumber":355,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":356,"author":{"gitId":"beefham"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-29"},{"lineNumber":357,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":358,"author":{"gitId":"beefham"},"content":"  Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":359,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":360,"author":{"gitId":"danielsimre"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-29"},{"lineNumber":361,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":362,"author":{"gitId":"beefham"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":363,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":364,"author":{"gitId":"beefham"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":365,"author":{"gitId":"beefham"},"content":"      ","lastModifiedDate":"2021-09-29"},{"lineNumber":366,"author":{"gitId":"danielsimre"},"content":"* 3b. The number of leaves to be added is invalid. (If the input is not a positive integer)","lastModifiedDate":"2021-09-30"},{"lineNumber":367,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":368,"author":{"gitId":"beefham"},"content":"    * 3b1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":369,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":370,"author":{"gitId":"beefham"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-30"},{"lineNumber":371,"author":{"gitId":"beefham"},"content":"      ","lastModifiedDate":"2021-09-30"},{"lineNumber":372,"author":{"gitId":"danielsimre"},"content":"**Use case: Remove leaves from an employee**","lastModifiedDate":"2021-09-29"},{"lineNumber":373,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":374,"author":{"gitId":"szelongq"},"content":"**MSS**","lastModifiedDate":"2021-09-30"},{"lineNumber":375,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":376,"author":{"gitId":"szelongq"},"content":"1.  User requests to list employees","lastModifiedDate":"2021-09-30"},{"lineNumber":377,"author":{"gitId":"danielsimre"},"content":"2.  HeRon shows a list of employees","lastModifiedDate":"2021-09-29"},{"lineNumber":378,"author":{"gitId":"danielsimre"},"content":"3.  User requests to remove a certain number of leaves from a specific employee in the list","lastModifiedDate":"2021-09-29"},{"lineNumber":379,"author":{"gitId":"danielsimre"},"content":"4.  HeRon removes the leaves from the employee","lastModifiedDate":"2021-09-29"},{"lineNumber":380,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":381,"author":{"gitId":"szelongq"},"content":"    Use case ends.","lastModifiedDate":"2021-09-30"},{"lineNumber":382,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":383,"author":{"gitId":"szelongq"},"content":"**Extensions**","lastModifiedDate":"2021-09-30"},{"lineNumber":384,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":385,"author":{"gitId":"szelongq"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-30"},{"lineNumber":386,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":387,"author":{"gitId":"szelongq"},"content":"  Use case ends.","lastModifiedDate":"2021-09-30"},{"lineNumber":388,"author":{"gitId":"szelongq"},"content":"  ","lastModifiedDate":"2021-09-30"},{"lineNumber":389,"author":{"gitId":"szelongq"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-30"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":391,"author":{"gitId":"szelongq"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":392,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":393,"author":{"gitId":"szelongq"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-30"},{"lineNumber":394,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":395,"author":{"gitId":"danielsimre"},"content":"* 3b. The number of leaves to be removed is invalid. (If the input is not a positive integer)","lastModifiedDate":"2021-09-30"},{"lineNumber":396,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":397,"author":{"gitId":"danielsimre"},"content":"    * 3b1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":398,"author":{"gitId":"szelongq"},"content":"    ","lastModifiedDate":"2021-09-30"},{"lineNumber":399,"author":{"gitId":"szelongq"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-30"},{"lineNumber":400,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":401,"author":{"gitId":"danielsimre"},"content":"* 3c. The number of leaves to be removed is greater than the amount of leaves the employee actually has.","lastModifiedDate":"2021-09-30"},{"lineNumber":402,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":403,"author":{"gitId":"danielsimre"},"content":"    * 3c1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":404,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":405,"author":{"gitId":"beefham"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":406,"author":{"gitId":"beefham"},"content":"      ","lastModifiedDate":"2021-09-29"},{"lineNumber":407,"author":{"gitId":"boonhaii"},"content":"**Use Case: Finding an employee**","lastModifiedDate":"2021-10-01"},{"lineNumber":408,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":409,"author":{"gitId":"beefham"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":410,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":411,"author":{"gitId":"boonhaii"},"content":"1.  User requests to list employees","lastModifiedDate":"2021-10-01"},{"lineNumber":412,"author":{"gitId":"boonhaii"},"content":"2.  HeRon shows a list of employees","lastModifiedDate":"2021-10-01"},{"lineNumber":413,"author":{"gitId":"boonhaii"},"content":"3.  User requests to find all employees with a given query (name, phone, tags, and other valid queries)","lastModifiedDate":"2021-10-01"},{"lineNumber":414,"author":{"gitId":"boonhaii"},"content":"4.  HeRon shows a list of employees with that given name","lastModifiedDate":"2021-10-01"},{"lineNumber":415,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":416,"author":{"gitId":"beefham"},"content":"**Extensions**","lastModifiedDate":"2021-09-30"},{"lineNumber":417,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":418,"author":{"gitId":"beefham"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-29"},{"lineNumber":419,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":420,"author":{"gitId":"beefham"},"content":"  Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":421,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":422,"author":{"gitId":"beefham"},"content":"* 3a. The given query does not match any user in HeRon","lastModifiedDate":"2021-09-29"},{"lineNumber":423,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":424,"author":{"gitId":"beefham"},"content":"    * 3a1. HeRon shows an error message","lastModifiedDate":"2021-09-29"},{"lineNumber":425,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":426,"author":{"gitId":"beefham"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":427,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":428,"author":{"gitId":"beefham"},"content":"* 3b. The given query is invalid (because it contains a tag that cannot be understood)","lastModifiedDate":"2021-09-30"},{"lineNumber":429,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":430,"author":{"gitId":"beefham"},"content":"    * 3b1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":431,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":432,"author":{"gitId":"beefham"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":433,"author":{"gitId":"beefham"},"content":"    ","lastModifiedDate":"2021-09-29"},{"lineNumber":434,"author":{"gitId":"1waykiat"},"content":"**Use case: Edit an employee**","lastModifiedDate":"2021-09-28"},{"lineNumber":435,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":436,"author":{"gitId":"1waykiat"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":437,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":438,"author":{"gitId":"1waykiat"},"content":"1. User requests to list employees","lastModifiedDate":"2021-09-29"},{"lineNumber":439,"author":{"gitId":"1waykiat"},"content":"2. HeRon shows list of employees","lastModifiedDate":"2021-09-28"},{"lineNumber":440,"author":{"gitId":"1waykiat"},"content":"3. User requests to edit a specific employee on the list","lastModifiedDate":"2021-09-29"},{"lineNumber":441,"author":{"gitId":"1waykiat"},"content":"4. HeRon replaces the data of the employee based on the user\u0027s specified inputs","lastModifiedDate":"2021-09-28"},{"lineNumber":442,"author":{"gitId":"1waykiat"},"content":"5. HeRon displays employee data of the edited employee to user","lastModifiedDate":"2021-09-28"},{"lineNumber":443,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":444,"author":{"gitId":"1waykiat"},"content":"    Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":445,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":446,"author":{"gitId":"1waykiat"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":447,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":448,"author":{"gitId":"1waykiat"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":449,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":450,"author":{"gitId":"1waykiat"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":451,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":452,"author":{"gitId":"1waykiat"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":453,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":454,"author":{"gitId":"1waykiat"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-09-28"},{"lineNumber":455,"author":{"gitId":"1waykiat"},"content":"    ","lastModifiedDate":"2021-09-28"},{"lineNumber":456,"author":{"gitId":"1waykiat"},"content":"        Use case resumes at step 2.","lastModifiedDate":"2021-09-28"},{"lineNumber":457,"author":{"gitId":"beefham"},"content":"    ","lastModifiedDate":"2021-09-30"},{"lineNumber":458,"author":{"gitId":"1waykiat"},"content":"* 3b. No field has been provided","lastModifiedDate":"2021-09-28"},{"lineNumber":459,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":460,"author":{"gitId":"1waykiat"},"content":"    * 3b1. HeRon shows an error message informing user about the lack of a field","lastModifiedDate":"2021-09-28"},{"lineNumber":461,"author":{"gitId":"1waykiat"},"content":"    ","lastModifiedDate":"2021-09-28"},{"lineNumber":462,"author":{"gitId":"1waykiat"},"content":"        Use case resumes at step 2.","lastModifiedDate":"2021-09-28"},{"lineNumber":463,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":464,"author":{"gitId":"1waykiat"},"content":"* 3c. Input into field is invalid","lastModifiedDate":"2021-09-28"},{"lineNumber":465,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":466,"author":{"gitId":"1waykiat"},"content":"    * 3c1. HeRon shows an error message informing user about which field has invalid input and why it is invalid","lastModifiedDate":"2021-09-28"},{"lineNumber":467,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":468,"author":{"gitId":"1waykiat"},"content":"        Use case resumes at step 2.","lastModifiedDate":"2021-09-28"},{"lineNumber":469,"author":{"gitId":"1waykiat"},"content":"    ","lastModifiedDate":"2021-09-28"},{"lineNumber":470,"author":{"gitId":"szelongq"},"content":"**Use case: Calculate an employee\u0027s salary**","lastModifiedDate":"2021-09-30"},{"lineNumber":471,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":472,"author":{"gitId":"1waykiat"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":473,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":474,"author":{"gitId":"1waykiat"},"content":"1.  User requests to list employees","lastModifiedDate":"2021-09-29"},{"lineNumber":475,"author":{"gitId":"szelongq"},"content":"2.  HeRon shows a list of employees","lastModifiedDate":"2021-09-30"},{"lineNumber":476,"author":{"gitId":"szelongq"},"content":"3.  User requests to calculate the salary of a specific employee in the list","lastModifiedDate":"2021-09-30"},{"lineNumber":477,"author":{"gitId":"szelongq"},"content":"4.  HeRon calculates and displays the salary of that employee","lastModifiedDate":"2021-09-30"},{"lineNumber":478,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":479,"author":{"gitId":"1waykiat"},"content":"    Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":480,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":481,"author":{"gitId":"1waykiat"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":482,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":483,"author":{"gitId":"1waykiat"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":484,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":485,"author":{"gitId":"1waykiat"},"content":"    Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":486,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":487,"author":{"gitId":"1waykiat"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":488,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":489,"author":{"gitId":"1waykiat"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-09-28"},{"lineNumber":490,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":491,"author":{"gitId":"1waykiat"},"content":"        Use case resumes at step 2.","lastModifiedDate":"2021-09-28"},{"lineNumber":492,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":493,"author":{"gitId":"boonhaii"},"content":"**Use case: Adding a Tag to an employee**","lastModifiedDate":"2021-09-28"},{"lineNumber":494,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":495,"author":{"gitId":"boonhaii"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":496,"author":{"gitId":"boonhaii"},"content":"1. User searches for a certain employee.","lastModifiedDate":"2021-09-28"},{"lineNumber":497,"author":{"gitId":"beefham"},"content":"2. HeRon returns the results of the search.","lastModifiedDate":"2021-09-30"},{"lineNumber":498,"author":{"gitId":"boonhaii"},"content":"3. User tags the specified employees with a specified tag.","lastModifiedDate":"2021-09-28"},{"lineNumber":499,"author":{"gitId":"boonhaii"},"content":"4. Tag is added to the employee.","lastModifiedDate":"2021-09-28"},{"lineNumber":500,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":501,"author":{"gitId":"boonhaii"},"content":"   Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":502,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":503,"author":{"gitId":"boonhaii"},"content":"* 2a. The list is empty. ","lastModifiedDate":"2021-09-28"},{"lineNumber":504,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":505,"author":{"gitId":"boonhaii"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":506,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":507,"author":{"gitId":"boonhaii"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":508,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":509,"author":{"gitId":"beefham"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":510,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":511,"author":{"gitId":"boonhaii"},"content":"      Use case resumes at step 3.","lastModifiedDate":"2021-09-28"},{"lineNumber":512,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":513,"author":{"gitId":"boonhaii"},"content":"* 3b. The given tag is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":514,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":515,"author":{"gitId":"beefham"},"content":"    * 3b1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":516,"author":{"gitId":"boonhaii"},"content":"    ","lastModifiedDate":"2021-09-28"},{"lineNumber":517,"author":{"gitId":"boonhaii"},"content":"        Use case resumes at step 3.","lastModifiedDate":"2021-09-28"},{"lineNumber":518,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":519,"author":{"gitId":"boonhaii"},"content":"**Use case: Updating details of group of employees with specified tag.**","lastModifiedDate":"2021-09-28"},{"lineNumber":520,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":521,"author":{"gitId":"boonhaii"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":522,"author":{"gitId":"boonhaii"},"content":"1. User searches for employees with specified tag.","lastModifiedDate":"2021-09-28"},{"lineNumber":523,"author":{"gitId":"beefham"},"content":"2. HeRon returns the results of the search.","lastModifiedDate":"2021-09-30"},{"lineNumber":524,"author":{"gitId":"boonhaii"},"content":"3. User updates the details of the specified employees.","lastModifiedDate":"2021-09-28"},{"lineNumber":525,"author":{"gitId":"boonhaii"},"content":"4. Employees in the group tag have their details updated.","lastModifiedDate":"2021-09-28"},{"lineNumber":526,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":527,"author":{"gitId":"boonhaii"},"content":"   Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":528,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":529,"author":{"gitId":"boonhaii"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":530,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":531,"author":{"gitId":"boonhaii"},"content":"* 2a. The result list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":532,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":533,"author":{"gitId":"boonhaii"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":534,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":535,"author":{"gitId":"boonhaii"},"content":"* 3a. The given corresponding tag of the detail(s) to be updated is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":536,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":537,"author":{"gitId":"beefham"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":538,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":539,"author":{"gitId":"boonhaii"},"content":"      Use case resumes at step 3.","lastModifiedDate":"2021-09-28"},{"lineNumber":540,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":541,"author":{"gitId":"boonhaii"},"content":"* 3b. The given detail(s) to be updated is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":542,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":543,"author":{"gitId":"beefham"},"content":"    * 3b1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":544,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":545,"author":{"gitId":"boonhaii"},"content":"      Use case resumes at step 3.","lastModifiedDate":"2021-09-28"},{"lineNumber":546,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":547,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":550,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":551,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":552,"author":{"gitId":"-"},"content":"2. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":553,"author":{"gitId":"-"},"content":"3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":554,"author":{"gitId":"boonhaii"},"content":"4. User interface should be able to comfortably fit the information of at least 50 employees. ","lastModifiedDate":"2021-09-26"},{"lineNumber":555,"author":{"gitId":"boonhaii"},"content":"5. Should be usable offline. ","lastModifiedDate":"2021-09-26"},{"lineNumber":556,"author":{"gitId":"boonhaii"},"content":"6. Should respond within 2 seconds within the users’ command. ","lastModifiedDate":"2021-09-26"},{"lineNumber":557,"author":{"gitId":"boonhaii"},"content":"7. Should only allow authorized personnel to have access to the application’s data.","lastModifiedDate":"2021-09-26"},{"lineNumber":558,"author":{"gitId":"boonhaii"},"content":"8. Should secure any files it produces.","lastModifiedDate":"2021-09-26"},{"lineNumber":559,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":560,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":562,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":563,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":564,"author":{"gitId":"szelongq"},"content":"* **Salary**: Monthly salary payout to employees","lastModifiedDate":"2021-09-30"},{"lineNumber":565,"author":{"gitId":"danielsimre"},"content":"* **Leave**: Refers to a day when an employee has permission to be absent from work","lastModifiedDate":"2021-09-30"},{"lineNumber":566,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":567,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":568,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":569,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":571,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":572,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":573,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":574,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":575,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":576,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":577,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":578,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":579,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":580,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":581,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":582,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":583,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":584,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":585,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":586,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":587,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":588,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":589,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":590,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":591,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":592,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":593,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":594,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":595,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":596,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":597,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":598,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":599,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":600,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":601,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":602,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":603,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":604,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":605,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":606,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":607,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":608,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":609,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":610,"author":{"gitId":"szelongq"},"content":"2. _{ more test cases …​ }_","lastModifiedDate":"2021-09-30"},{"lineNumber":611,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":612,"author":{"gitId":"szelongq"},"content":"### Editing an employee","lastModifiedDate":"2021-09-30"},{"lineNumber":613,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":614,"author":{"gitId":"szelongq"},"content":"1. Editing an employee while list of employees are shown","lastModifiedDate":"2021-09-30"},{"lineNumber":615,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":616,"author":{"gitId":"szelongq"},"content":"    1. Prerequisites: List all persons using the `list` command. Multiple employees in the list.","lastModifiedDate":"2021-09-30"},{"lineNumber":617,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":618,"author":{"gitId":"szelongq"},"content":"    2. Test case: `edit 1 n/Tsang Wei Ooi`\u003cbr\u003e","lastModifiedDate":"2021-09-30"},{"lineNumber":619,"author":{"gitId":"szelongq"},"content":"        Expected: First employee\u0027s name is updated with `Tsang Wei Ooi`. Details of the edited employee is shown in status message. Timestamp in the status bar is updated.","lastModifiedDate":"2021-09-30"},{"lineNumber":620,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":621,"author":{"gitId":"szelongq"},"content":"    3. Test case: `edit`\u003cbr\u003e","lastModifiedDate":"2021-09-30"},{"lineNumber":622,"author":{"gitId":"szelongq"},"content":"        Expected: No data is being edited. Error details shown in status message. Status bar remains the same.","lastModifiedDate":"2021-09-30"},{"lineNumber":623,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":624,"author":{"gitId":"szelongq"},"content":"    4. Test case: `edit 1 p/91234567 s/2000`\u003cbr\u003e","lastModifiedDate":"2021-09-30"},{"lineNumber":625,"author":{"gitId":"szelongq"},"content":"        Expected: First employee\u0027s phone number and salary is updated as `91234567` and `2000` respectively together. Details of edited contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2021-09-30"},{"lineNumber":626,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":627,"author":{"gitId":"szelongq"},"content":"    5. Other incorrect edit commands to try: `edit x` (where x is larger than list size), `edit 1 s/-200` (salary should not be negative) etc. \u003cbr\u003e","lastModifiedDate":"2021-09-30"},{"lineNumber":628,"author":{"gitId":"szelongq"},"content":"        Expected: No employee data is being edited. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2021-09-30"},{"lineNumber":629,"author":{"gitId":"szelongq"},"content":"       ","lastModifiedDate":"2021-09-30"},{"lineNumber":630,"author":{"gitId":"szelongq"},"content":"2. _{ possibly more test cases? …​ }_","lastModifiedDate":"2021-09-30"},{"lineNumber":631,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":632,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":633,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":634,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":635,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":636,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":637,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":638,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"danielsimre":19,"szelongq":53,"boonhaii":99,"beefham":56,"-":359,"1waykiat":52}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"HeRon is a desktop application for HR managers to assist in managing HR administrative tasks such as tracking leaves and offs, calculating pay and updating payroll information. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you are a fast typer, HeRon can get your tasks done faster as compared to traditional GUI apps.","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"2. Download the latest `HeRon.jar` from [here](#).","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your HeRon.","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   * **`list`** : Lists all contacts.","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 r/Admin Assistant l/14 s/3000 hw/40` : Adds a contact named `John Doe` to the Employee Book.","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * **`delete`**`3` : Deletes the 3rd contact shown in the current list.","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"   * **`clear`** : Deletes all contacts.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"6. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"boonhaii"},"content":"### Adding an employee: `add`","lastModifiedDate":"2021-09-28"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"boonhaii"},"content":"Adds an employee to the employee book.","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"boonhaii"},"content":"Format: `add  n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS r/ROLE l/LEAVES s/SALARY hw/HOURSWORKED [t/TAG]…​`","lastModifiedDate":"2021-09-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"boonhaii"},"content":"An employee can have any number of tags (including 0)","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"boonhaii"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 r/Admin Assistant l/14 s/3000 hw/40`","lastModifiedDate":"2021-09-22"},{"lineNumber":89,"author":{"gitId":"boonhaii"},"content":"* `add n/Betsy Crowe t/friend r/Designer s/5000 hw/60  l/21  e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`","lastModifiedDate":"2021-09-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"boonhaii"},"content":"### Listing all employees : `list`","lastModifiedDate":"2021-10-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"boonhaii"},"content":"Shows a list of all employees in the employee book.","lastModifiedDate":"2021-10-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"boonhaii"},"content":"### Editing an employee : `edit`","lastModifiedDate":"2021-10-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"boonhaii"},"content":"Edits an existing employee in the employee book.","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"szelongq"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [r/ROLE] [l/LEAVES] [s/SALARY] [h/HOURS_WORKED] [t/TAG]…​`","lastModifiedDate":"2021-09-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"boonhaii"},"content":"* Edits the employee at the specified `INDEX`. The index refers to the index number shown in the displayed employee list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-10-01"},{"lineNumber":104,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"boonhaii"},"content":"* When editing tags, the existing tags of the employee will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2021-10-01"},{"lineNumber":107,"author":{"gitId":"boonhaii"},"content":"* You can remove all the employee’s tags by typing `t/` without","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"szelongq"},"content":"* The value of LEAVES **must be a positive integer.**","lastModifiedDate":"2021-09-30"},{"lineNumber":110,"author":{"gitId":"szelongq"},"content":"* The value of SALARY **must be a non-negative number.**","lastModifiedDate":"2021-09-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"boonhaii"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com l/15` Edits the phone number, email address and leaves of the 1st employee to be `91234567`, `johndoe@example.com` and `15` respectively.","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"boonhaii"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd employee to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"### Locating employees by name: `find`","lastModifiedDate":"2021-10-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"beefham"},"content":"Find employees using the specified field, checking if their information field contains any of the given keywords / queries.","lastModifiedDate":"2021-09-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"beefham"},"content":"Format: `find [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [r/ROLE] [l/LEAVES] [s/SALARY]  [t/TAG]...`","lastModifiedDate":"2021-09-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"beefham"},"content":"* At least one field should be specified.","lastModifiedDate":"2021-09-27"},{"lineNumber":123,"author":{"gitId":"beefham"},"content":"* The keyword search is not case-sensitive.","lastModifiedDate":"2021-09-29"},{"lineNumber":124,"author":{"gitId":"beefham"},"content":"* For each field, you can search using multiple keywords.","lastModifiedDate":"2021-09-27"},{"lineNumber":125,"author":{"gitId":"beefham"},"content":"  * For example, `find n/John Mike r/Manager` will return all employees with the role \"Manager\" and with the names John or Mike.","lastModifiedDate":"2021-09-29"},{"lineNumber":126,"author":{"gitId":"beefham"},"content":"* You can query employees who meet the specified condition for the number of leaves by entering `l/\u003cLEAVES` (for less than LEAVES) or `l/\u003eLEAVES` (for more than LEAVES)","lastModifiedDate":"2021-09-29"},{"lineNumber":127,"author":{"gitId":"beefham"},"content":"  * For example, enter `find l/\u003e5` to find all employees who still have more than 5 leaves remaining.","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":130,"author":{"gitId":"beefham"},"content":"* `find n/John` returns `john` and `John Doe`","lastModifiedDate":"2021-09-29"},{"lineNumber":131,"author":{"gitId":"beefham"},"content":"* `find n/alex david l/\u003c3` returns `Alex Yeoh`, `David Li` as long as they have less than 3 leaves left.\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2021-09-29"},{"lineNumber":133,"author":{"gitId":"beefham"},"content":"  ","lastModifiedDate":"2021-09-29"},{"lineNumber":134,"author":{"gitId":"boonhaii"},"content":"### Deleting an employee : `delete`","lastModifiedDate":"2021-09-28"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"boonhaii"},"content":"Deletes the specified employee from the application.","lastModifiedDate":"2021-09-28"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"boonhaii"},"content":"* Deletes the employee at the specified `INDEX`.","lastModifiedDate":"2021-09-28"},{"lineNumber":141,"author":{"gitId":"boonhaii"},"content":"* The index refers to the index number shown in the displayed employee list.","lastModifiedDate":"2021-09-28"},{"lineNumber":142,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"boonhaii"},"content":"* The index cannot exceed the length of the employee list.","lastModifiedDate":"2021-09-28"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"szelongq"},"content":"* `list` followed by `delete 2` deletes the 2nd employee in the employee book.","lastModifiedDate":"2021-09-30"},{"lineNumber":147,"author":{"gitId":"boonhaii"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st employee in the results of the `find` command.","lastModifiedDate":"2021-09-28"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"danielsimre"},"content":"### Add number of leaves for an employee : `addLeaves`","lastModifiedDate":"2021-09-29"},{"lineNumber":150,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":151,"author":{"gitId":"danielsimre"},"content":"Adds the specified number of days to the current leave quota (number of days of leave left) of a chosen employee.","lastModifiedDate":"2021-09-29"},{"lineNumber":152,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":153,"author":{"gitId":"danielsimre"},"content":"Format: `addLeaves INDEX NO_OF_DAYS`","lastModifiedDate":"2021-09-29"},{"lineNumber":154,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":155,"author":{"gitId":"danielsimre"},"content":"* Adds the specified number to the number of leaves of the employee at the specified `INDEX`. ","lastModifiedDate":"2021-09-29"},{"lineNumber":156,"author":{"gitId":"boonhaii"},"content":"* The index refers to the index number shown in the displayed employee list.","lastModifiedDate":"2021-10-01"},{"lineNumber":157,"author":{"gitId":"danielsimre"},"content":"* The index **must be a positive integer** 1, 2, 3, …","lastModifiedDate":"2021-09-29"},{"lineNumber":158,"author":{"gitId":"danielsimre"},"content":"* The number of days **must be a positive integer** 1, 2, 3, …","lastModifiedDate":"2021-09-29"},{"lineNumber":159,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":160,"author":{"gitId":"danielsimre"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":161,"author":{"gitId":"szelongq"},"content":"* `list` followed by `addLeaves 3 4` adds 4 days of leave to the 3rd employee in the employee book.","lastModifiedDate":"2021-09-30"},{"lineNumber":162,"author":{"gitId":"boonhaii"},"content":"* `find Sam` followed by `addLeaves 1 1` adds 1 day of leave to the 1st employee in the results of the `find` command.","lastModifiedDate":"2021-10-01"},{"lineNumber":163,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":164,"author":{"gitId":"danielsimre"},"content":"### Remove number of leaves for an employee : `removeLeaves`","lastModifiedDate":"2021-09-29"},{"lineNumber":165,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":166,"author":{"gitId":"danielsimre"},"content":"Removes the specified number of days from the current leave quota (number of days of leave left) of a chosen employee.","lastModifiedDate":"2021-09-29"},{"lineNumber":167,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":168,"author":{"gitId":"danielsimre"},"content":"Format: `removeLeaves INDEX NO_OF_DAYS`","lastModifiedDate":"2021-09-29"},{"lineNumber":169,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":170,"author":{"gitId":"danielsimre"},"content":"* Removes the specified number from the number of leaves of the employee at the specified `INDEX`. ","lastModifiedDate":"2021-09-29"},{"lineNumber":171,"author":{"gitId":"boonhaii"},"content":"* The index refers to the index number shown in the displayed employee list.","lastModifiedDate":"2021-10-01"},{"lineNumber":172,"author":{"gitId":"danielsimre"},"content":"* The index **must be a positive integer** 1, 2, 3, …","lastModifiedDate":"2021-09-29"},{"lineNumber":173,"author":{"gitId":"danielsimre"},"content":"* The number of days **must be a positive integer** 1, 2, 3, …","lastModifiedDate":"2021-09-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":176,"author":{"gitId":"szelongq"},"content":"* `list` followed by `removeLeaves 2 1` removes 1 day of leave from the 2nd employee in the employee book.","lastModifiedDate":"2021-09-30"},{"lineNumber":177,"author":{"gitId":"boonhaii"},"content":"* `find Anthony` followed by `removeLeaves 4 2` removes 2 days of leave from the 4th employee in the results of the `find` command.","lastModifiedDate":"2021-10-01"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"szelongq"},"content":"Clears all entries from the employee book.","lastModifiedDate":"2021-09-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"szelongq"},"content":"### Calculating salary : `calculate` `[to be implemented in v1.2]`","lastModifiedDate":"2021-09-30"},{"lineNumber":192,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":193,"author":{"gitId":"szelongq"},"content":"Calculate and display the monthly salary of the specified employee.","lastModifiedDate":"2021-09-30"},{"lineNumber":194,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":195,"author":{"gitId":"szelongq"},"content":"Format: `calculate INDEX`","lastModifiedDate":"2021-09-30"},{"lineNumber":196,"author":{"gitId":"szelongq"},"content":"* Calculate and displays the monthly salary of the employee at the specified `INDEX`.","lastModifiedDate":"2021-09-30"},{"lineNumber":197,"author":{"gitId":"szelongq"},"content":"* The index refers to the index number shown in the displayed employee list.","lastModifiedDate":"2021-09-30"},{"lineNumber":198,"author":{"gitId":"szelongq"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-09-30"},{"lineNumber":199,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":200,"author":{"gitId":"szelongq"},"content":"Example:","lastModifiedDate":"2021-09-30"},{"lineNumber":201,"author":{"gitId":"szelongq"},"content":"* `find Betsy` followed by `calculate 2` gets the salary of the 2nd employee in the results of the `find` command.","lastModifiedDate":"2021-09-30"},{"lineNumber":202,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":203,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"boonhaii"},"content":"HeRon data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-09-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":209,"author":{"gitId":"boonhaii"},"content":"HeRon data are saved as a JSON file `[JAR file location]/data/HeRon.json`. Advanced users are welcome to update data directly by editing the data file.","lastModifiedDate":"2021-10-01"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":212,"author":{"gitId":"szelongq"},"content":"If your changes to the data file makes its format invalid, HeRon will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-09-30"},{"lineNumber":213,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":215,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"szelongq"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous HeRon home folder.","lastModifiedDate":"2021-09-30"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"beefham"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS r/ROLE l/LEAVES s/SALARY hw/HOURSWORKED [t/TAG]…​` \u003cbr\u003e e.g., `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 r/Admin Assistant l/14 s/3000 hw/40 t/friend t/colleague`","lastModifiedDate":"2021-09-30"},{"lineNumber":231,"author":{"gitId":"danielsimre"},"content":"**Add Leaves** | `addLeaves INDEX NO_OF_DAYS` \u003cbr\u003e e.g., `addLeaves 1 2`","lastModifiedDate":"2021-09-29"},{"lineNumber":232,"author":{"gitId":"danielsimre"},"content":"**Remove Leaves** | `removeLeaves INDEX NO_OF_DAYS` \u003cbr\u003e e.g., `removeLeaves 4 1`","lastModifiedDate":"2021-09-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"**Clear** | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"szelongq"},"content":"**Calculate** | `calculate INDEX`\u003cbr\u003e e.g., `calculate 3`","lastModifiedDate":"2021-09-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"szelongq"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [r/ROLE] [l/LEAVES] [s/SALARY] [h/HOURS_WORKED] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com l/15`","lastModifiedDate":"2021-09-30"},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"**List** | `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"danielsimre":23,"szelongq":24,"boonhaii":36,"beefham":12,"-":144}},{"path":"docs/team/beefham.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"layout: page","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"title: Wee Han\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"### Project: HeRon","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"HeRon is a desktop application for HR managers to assist in managing HR administrative tasks such as tracking leaves and offs, calculating pay and updating payroll information.","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"HeRon is a project adapted from AddressBook - Level 3.","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"* **New Feature**:","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dbeefham\u0026tabRepo\u003dAY2122S1-CS2103T-F11-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003d\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"* **Project management**:","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    * User Guide:","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"        * Added documentation for the features `find`","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        * Added use cases for the `find` feature.","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"* **Community**:","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"* **Tools**:","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"beefham":29}},{"path":"docs/team/boonhaii.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"layout: page","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"title: Boon Hai\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"### Project: HeRon","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"HeRon is a desktop application for HR managers to assist in managing HR administrative tasks such as tracking leaves and offs, calculating pay and updating payroll information.","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"HeRon is a project adapted from AddressBook - Level 3.","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"* **New Feature**: ","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"  * To be updated.","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"  ","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003dboonhaii\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17)","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"* **Project management**:","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"  * To be updated.","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"  * Update `add` and `delete` commands to cater to new fields for HeRon, including role, leaves, salary and hours worked.","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"  * User Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"    * Updated documentation for the features `add` and `delete` [#id]()","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"    * Add User Stories for application [#id]()","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"    * Updated implementation details of the `add` and `delete` feature. [#id]()","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"* **Community**:","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"  * To be updated.","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"  ","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"boonhaii":34}},{"path":"docs/team/danielsimre.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"layout: page","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"title: Daniel Sim\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"### Project: HeRon","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"HeRon is a desktop application for HR managers to assist in managing HR administrative tasks such as tracking leaves and offs, calculating pay and updating payroll information. ","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"HeRon is a project adapted from AddressBook - Level 3. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003ddanielsimre\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17)","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"  * User Guide:","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    * Added documentation for the commands `addLeaves` and `removeLeaves`.","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    * Added use cases for `addLeaves` and `removeLeaves` commands.","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"danielsimre":20}},{"path":"docs/team/szelongq.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"---","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"layout: page","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"title: Quek Sze Long\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"---","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"### Project: HeRon","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"HeRon is a desktop application for HR managers to assist in managing HR administrative tasks such as tracking leaves and offs, calculating pay and updating payroll information.","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"HeRon is a project adapted from AddressBook - Level 3.","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003dszelong\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-09-17\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dszelongq\u0026tabRepo\u003dAY2122S1-CS2103T-F11-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003d\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"  * User Guide:","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"    * Added documentation for the feature `calculate` [\\#TBD]()","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"    * Added use case of the `calculate` feature.","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"szelongq":21}},{"path":"docs/team/weikiat.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"---","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"layout: page","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"title: Wei Kiat\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"---","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"// Still in progress //","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"### Project: HeRon Level 3","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"HeRon is a desktop application for Human Resource Managers in companies to increase the convenience of managing employee information","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003d1waykiat\u0026tabRepo\u003dAY2122S1-CS2103T-F11-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003d\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"    * User Guide:","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"        * Added documentation for the features `edit` ","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"        * Added documentation for the feature `edit`","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"        ","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"1waykiat":20}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_INVALID_INTEGER_INPUT \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"            \"Please input a valid positive integer when adding/removing leaves! \\n%1$s\";","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_INVALID_REMOVELEAVES_INPUT \u003d \"Employee has less than %1$s leaves!\";","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"danielsimre":3,"-":12}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVES;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"            + PREFIX_ROLE + \"ROLE \"","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"            + PREFIX_LEAVES + \"LEAVES \"","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"            + PREFIX_SALARY + \"SALARY \"","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"            + PREFIX_HOURSWORKED + \"HOURS WORKED \"","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"            + PREFIX_ROLE + \"Admin Assistant \"","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"            + PREFIX_LEAVES + \"14 \"","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"            + PREFIX_SALARY + \"3000 \"","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"            + PREFIX_HOURSWORKED + \"40 \"","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"boonhaii":12,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/AddLeavesCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":" * Adds some number of leaves to an employee in HeRon.","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"public class AddLeavesCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    public static final String COMMAND_WORD \u003d \"addLeaves\";","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"            + \": Adds leaves to the employee identified \"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"            + \"by the index number used in the last person listing. \\n\"","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"            + \"l/NO_OF_DAYS (must be a positive integer) \\n\"","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 l/2\";","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_SUCCESS \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"            \"Leaves successfully added, current leaves are: %1$s\";","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    private final Index index;","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    private final Leaves leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"     * Creates an AddLeavesCommand instance.","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"     * @param index of the person in the filtered employee list to add leaves to","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"     * @param leaves that are to be added to the employee","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"    public AddLeavesCommand(Index index, Leaves leaves) {","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        requireAllNonNull(index, leaves);","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        this.leaves \u003d leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(), personToEdit.getAddress(),","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getRole(), personToEdit.getLeaves().addLeaves(leaves), personToEdit.getSalary(),","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getHoursWorked(), personToEdit.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, editedPerson.getLeaves()));","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        // Short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"            return true;","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"        if (!(other instanceof AddLeavesCommand)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"            return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"        // State check","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        AddLeavesCommand e \u003d (AddLeavesCommand) other;","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 leaves.equals(e.leaves);","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":82}},{"path":"src/main/java/seedu/address/logic/commands/CalculatePayCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"import java.util.List;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Salary;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":" * Calculates an employee\u0027s pay using it\u0027s displayed index from the address book.","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"public class CalculatePayCommand extends Command {","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"    public static final String COMMAND_WORD \u003d \"calculate\";","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"            + \": Calculates the pay of the employee identified by the index number \"","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"            + \"used in the displayed person list.\\n\"","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"    public static final String MESSAGE_CALCULATE_PAY_SUCCESS \u003d \"Calculated Pay: %1$s\";","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"szelongq"},"content":"    public CalculatePayCommand(Index targetIndex) {","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"szelongq"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"szelongq"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"szelongq"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"        Person personToCalculatePay \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"szelongq"},"content":"        Salary calculatedPay \u003d personToCalculatePay.getSalary();","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"        return new CommandResult(String.format(MESSAGE_CALCULATE_PAY_SUCCESS, calculatedPay));","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"szelongq"},"content":"                || (other instanceof CalculatePayCommand // instanceof handles nulls","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"                \u0026\u0026 targetIndex.equals(((CalculatePayCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"szelongq":57}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVES;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Salary;","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"1waykiat"},"content":"            + \"[\" + PREFIX_ROLE + \"ROLE] \"","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"1waykiat"},"content":"            + \"[\" + PREFIX_LEAVES + \"LEAVES] \"","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"1waykiat"},"content":"            + \"[\" + PREFIX_SALARY + \"SALARY] \"","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"1waykiat"},"content":"            + \"[\" + PREFIX_HOURSWORKED + \"HOURS_WORKED] \"","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":112,"author":{"gitId":"1waykiat"},"content":"        Role updatedRole \u003d editPersonDescriptor.getRole().orElse(personToEdit.getRole());","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"1waykiat"},"content":"        Leaves updatedLeaves \u003d editPersonDescriptor.getLeaves().orElse(personToEdit.getLeaves());","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"1waykiat"},"content":"        Salary updatedSalary \u003d editPersonDescriptor.getSalary().orElse(personToEdit.getSalary());","lastModifiedDate":"2021-10-07"},{"lineNumber":115,"author":{"gitId":"1waykiat"},"content":"        HoursWorked updatedHours \u003d editPersonDescriptor.getHoursWorked().orElse(personToEdit.getHoursWorked());","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":118,"author":{"gitId":"1waykiat"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"1waykiat"},"content":"                updatedRole, updatedLeaves, updatedSalary, updatedHours, updatedTags);","lastModifiedDate":"2021-10-07"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":149,"author":{"gitId":"1waykiat"},"content":"        private Role role;","lastModifiedDate":"2021-10-07"},{"lineNumber":150,"author":{"gitId":"1waykiat"},"content":"        private Leaves leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":151,"author":{"gitId":"1waykiat"},"content":"        private Salary salary;","lastModifiedDate":"2021-10-07"},{"lineNumber":152,"author":{"gitId":"1waykiat"},"content":"        private HoursWorked hoursWorked;","lastModifiedDate":"2021-10-07"},{"lineNumber":153,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":159,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":160,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":161,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":167,"author":{"gitId":"1waykiat"},"content":"            setRole(toCopy.role);","lastModifiedDate":"2021-10-07"},{"lineNumber":168,"author":{"gitId":"1waykiat"},"content":"            setLeaves(toCopy.leaves);","lastModifiedDate":"2021-10-07"},{"lineNumber":169,"author":{"gitId":"1waykiat"},"content":"            setSalary(toCopy.salary);","lastModifiedDate":"2021-10-07"},{"lineNumber":170,"author":{"gitId":"1waykiat"},"content":"            setHoursWorked(toCopy.hoursWorked);","lastModifiedDate":"2021-10-07"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"1waykiat"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, role, leaves, salary, hoursWorked, tags);","lastModifiedDate":"2021-10-07"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":213,"author":{"gitId":"1waykiat"},"content":"        public void setRole(Role role) {","lastModifiedDate":"2021-10-07"},{"lineNumber":214,"author":{"gitId":"1waykiat"},"content":"            this.role \u003d role;","lastModifiedDate":"2021-10-07"},{"lineNumber":215,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":216,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":217,"author":{"gitId":"1waykiat"},"content":"        public Optional\u003cRole\u003e getRole() {","lastModifiedDate":"2021-10-07"},{"lineNumber":218,"author":{"gitId":"1waykiat"},"content":"            return Optional.ofNullable(role);","lastModifiedDate":"2021-10-07"},{"lineNumber":219,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":220,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":221,"author":{"gitId":"1waykiat"},"content":"        public void setLeaves(Leaves leaves) {","lastModifiedDate":"2021-10-07"},{"lineNumber":222,"author":{"gitId":"1waykiat"},"content":"            this.leaves \u003d leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":223,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":224,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":225,"author":{"gitId":"1waykiat"},"content":"        public Optional\u003cLeaves\u003e getLeaves() {","lastModifiedDate":"2021-10-07"},{"lineNumber":226,"author":{"gitId":"1waykiat"},"content":"            return Optional.ofNullable(leaves);","lastModifiedDate":"2021-10-07"},{"lineNumber":227,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":228,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":229,"author":{"gitId":"1waykiat"},"content":"        public void setSalary(Salary salary) {","lastModifiedDate":"2021-10-07"},{"lineNumber":230,"author":{"gitId":"1waykiat"},"content":"            this.salary \u003d salary;","lastModifiedDate":"2021-10-07"},{"lineNumber":231,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":232,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":233,"author":{"gitId":"1waykiat"},"content":"        public Optional\u003cSalary\u003e getSalary() {","lastModifiedDate":"2021-10-07"},{"lineNumber":234,"author":{"gitId":"1waykiat"},"content":"            return Optional.ofNullable(salary);","lastModifiedDate":"2021-10-07"},{"lineNumber":235,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":236,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":237,"author":{"gitId":"1waykiat"},"content":"        public void setHoursWorked(HoursWorked hours) {","lastModifiedDate":"2021-10-07"},{"lineNumber":238,"author":{"gitId":"1waykiat"},"content":"            this.hoursWorked \u003d hours;","lastModifiedDate":"2021-10-07"},{"lineNumber":239,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":240,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":241,"author":{"gitId":"1waykiat"},"content":"        public Optional\u003cHoursWorked\u003e getHoursWorked() {","lastModifiedDate":"2021-10-07"},{"lineNumber":242,"author":{"gitId":"1waykiat"},"content":"            return Optional.ofNullable(hoursWorked);","lastModifiedDate":"2021-10-07"},{"lineNumber":243,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":244,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":246,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":247,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":248,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":254,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":255,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":256,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":257,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":264,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":266,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":269,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":271,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":272,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":274,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":277,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":278,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":279,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":280,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":281,"author":{"gitId":"1waykiat"},"content":"                    \u0026\u0026 getRole().equals(e.getRole())","lastModifiedDate":"2021-10-07"},{"lineNumber":282,"author":{"gitId":"1waykiat"},"content":"                    \u0026\u0026 getLeaves().equals(e.getLeaves())","lastModifiedDate":"2021-10-07"},{"lineNumber":283,"author":{"gitId":"1waykiat"},"content":"                    \u0026\u0026 getSalary().equals(e.getSalary())","lastModifiedDate":"2021-10-07"},{"lineNumber":284,"author":{"gitId":"1waykiat"},"content":"                    \u0026\u0026 getHoursWorked().equals(e.getHoursWorked())","lastModifiedDate":"2021-10-07"},{"lineNumber":285,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":288,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"-":224,"1waykiat":64}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    private final Predicate\u003cPerson\u003e predicate;","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"    public FindCommand(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"beefham":5,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/RemoveLeavesCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":" * Removes some number of leaves from an employee in HeRon.","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"public class RemoveLeavesCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    public static final String COMMAND_WORD \u003d \"removeLeaves\";","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"            + \": Removes leaves from the employee identified \"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"            + \"Number of leaves removed cannot be greater than the amount of leaves \"","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"            + \"the employee currently has. \\n\"","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"            + \"l/NO_OF_DAYS (must be a positive integer) \\n\"","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 l/2\";","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_SUCCESS \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"            \"Leaves successfully removed, current leaves are: %1$s\";","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    private final Index index;","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    private final Leaves leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"     * Creates a RemoveLeavesCommand instance.","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     * @param index of the person in the filtered employee list to remove leaves from","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"     * @param leaves that are to be added to the employee","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"    public RemoveLeavesCommand(Index index, Leaves leaves) {","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        requireAllNonNull(index, leaves);","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        this.leaves \u003d leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        Person editedPerson;","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"            editedPerson \u003d new Person(","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"                    personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(), personToEdit.getAddress(),","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"                    personToEdit.getRole(), personToEdit.getLeaves().removeLeaves(leaves), personToEdit.getSalary(),","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"                    personToEdit.getHoursWorked(), personToEdit.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"                    String.format(Messages.MESSAGE_INVALID_REMOVELEAVES_INPUT, leaves));","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, editedPerson.getLeaves()));","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"        // Short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"            return true;","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"        if (!(other instanceof RemoveLeavesCommand)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"            return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"        // State check","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        RemoveLeavesCommand e \u003d (RemoveLeavesCommand) other;","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 leaves.equals(e.leaves);","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":90}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVES;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Salary;","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_ROLE,","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"                        PREFIX_LEAVES, PREFIX_SALARY, PREFIX_HOURSWORKED, PREFIX_TAG);","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ROLE,","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"                PREFIX_LEAVES, PREFIX_SALARY, PREFIX_HOURSWORKED)","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"        Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        Leaves leaves \u003d ParserUtil.parseLeaves(argMultimap.getValue(PREFIX_LEAVES).get());","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"boonhaii"},"content":"        Salary salary \u003d ParserUtil.parseSalary(argMultimap.getValue(PREFIX_SALARY).get());","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"        HoursWorked hoursWorked \u003d ParserUtil.parseHoursWorked(argMultimap.getValue(PREFIX_HOURSWORKED).get());","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"        Person person \u003d new Person(name, phone, email, address, role, leaves, salary, hoursWorked, tagList);","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"danielsimre":3,"boonhaii":14,"-":58}},{"path":"src/main/java/seedu/address/logic/parser/AddLeavesCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INTEGER_INPUT;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVES;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.AddLeavesCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":" * Parses input arguments and creates a new AddLeavesCommand object.","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"public class AddLeavesCommandParser implements Parser\u003cAddLeavesCommand\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"     * Parses the given {@code String} of arguments in the context of the AddLeavesCommand","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"     * and returns a AddLeavesCommand object for execution.","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"     * @param args A string representing the user\u0027s input.","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * @return A new AddLeavesCommand object.","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * or an invalid integer input for the number of leaves is given.","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    public AddLeavesCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"                PREFIX_LEAVES);","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        Index index;","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"                    AddLeavesCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        String numberOfLeavesString \u003d argMultimap.getValue(PREFIX_LEAVES).orElse(\"\");","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        // If prefix is missing","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        if (numberOfLeavesString.equals(\"\")) {","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"                    AddLeavesCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        int numberOfLeaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"            numberOfLeaves \u003d Integer.parseInt(numberOfLeavesString);","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_INTEGER_INPUT,","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"                    AddLeavesCommand.MESSAGE_USAGE), nfe);","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        // If a non-positive integer is given","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        if (numberOfLeaves \u003c\u003d 0) {","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_INTEGER_INPUT,","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"                    AddLeavesCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        return new AddLeavesCommand(index, new Leaves(numberOfLeavesString));","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":63}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.AddLeavesCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.CalculatePayCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.RemoveLeavesCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"        case AddLeavesCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"            return new AddLeavesCommandParser().parse(arguments);","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"        case RemoveLeavesCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"            return new RemoveLeavesCommandParser().parse(arguments);","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"szelongq"},"content":"        case CalculatePayCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"szelongq"},"content":"            return new CalculatePayCommandParser().parse(arguments);","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"danielsimre":8,"szelongq":4,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-03-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"beefham"},"content":"    public String toString() {","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"beefham"},"content":"        return argMultimap.toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"beefham":5,"-":60}},{"path":"src/main/java/seedu/address/logic/parser/CalculatePayCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.CalculatePayCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":" * Parses input arguments and creates a new CalculatePayCommand object","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"public class CalculatePayCommandParser implements Parser\u003cCalculatePayCommand\u003e {","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"     * Parses the given {@code String} of arguments in the context of the CalculatePayCommand","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"     * and returns a CalculatePayCommand object for execution.","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"    public CalculatePayCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"        try {","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"            return new CalculatePayCommand(index);","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalculatePayCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"szelongq":30}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"    public static final Prefix PREFIX_LEAVES \u003d new Prefix(\"l/\");","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"    public static final Prefix PREFIX_SALARY \u003d new Prefix(\"s/\");","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    public static final Prefix PREFIX_HOURSWORKED \u003d new Prefix(\"hw/\");","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"danielsimre":1,"boonhaii":3,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVES;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"1waykiat"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"1waykiat"},"content":"                        PREFIX_ROLE, PREFIX_LEAVES, PREFIX_SALARY, PREFIX_HOURSWORKED, PREFIX_TAG);","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"1waykiat"},"content":"        if (argMultimap.getValue(PREFIX_ROLE).isPresent()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"1waykiat"},"content":"            editPersonDescriptor.setRole(ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get()));","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"1waykiat"},"content":"        if (argMultimap.getValue(PREFIX_LEAVES).isPresent()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"1waykiat"},"content":"            editPersonDescriptor.setLeaves(ParserUtil.parseLeaves(argMultimap.getValue(PREFIX_LEAVES).get()));","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"1waykiat"},"content":"        if (argMultimap.getValue(PREFIX_SALARY).isPresent()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"1waykiat"},"content":"            editPersonDescriptor.setSalary(ParserUtil.parseSalary(argMultimap.getValue(PREFIX_SALARY).get()));","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"1waykiat"},"content":"        if (argMultimap.getValue(PREFIX_HOURSWORKED).isPresent()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"1waykiat"},"content":"            editPersonDescriptor.setHoursWorked(","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"1waykiat"},"content":"                    ParserUtil.parseHoursWorked(argMultimap.getValue(PREFIX_HOURSWORKED).get()));","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"-":81,"1waykiat":19}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVES;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.AddressContainsKeywordsPredicate;","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.EmailContainsKeywordsPredicate;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.PhoneNumberMatchesPredicate;","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.RoleContainsKeywordsPredicate;","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"    private List\u003cPredicate\u003cPerson\u003e\u003e filters \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_ROLE,","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"                        PREFIX_LEAVES, PREFIX_SALARY, PREFIX_HOURSWORKED, PREFIX_TAG);","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        // To modify in the future: Simply add a predicate for each relevant tag","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"        // Refer to EditCommandParser","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"            String[] nameKeywords \u003d argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\");","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"            filters.add(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"beefham"},"content":"            String[] phoneKeyNumbers \u003d argMultimap.getValue(PREFIX_PHONE).get().split(\"\\\\s+\");","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"beefham"},"content":"            filters.add(new PhoneNumberMatchesPredicate(Arrays.asList(phoneKeyNumbers)));","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"beefham"},"content":"            String[] tagKeywords \u003d argMultimap.getValue(PREFIX_TAG).get().split(\"\\\\s+\");","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"beefham"},"content":"            filters.add(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)));","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"beefham"},"content":"            String[] emailKeywords \u003d argMultimap.getValue(PREFIX_EMAIL).get().split(\"\\\\s+\");","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"beefham"},"content":"            filters.add(new EmailContainsKeywordsPredicate(Arrays.asList(emailKeywords)));","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"beefham"},"content":"            String[] addressKeywords \u003d argMultimap.getValue(PREFIX_ADDRESS).get().split(\"\\\\s+\");","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"beefham"},"content":"            filters.add(new AddressContainsKeywordsPredicate(Arrays.asList(addressKeywords)));","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_ROLE).isPresent()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"beefham"},"content":"            String[] roleKeywords \u003d argMultimap.getValue(PREFIX_ROLE).get().split(\"\\\\s+\");","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"beefham"},"content":"            filters.add(new RoleContainsKeywordsPredicate(Arrays.asList(roleKeywords)));","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"beefham"},"content":"        return new FindCommand(this.combinePredicates(filters));","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"beefham"},"content":"     * Combines the list of predicates in a list to a single predicate for the FindCommand to take in","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"beefham"},"content":"     *","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"beefham"},"content":"     * @param predicateList The list of predicates to combine","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"beefham"},"content":"    private Predicate\u003cPerson\u003e combinePredicates(List\u003cPredicate\u003cPerson\u003e\u003e predicateList) {","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"beefham"},"content":"        return predicateList.stream()","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"beefham"},"content":"                            .reduce(x -\u003e true, (predicate1, predicate2) -\u003e predicate1.and(predicate2));","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"beefham":59,"-":31}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Salary;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"boonhaii"},"content":"     * Parses a {@code String roleName} into a {@code Role}.","lastModifiedDate":"2021-10-01"},{"lineNumber":106,"author":{"gitId":"boonhaii"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-01"},{"lineNumber":107,"author":{"gitId":"boonhaii"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"     * @throws ParseException if the given {@code roleName} is invalid.","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":110,"author":{"gitId":"boonhaii"},"content":"    public static Role parseRole(String roleName) throws ParseException {","lastModifiedDate":"2021-10-01"},{"lineNumber":111,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(roleName);","lastModifiedDate":"2021-10-01"},{"lineNumber":112,"author":{"gitId":"boonhaii"},"content":"        String trimmedRole \u003d roleName.trim();","lastModifiedDate":"2021-10-01"},{"lineNumber":113,"author":{"gitId":"boonhaii"},"content":"        if (!Role.isValidRole(trimmedRole)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"boonhaii"},"content":"            throw new ParseException(Role.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"        return new Role(trimmedRole);","lastModifiedDate":"2021-10-01"},{"lineNumber":117,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":118,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e master","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"     * Parses a {@code String amount} into a {@code Leaves}.","lastModifiedDate":"2021-10-07"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if the given {@code amount} is invalid.","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"    public static Leaves parseLeaves(String amount) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"        String trimmedAmount \u003d amount.trim();","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"        if (!Leaves.isValidLeaves(trimmedAmount)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(Leaves.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"danielsimre"},"content":"        return new Leaves(trimmedAmount);","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":134,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"danielsimre"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2021-10-08"},{"lineNumber":137,"author":{"gitId":"danielsimre"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":138,"author":{"gitId":"boonhaii"},"content":"     * Parses a {@code String amount} into a {@code Salary}.","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"boonhaii"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"boonhaii"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"boonhaii"},"content":"     * @throws ParseException if the given {@code amount} is invalid.","lastModifiedDate":"2021-10-01"},{"lineNumber":142,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"boonhaii"},"content":"    public static Salary parseSalary(String amount) throws ParseException {","lastModifiedDate":"2021-10-01"},{"lineNumber":144,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-01"},{"lineNumber":145,"author":{"gitId":"boonhaii"},"content":"        String trimmedAmount \u003d amount.trim();","lastModifiedDate":"2021-10-01"},{"lineNumber":146,"author":{"gitId":"boonhaii"},"content":"        if (!Salary.isValidSalary(trimmedAmount)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":147,"author":{"gitId":"boonhaii"},"content":"            throw new ParseException(Salary.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":148,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":149,"author":{"gitId":"boonhaii"},"content":"        return new Salary(trimmedAmount);","lastModifiedDate":"2021-10-01"},{"lineNumber":150,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":151,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":153,"author":{"gitId":"boonhaii"},"content":"     * Parses a {@code String amount} into a {@code HoursWorked}.","lastModifiedDate":"2021-10-01"},{"lineNumber":154,"author":{"gitId":"boonhaii"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-01"},{"lineNumber":155,"author":{"gitId":"boonhaii"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":156,"author":{"gitId":"boonhaii"},"content":"     * @throws ParseException if the given {@code amount} is invalid.","lastModifiedDate":"2021-10-01"},{"lineNumber":157,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":158,"author":{"gitId":"boonhaii"},"content":"    public static HoursWorked parseHoursWorked(String amount) throws ParseException {","lastModifiedDate":"2021-10-01"},{"lineNumber":159,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-01"},{"lineNumber":160,"author":{"gitId":"boonhaii"},"content":"        String trimmedAmount \u003d amount.trim();","lastModifiedDate":"2021-10-01"},{"lineNumber":161,"author":{"gitId":"boonhaii"},"content":"        if (!HoursWorked.isValidHoursWorked(trimmedAmount)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":162,"author":{"gitId":"boonhaii"},"content":"            throw new ParseException(HoursWorked.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":163,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":164,"author":{"gitId":"boonhaii"},"content":"        return new HoursWorked(trimmedAmount);","lastModifiedDate":"2021-10-01"},{"lineNumber":165,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":166,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"danielsimre"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e master","lastModifiedDate":"2021-10-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"danielsimre":21,"boonhaii":47,"-":126}},{"path":"src/main/java/seedu/address/logic/parser/RemoveLeavesCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INTEGER_INPUT;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVES;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.RemoveLeavesCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":" * Parses input arguments and creates a new RemoveLeavesCommand object.","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"public class RemoveLeavesCommandParser implements Parser\u003cRemoveLeavesCommand\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"     * Parses the given {@code String} of arguments in the context of the RemoveLeavesCommand","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"     * and returns a RemoveLeavesCommand object for execution.","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"     * @param args A string representing the user\u0027s input.","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * @return A new RemoveLeavesCommand object.","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * or an invalid integer input for the number of leaves is given.","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    public RemoveLeavesCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"                PREFIX_LEAVES);","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        Index index;","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"                    RemoveLeavesCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        String numberOfLeavesString \u003d argMultimap.getValue(PREFIX_LEAVES).orElse(\"\");","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        // If prefix is missing","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        if (numberOfLeavesString.equals(\"\")) {","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"                    RemoveLeavesCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        int numberOfLeaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"            numberOfLeaves \u003d Integer.parseInt(numberOfLeavesString);","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_INTEGER_INPUT,","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"                    RemoveLeavesCommand.MESSAGE_USAGE), nfe);","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        // If a non-positive integer is given","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        if (numberOfLeaves \u003c\u003d 0) {","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_INTEGER_INPUT,","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"                    RemoveLeavesCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        return new RemoveLeavesCommand(index, new Leaves(numberOfLeavesString));","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":62}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"HeRon.json\");","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"boonhaii":1,"-":86}},{"path":"src/main/java/seedu/address/model/person/AddressContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"public class AddressContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"     * Tests if the person given contains the given keywords in their address. Not case sensitive.","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * @param person The person whose tags are to be tested","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @return True if any tags that the person has contains any of the queried keywords.","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"        return keywords.stream()","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"                .anyMatch(keyword -\u003e (person.getAddress().value.toLowerCase().contains(keyword.toLowerCase())));","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/EmailContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":" * Tests that a {@code Person}\u0027s {@code Email} contains any of the keywords given.","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"public class EmailContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * Tests if the person given contains the given keywords in their email. Not case sensitive.","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     * @param person The person whose tags are to be tested","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"     * @return True if any tags that the person has contains any of the queried keywords.","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"        return keywords.stream()","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"                .anyMatch(keyword -\u003e (person.getEmail().value.toLowerCase().contains(keyword.toLowerCase())));","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"beefham":33}},{"path":"src/main/java/seedu/address/model/person/HoursWorked.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":" * Represents a Person\u0027s worked hours in the employee book.","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidHoursWorked(String)}","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"public class HoursWorked {","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"            \"HoursWorked should only contain positive integers, and it should not be blank\";","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"    public final int value;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"     * Constructs a {@code HoursWorked}.","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"     * @param amount A valid value in hours.","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"    public HoursWorked(String amount) {","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"        checkArgument(isValidHoursWorked(amount), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"        this.value \u003d Integer.parseInt(amount);","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"     * Returns true if a given numerical string is non-negative.","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"    public static boolean isValidHoursWorked(String test) {","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"        try {","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"            int amount \u003d Integer.parseInt(test);","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"            return amount \u003e\u003d 0;","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"            return false;","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"    public String toString() {","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"        return Integer.toString(value);","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"                || (other instanceof Salary // instanceof handles nulls","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"                \u0026\u0026 value \u003d\u003d ((HoursWorked) other).value); // state check","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"boonhaii":54}},{"path":"src/main/java/seedu/address/model/person/Leaves.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":" * Represents a Person\u0027s remaining leaves in the employee book.","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLeaves(String)}","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"public class Leaves {","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"            \"Leaves should only contain non-negative integers, and it should not be blank\";","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"    public final int value;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"     * Constructs a {@code Leaves} object.","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"     * @param amount A valid leave amount in days.","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    public Leaves(String amount) {","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"        checkArgument(isValidLeaves(amount), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"        this.value \u003d Integer.parseInt(amount);","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     * Returns true if a given leave is a non-negative numerical value.","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"     * @param test The string input that is to be parsed into an integer.","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"     * @return True if the string is a non-negative integer, false otherwise.","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"    public static boolean isValidLeaves(String test) {","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(test);","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"            int amount \u003d Integer.parseInt(test);","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"            return amount \u003e\u003d 0;","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"            return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"     * Returns an updated Leaves object with the specified number of leaves added.","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"     * @param leaves The amount of leaves to be added.","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"     * @return An updated Leaves object.","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    public Leaves addLeaves(Leaves leaves) {","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        int updatedValue \u003d value + leaves.value;","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        return new Leaves(String.valueOf(updatedValue));","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"     * Returns an updated Leaves object with the specified number of leaves removed.","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"     * @param leaves The amount of leaves to be removed.","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"     * @return An updated Leaves object.","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"     * @throws IllegalArgumentException if the amount of leaves to be removed","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"     * is greater than the current amount of leaves.","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"    public Leaves removeLeaves(Leaves leaves) {","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        int updatedValue \u003d value - leaves.value;","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        if (updatedValue \u003c 0) {","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        return new Leaves(String.valueOf(updatedValue));","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"    public String toString() {","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"        return Integer.toString(value);","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"                || (other instanceof Leaves // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 value \u003d\u003d ((Leaves) other).value); // state check","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":82}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"    // Employee fields","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"    private final Role role;","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"    private final Leaves leaves;","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"    private final Salary salary;","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"    private final HoursWorked hoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Role role, Leaves leaves, Salary salary,","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"                  HoursWorked hoursWorked, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"        requireAllNonNull(name, phone, email, address, role, leaves, salary, hoursWorked, tags);","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"        this.role \u003d role;","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        this.leaves \u003d leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"        this.salary \u003d salary;","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"        this.hoursWorked \u003d hoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"    public Role getRole() {","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"boonhaii"},"content":"        return role;","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"    public Leaves getLeaves() {","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"        return leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"    public Salary getSalary() {","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"        return salary;","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"boonhaii"},"content":"    public HoursWorked getHoursWorked() {","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"        return hoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":123,"author":{"gitId":"boonhaii"},"content":"                \u0026\u0026 otherPerson.getRole().equals(getRole())","lastModifiedDate":"2021-10-01"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 otherPerson.getLeaves().equals(getLeaves())","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 otherPerson.getSalary().equals(getSalary())","lastModifiedDate":"2021-10-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":132,"author":{"gitId":"boonhaii"},"content":"        return Objects.hash(name, phone, email, address, role, leaves, salary, hoursWorked, tags);","lastModifiedDate":"2021-10-01"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":144,"author":{"gitId":"danielsimre"},"content":"                .append(getAddress())","lastModifiedDate":"2021-10-07"},{"lineNumber":145,"author":{"gitId":"boonhaii"},"content":"                .append(\"; Role: \")","lastModifiedDate":"2021-10-01"},{"lineNumber":146,"author":{"gitId":"boonhaii"},"content":"                .append(getRole())","lastModifiedDate":"2021-10-01"},{"lineNumber":147,"author":{"gitId":"boonhaii"},"content":"                .append(\"; Leaves: \")","lastModifiedDate":"2021-10-01"},{"lineNumber":148,"author":{"gitId":"boonhaii"},"content":"                .append(getLeaves())","lastModifiedDate":"2021-10-01"},{"lineNumber":149,"author":{"gitId":"boonhaii"},"content":"                .append(\"; Salary: \")","lastModifiedDate":"2021-10-01"},{"lineNumber":150,"author":{"gitId":"boonhaii"},"content":"                .append(getSalary())","lastModifiedDate":"2021-10-01"},{"lineNumber":151,"author":{"gitId":"boonhaii"},"content":"                .append(\"; Hours Worked: \")","lastModifiedDate":"2021-10-01"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"                .append(getHoursWorked());","lastModifiedDate":"2021-10-01"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"danielsimre":9,"boonhaii":34,"-":119}},{"path":"src/main/java/seedu/address/model/person/PhoneNumberMatchesPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":" * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given.","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":" * Phones match if their values are exactly the same.","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"public class PhoneNumberMatchesPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"    private final List\u003cString\u003e keyNumbers;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public PhoneNumberMatchesPredicate(List\u003cString\u003e keyNumbers) {","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        this.keyNumbers \u003d keyNumbers;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        String numberToTest \u003d person.getPhone().value;","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"        return keyNumbers.stream()","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"                .anyMatch(number -\u003e numberToTest.equals(number));","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof PhoneNumberMatchesPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 keyNumbers.equals(((PhoneNumberMatchesPredicate) other).keyNumbers)); // state check","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/Role.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":" * Represents a Person\u0027s Role in the employee book.","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRole(String)}","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"public class Role {","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"            \"Roles should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"    /*","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"    public final String value;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"     * Constructs a {@code Role}.","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"     * @param roleName A valid Role Name.","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"    public Role(String roleName) {","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(roleName);","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"        checkArgument(isValidRole(roleName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"        this.value \u003d roleName;","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"     * Returns true if a given string is a valid name for a role.","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"    public static boolean isValidRole(String test) {","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"    public String toString() {","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"        return this.value;","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"                || (other instanceof Role // instanceof handles nulls","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"                \u0026\u0026 value.equals(((Role) other).value)); // state check","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"        return value.hashCode();","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"boonhaii":59}},{"path":"src/main/java/seedu/address/model/person/RoleContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"public class RoleContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"    public RoleContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"     * Tests if the person given contains the given keywords in their address. Not case sensitive.","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * @param person The person whose tags are to be tested","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @return True if any tags that the person has contains any of the queried keywords.","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"        return keywords.stream()","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"                .anyMatch(keyword -\u003e (person.getRole().value.toLowerCase().contains(keyword.toLowerCase())));","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof RoleContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 keywords.equals(((RoleContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/Salary.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":" * Represents a Person\u0027s Salary in the employee book.","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSalary(String)}","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"public class Salary {","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"            \"Salary should only contain positive integers, and it should not be blank\";","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"    public final int value;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"     * Constructs a {@code Salary}.","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"     * @param amount A valid salary amount.","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"    public Salary(String amount) {","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"        checkArgument(isValidSalary(amount), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"        this.value \u003d Integer.parseInt(amount);","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"     * Returns true if a given numerical string is non-negative.","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"    public static boolean isValidSalary(String test) {","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"        try {","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"            int amount \u003d Integer.parseInt(test);","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"            return amount \u003e\u003d 0;","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"            return false;","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"    public String toString() {","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"        return Integer.toString(value);","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"                || (other instanceof Salary // instanceof handles nulls","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"                \u0026\u0026 value \u003d\u003d ((Salary) other).value); // state check","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"boonhaii":54}},{"path":"src/main/java/seedu/address/model/person/TagContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":" * Tests that a {@code Person}\u0027s {@code Tag} contains any of the keywords given.","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * Test if the person contains tags whose string value contains any of the keywords. Not case sensitive.","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     * This allows find to search for people tagged with \"friends\" with the command \"find t/friend\"","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"     * This only works since tags are alphanumeric and contain no whitespaces unlike names.","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"     * This implementation allows queries like find t/e to return every person with a tag that contains the letter e.","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"     * May not be intended but will need to find a better method of testing.","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"     * @param person The person whose tags are to be tested","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"     * @return True if any tags that the person has contains any of the queried keywords.","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        return keywords.stream()","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"                .anyMatch(keyword -\u003e (person.getTags().stream()","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"                        .anyMatch(tag -\u003e tag.tagName.toLowerCase().contains(keyword.toLowerCase()))));","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"beefham":39}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Salary;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Role(\"Admin Assistant\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"                new Leaves(\"5\"), new Salary(\"3000\"), new HoursWorked(\"40\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Role(\"Senior Software Engineer\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"                new Leaves(\"14\"), new Salary(\"8500\"), new HoursWorked(\"60\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Role(\"HR Manager\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"                new Leaves(\"9\"), new Salary(\"6000\"), new HoursWorked(\"55\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"                new Role(\"Assistant Department Manager\"), new Leaves(\"10\"), new Salary(\"5000\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"                new HoursWorked(\"55\"), getTagSet(\"family\")),","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Role(\"Logistics Officer\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"                new Leaves(\"10\"), new Salary(\"4500\"), new HoursWorked(\"52\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Role(\"Chief Operations Officer\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"                new Leaves(\"20\"), new Salary(\"13000\"), new HoursWorked(\"67\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))","lastModifiedDate":"2017-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"boonhaii":17,"-":54}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Salary;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"    private final String role;","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"    private final String leaves;","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"    private final String salary;","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"    private final String hoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"            @JsonProperty(\"role\") String role, @JsonProperty(\"leaves\") String leaves,","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"            @JsonProperty(\"salary\") String salary, @JsonProperty(\"hoursWorked\") String hoursWorked,","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"        this.role \u003d role;","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"        this.leaves \u003d leaves;","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"        this.salary \u003d salary;","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"        this.hoursWorked \u003d hoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"        role \u003d source.getRole().value;","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"        leaves \u003d source.getLeaves().toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"boonhaii"},"content":"        salary \u003d source.getSalary().toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"        hoursWorked \u003d source.getHoursWorked().toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"boonhaii"},"content":"        if (role \u003d\u003d null) {","lastModifiedDate":"2021-10-01"},{"lineNumber":124,"author":{"gitId":"boonhaii"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName()));","lastModifiedDate":"2021-10-01"},{"lineNumber":125,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":126,"author":{"gitId":"boonhaii"},"content":"        if (!Role.isValidRole(role)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":127,"author":{"gitId":"boonhaii"},"content":"            throw new IllegalValueException(Role.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":128,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":129,"author":{"gitId":"boonhaii"},"content":"        final Role modelRole \u003d new Role(role);","lastModifiedDate":"2021-10-01"},{"lineNumber":130,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":131,"author":{"gitId":"boonhaii"},"content":"        if (leaves \u003d\u003d null) {","lastModifiedDate":"2021-10-01"},{"lineNumber":132,"author":{"gitId":"boonhaii"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Leaves.class.getSimpleName()));","lastModifiedDate":"2021-10-01"},{"lineNumber":133,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":134,"author":{"gitId":"boonhaii"},"content":"        if (!Leaves.isValidLeaves(leaves)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":135,"author":{"gitId":"boonhaii"},"content":"            throw new IllegalValueException(Leaves.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":136,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":137,"author":{"gitId":"boonhaii"},"content":"        final Leaves modelLeaves \u003d new Leaves(leaves);","lastModifiedDate":"2021-10-01"},{"lineNumber":138,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"boonhaii"},"content":"        if (salary \u003d\u003d null) {","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"boonhaii"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Salary.class.getSimpleName()));","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":142,"author":{"gitId":"boonhaii"},"content":"        if (!Salary.isValidSalary(salary)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"boonhaii"},"content":"            throw new IllegalValueException(Salary.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":144,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":145,"author":{"gitId":"boonhaii"},"content":"        final Salary modelSalary \u003d new Salary(salary);","lastModifiedDate":"2021-10-01"},{"lineNumber":146,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":147,"author":{"gitId":"boonhaii"},"content":"        if (hoursWorked \u003d\u003d null) {","lastModifiedDate":"2021-10-01"},{"lineNumber":148,"author":{"gitId":"boonhaii"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-01"},{"lineNumber":149,"author":{"gitId":"boonhaii"},"content":"                    HoursWorked.class.getSimpleName()));","lastModifiedDate":"2021-10-01"},{"lineNumber":150,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":151,"author":{"gitId":"boonhaii"},"content":"        if (!HoursWorked.isValidHoursWorked(hoursWorked)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"            throw new IllegalValueException(HoursWorked.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":153,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":154,"author":{"gitId":"boonhaii"},"content":"        final HoursWorked modelHoursWorked \u003d new HoursWorked(hoursWorked);","lastModifiedDate":"2021-10-01"},{"lineNumber":155,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":157,"author":{"gitId":"boonhaii"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelRole, modelLeaves,","lastModifiedDate":"2021-10-01"},{"lineNumber":158,"author":{"gitId":"boonhaii"},"content":"                modelSalary, modelHoursWorked, modelTags);","lastModifiedDate":"2021-10-01"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":161,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"boonhaii":53,"-":108}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"    private Label role;","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"    @FXML","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"    private Label leaves;","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"    @FXML","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"    private Label salary;","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"    @FXML","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"    private Label hoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"    @FXML","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"        role.setText(person.getRole().value);","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"        leaves.setText(String.format(\"Leaves Remaining: %s\", person.getLeaves().toString()));","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"        salary.setText(String.format(\"Salary: %s\", person.getSalary().toString()));","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"        hoursWorked.setText(String.format(\"Hours Worked: %s\", person.getHoursWorked().toString()));","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"boonhaii":12,"-":77}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"      \u003cLabel fx:id\u003d\"role\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$role\" /\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"      \u003cLabel fx:id\u003d\"leaves\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$leaves\" /\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"      \u003cLabel fx:id\u003d\"salary\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$salary\" /\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"      \u003cLabel fx:id\u003d\"hoursWorked\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$hoursWorked\" /\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"boonhaii":7,"-":37}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"//import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e master","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"    */","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"danielsimre":3,"boonhaii":8,"-":154}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"//import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"boonhaii":9,"-":36}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"//import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"//import java.nio.file.Path;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"//import java.util.ArrayList;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"//import java.util.Arrays;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"//import java.util.function.Predicate;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"//import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"//import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.Model;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"    /*private class ModelStub implements Model {","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":155,"author":{"gitId":"boonhaii"},"content":"    /*private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2021-10-07"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":173,"author":{"gitId":"boonhaii"},"content":"    /*private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2021-10-07"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"boonhaii":27,"-":167}},{"path":"src/test/java/seedu/address/logic/commands/AddLeavesCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"//import seedu.address.model.Model;","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"//import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"//import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"public class AddLeavesCommandTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    //private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    public void equals() {","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"        final AddLeavesCommand standardCommand \u003d new AddLeavesCommand(INDEX_FIRST_PERSON, new Leaves(VALID_LEAVES_AMY));","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"        // Same values -\u003e returns true","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"        AddLeavesCommand commandWithSameValues \u003d new AddLeavesCommand(INDEX_FIRST_PERSON, new Leaves(VALID_LEAVES_AMY));","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"        // Same object -\u003e returns true","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        // Different types -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"        // Different index -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new AddLeavesCommand(INDEX_SECOND_PERSON, new Leaves(VALID_LEAVES_AMY))));","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        // Different number of leaves -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new AddLeavesCommand(INDEX_FIRST_PERSON, new Leaves(VALID_LEAVES_BOB))));","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":44}},{"path":"src/test/java/seedu/address/logic/commands/CalculatePayCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Salary;","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":" * {@code CalculatePayCommand}.","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"public class CalculatePayCommandTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"szelongq"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"szelongq"},"content":"        Person personToCalculatePay \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"szelongq"},"content":"        CalculatePayCommand calculatePayCommand \u003d new CalculatePayCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":"        Salary calculatedPay \u003d personToCalculatePay.getSalary();","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"szelongq"},"content":"                String.format(CalculatePayCommand.MESSAGE_CALCULATE_PAY_SUCCESS, calculatedPay);","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"        assertCommandSuccess(calculatePayCommand, model, expectedMessage, model);","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"        CalculatePayCommand calculatePayCommand \u003d new CalculatePayCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"        assertCommandFailure(calculatePayCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"szelongq"},"content":"        Person personToCalculatePay \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"        CalculatePayCommand calculatePayCommand \u003d new CalculatePayCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"        Salary calculatedPay \u003d personToCalculatePay.getSalary();","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"szelongq"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"szelongq"},"content":"                String.format(CalculatePayCommand.MESSAGE_CALCULATE_PAY_SUCCESS, calculatedPay);","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"szelongq"},"content":"        assertCommandSuccess(calculatePayCommand, model, expectedMessage, model);","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"szelongq"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"szelongq"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"szelongq"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"szelongq"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"szelongq"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"szelongq"},"content":"        CalculatePayCommand calculatePayCommand \u003d new CalculatePayCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":74,"author":{"gitId":"szelongq"},"content":"        assertCommandFailure(calculatePayCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"szelongq"},"content":"    public void equals() {","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"szelongq"},"content":"        CalculatePayCommand calculatePayFirstCommand \u003d new CalculatePayCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"szelongq"},"content":"        CalculatePayCommand calculatePaySecondCommand \u003d new CalculatePayCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"szelongq"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"szelongq"},"content":"        assertTrue(calculatePayFirstCommand.equals(calculatePayFirstCommand));","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"szelongq"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"szelongq"},"content":"        CalculatePayCommand calculatePayFirstCommandCopy \u003d new CalculatePayCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"szelongq"},"content":"        assertTrue(calculatePayFirstCommand.equals(calculatePayFirstCommandCopy));","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"szelongq"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"szelongq"},"content":"        assertFalse(calculatePayFirstCommand.equals(1));","lastModifiedDate":"2021-10-06"},{"lineNumber":91,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":92,"author":{"gitId":"szelongq"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-06"},{"lineNumber":93,"author":{"gitId":"szelongq"},"content":"        assertFalse(calculatePayFirstCommand.equals(null));","lastModifiedDate":"2021-10-06"},{"lineNumber":94,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":95,"author":{"gitId":"szelongq"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-06"},{"lineNumber":96,"author":{"gitId":"szelongq"},"content":"        assertFalse(calculatePayFirstCommand.equals(calculatePaySecondCommand));","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"szelongq":98}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"boonhaii":5,"-":27}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVES;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_ROLE_AMY \u003d \"Mobile App Developer\";","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_ROLE_BOB \u003d \"Front-End Developer\";","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_LEAVES_AMY \u003d \"20\";","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_LEAVES_BOB \u003d \"15\";","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_SALARY_AMY \u003d \"10000\";","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_SALARY_BOB \u003d \"2000\";","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_HOURSWORKED_AMY \u003d \"80\";","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_HOURSWORKED_BOB \u003d \"40\";","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"    public static final String ROLE_DESC_AMY \u003d \" \" + PREFIX_ROLE + VALID_ROLE_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"    public static final String ROLE_DESC_BOB \u003d \" \" + PREFIX_ROLE + VALID_ROLE_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"    public static final String LEAVES_DESC_AMY \u003d \" \" + PREFIX_LEAVES + VALID_LEAVES_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"    public static final String LEAVES_DESC_BOB \u003d \" \" + PREFIX_LEAVES + VALID_LEAVES_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"    public static final String SALARY_DESC_AMY \u003d \" \" + PREFIX_SALARY + VALID_SALARY_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"    public static final String SALARY_DESC_BOB \u003d \" \" + PREFIX_SALARY + VALID_SALARY_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"    public static final String HOURSWORKED_DESC_AMY \u003d \" \" + PREFIX_HOURSWORKED + VALID_HOURSWORKED_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"    public static final String HOURSWORKED_DESC_BOB \u003d \" \" + PREFIX_HOURSWORKED + VALID_HOURSWORKED_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"boonhaii"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\n\";","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"boonhaii":21,"-":127}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"//import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.Model;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"    /*private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"boonhaii"},"content":"   /* private void showNoPerson(Model model) {","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"boonhaii":20,"-":89}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"//import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.Model;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"    /*private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":171,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"boonhaii":29,"-":144}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"//import java.util.Collections;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"//import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"boonhaii":16,"-":66}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"//import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"boonhaii":6,"-":33}},{"path":"src/test/java/seedu/address/logic/commands/RemoveLeavesCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"//import seedu.address.model.Model;","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"//import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"//import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"public class RemoveLeavesCommandTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    //private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    public void equals() {","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"        final RemoveLeavesCommand standardCommand \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"                new RemoveLeavesCommand(INDEX_FIRST_PERSON, new Leaves(VALID_LEAVES_AMY));","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"        // Same values -\u003e returns true","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"        RemoveLeavesCommand commandWithSameValues \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"                new RemoveLeavesCommand(INDEX_FIRST_PERSON, new Leaves(VALID_LEAVES_AMY));","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        // Same object -\u003e returns true","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        // Different types -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"        // Different index -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new RemoveLeavesCommand(INDEX_SECOND_PERSON, new Leaves(VALID_LEAVES_AMY))));","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        // Different number of leaves -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new RemoveLeavesCommand(INDEX_FIRST_PERSON, new Leaves(VALID_LEAVES_BOB))));","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":46}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e master","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2017-12-23"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":78,"author":{"gitId":"boonhaii"},"content":"    /*","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2017-12-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":85,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":112,"author":{"gitId":"boonhaii"},"content":"    /*","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2017-12-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2017-12-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":144,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"danielsimre":1,"boonhaii":31,"-":113}},{"path":"src/test/java/seedu/address/logic/parser/AddLeavesCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INTEGER_INPUT;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVES;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.AddLeavesCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"public class AddLeavesCommandParserTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    private final AddLeavesCommandParser parser \u003d new AddLeavesCommandParser();","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    private final String validNumberOfLeaves \u003d \"3\";","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    public void parse_indexSpecified_success() {","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_LEAVES + validNumberOfLeaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"        AddLeavesCommand expectedCommand \u003d new AddLeavesCommand(targetIndex, new Leaves(validNumberOfLeaves));","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    public void parse_missingCompulsoryField_failure() {","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLeavesCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"        // No parameters","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, \" \", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        // No index","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, PREFIX_LEAVES + \"\" + validNumberOfLeaves, expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"        // No number of leaves","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, String.valueOf(INDEX_FIRST_PERSON.getOneBased()), expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        // Missing prefix","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"                + validNumberOfLeaves, expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"    public void parse_invalidInteger_failure() {","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_INTEGER_INPUT, AddLeavesCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        String userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_LEAVES;","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        // Not an integer","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1.1\", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        // Not a positive integer","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"-1\", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":58}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVES;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"//import java.util.Arrays;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"//import java.util.List;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"//import java.util.stream.Collectors;","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.AddLeavesCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"//import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.RemoveLeavesCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"//import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"beefham"},"content":"    /*","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"beefham"},"content":"    */","lastModifiedDate":"2021-10-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"    public void parseCommand_addLeaves() throws Exception {","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"        final Leaves leaves \u003d new Leaves(\"3\");","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"        AddLeavesCommand command \u003d (AddLeavesCommand) parser.parseCommand(AddLeavesCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_LEAVES + leaves);","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"        assertEquals(new AddLeavesCommand(INDEX_FIRST_PERSON, leaves), command);","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"    public void parseCommand_removeLeaves() throws Exception {","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        final Leaves numberOfLeaves \u003d new Leaves(\"3\");","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        RemoveLeavesCommand command \u003d (RemoveLeavesCommand) parser.parseCommand(RemoveLeavesCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_LEAVES + numberOfLeaves);","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"        assertEquals(new RemoveLeavesCommand(INDEX_FIRST_PERSON, numberOfLeaves), command);","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"danielsimre":20,"boonhaii":11,"beefham":8,"-":84}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"//import java.util.Arrays;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"//import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    /*","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"    */","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"beefham":5,"-":29}},{"path":"src/test/java/seedu/address/logic/parser/RemoveLeavesCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INTEGER_INPUT;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVES;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.RemoveLeavesCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"public class RemoveLeavesCommandParserTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    private final RemoveLeavesCommandParser parser \u003d new RemoveLeavesCommandParser();","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    private final String validNumberOfLeaves \u003d \"3\";","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    public void parse_indexSpecified_success() {","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_LEAVES + validNumberOfLeaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"        RemoveLeavesCommand expectedCommand \u003d new RemoveLeavesCommand(targetIndex, new Leaves(validNumberOfLeaves));","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    public void parse_missingCompulsoryField_failure() {","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveLeavesCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"        // No parameters","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, \" \", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        // No index","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, PREFIX_LEAVES + \"\" + validNumberOfLeaves, expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"        // No number of leaves","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, String.valueOf(INDEX_FIRST_PERSON.getOneBased()), expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        // Missing prefix","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"                + validNumberOfLeaves, expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"    public void parse_invalidInteger_failure() {","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_INTEGER_INPUT, RemoveLeavesCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        String userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_LEAVES;","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        // Not an integer","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1.1\", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        // Not a positive integer","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"-1\", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":58}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"//import java.util.Arrays;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"//import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"boonhaii":13,"-":89}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"//import java.util.Arrays;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":131,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"boonhaii":14,"-":118}},{"path":"src/test/java/seedu/address/model/person/LeavesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"public class LeavesTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Leaves(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    public void constructor_invalidLeaves_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"        // Not an integer","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, Leaves.MESSAGE_CONSTRAINTS, () -\u003e new Leaves(\".\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, Leaves.MESSAGE_CONSTRAINTS, () -\u003e new Leaves(\"1.1\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"        // Negative integer","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, Leaves.MESSAGE_CONSTRAINTS, () -\u003e new Leaves(\"-1\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"    public void isValidLeaves() {","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"        // Null leaves","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"        assertThrows(NullPointerException.class, () -\u003e Leaves.isValidLeaves(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        // Invalid leaves","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"        assertFalse(Leaves.isValidLeaves(\"\")); // empty string","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        assertFalse(Leaves.isValidLeaves(\" \")); // spaces only","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        // Valid leaves","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        assertTrue(Leaves.isValidLeaves(\"0\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        assertTrue(Leaves.isValidLeaves(\"3\")); // Non-zero integer","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"        assertTrue(Leaves.isValidLeaves(\"03\")); // Integer with redundant 0","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"    public void equals() {","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        Leaves leaves \u003d new Leaves(\"3\");","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        Leaves sameLeaves \u003d leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        assertTrue(leaves.equals(sameLeaves)); // Same object","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        assertTrue(leaves.equals(new Leaves(\"3\"))); // Same number of leaves","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        assertFalse(leaves.equals(null)); // Null object","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        assertFalse(leaves.equals(new Name(\"test\"))); // Not a leaves object","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        assertFalse(leaves.equals(new Leaves(\"2\"))); // Different number of leaves","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":53}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"boonhaii":5,"-":70}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"//import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"//    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"//        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"//    public void isSamePerson() {","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"//        // same object -\u003e returns true","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"//        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"//        // null -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"//        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"//        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"//        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"//                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"//        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"//        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"//        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"//        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"//        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"//        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"//        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"//        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"//        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"//        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"//        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"//    public void equals() {","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"//        // same values -\u003e returns true","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"//        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"//        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"boonhaii"},"content":"//        // same object -\u003e returns true","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"//        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"//        // null -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"//        assertFalse(ALICE.equals(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"//        // different type -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"//        assertFalse(ALICE.equals(5));","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"boonhaii"},"content":"//        // different person -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"//        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"//        // different name -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"//        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"boonhaii"},"content":"//        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"//        // different phone -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"//        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"boonhaii"},"content":"//        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"boonhaii"},"content":"//        // different email -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"//        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"boonhaii"},"content":"//        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"boonhaii"},"content":"//        // different address -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"boonhaii"},"content":"//        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"boonhaii"},"content":"//        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"boonhaii"},"content":"//        // different tags -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"boonhaii"},"content":"//        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"boonhaii"},"content":"//        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"boonhaii":85,"-":6}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-08-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"//import java.util.Arrays;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"//import java.util.Collections;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"//import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"//import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"//    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"//    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"//    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"//        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"//    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"//        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"//    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"//                .build();","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"//        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"//    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"//    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"//    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"//    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"//    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"boonhaii"},"content":"//    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"boonhaii"},"content":"//        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"//        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"boonhaii"},"content":"//    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"boonhaii"},"content":"//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"boonhaii"},"content":"//                .build();","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"boonhaii"},"content":"//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"boonhaii"},"content":"//        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"boonhaii"},"content":"//        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"boonhaii"},"content":"//    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"boonhaii"},"content":"//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"boonhaii"},"content":"//        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"boonhaii"},"content":"//        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"boonhaii"},"content":"//    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.add(BOB);","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"boonhaii"},"content":"//    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":115,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":117,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":118,"author":{"gitId":"boonhaii"},"content":"//    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2021-10-07"},{"lineNumber":120,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":121,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":122,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"boonhaii"},"content":"//    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.remove(ALICE);","lastModifiedDate":"2021-10-07"},{"lineNumber":126,"author":{"gitId":"boonhaii"},"content":"//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":127,"author":{"gitId":"boonhaii"},"content":"//        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"boonhaii"},"content":"//    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":134,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":135,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":136,"author":{"gitId":"boonhaii"},"content":"//    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":137,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-07"},{"lineNumber":138,"author":{"gitId":"boonhaii"},"content":"//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":139,"author":{"gitId":"boonhaii"},"content":"//        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2021-10-07"},{"lineNumber":140,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2021-10-07"},{"lineNumber":141,"author":{"gitId":"boonhaii"},"content":"//        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2021-10-07"},{"lineNumber":142,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":143,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":144,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":145,"author":{"gitId":"boonhaii"},"content":"//    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":146,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2021-10-07"},{"lineNumber":147,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":148,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":149,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":150,"author":{"gitId":"boonhaii"},"content":"//    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":151,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-07"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"//        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2021-10-07"},{"lineNumber":153,"author":{"gitId":"boonhaii"},"content":"//        uniquePersonList.setPersons(personList);","lastModifiedDate":"2021-10-07"},{"lineNumber":154,"author":{"gitId":"boonhaii"},"content":"//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":155,"author":{"gitId":"boonhaii"},"content":"//        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2021-10-07"},{"lineNumber":156,"author":{"gitId":"boonhaii"},"content":"//        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2021-10-07"},{"lineNumber":157,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":158,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":159,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":160,"author":{"gitId":"boonhaii"},"content":"//    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":161,"author":{"gitId":"boonhaii"},"content":"//        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2021-10-07"},{"lineNumber":162,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2021-10-07"},{"lineNumber":163,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":164,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":165,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"boonhaii"},"content":"//    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":167,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2021-10-07"},{"lineNumber":168,"author":{"gitId":"boonhaii"},"content":"//            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2021-10-07"},{"lineNumber":169,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"boonhaii":164,"-":6}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"//import java.util.ArrayList;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"//import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.person.Salary;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_ROLE \u003d \"p0w3rR4anger\";","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_LEAVES_CHAR \u003d \"a\";","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_LEAVES_NEGATIVE \u003d \"-14\";","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_SALARY_CHAR \u003d \"yolo\";","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_SALARY_NEGATIVE \u003d \"-3000\";","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_HOURSWORKED_CHAR \u003d \"A day\";","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_HOURSWORKED_NEGATIVE \u003d \"-27\";","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"    private static final String VALID_ROLE \u003d BENSON.getRole().toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"    private static final String VALID_LEAVES \u003d BENSON.getLeaves().toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"    private static final String VALID_SALARY \u003d BENSON.getSalary().toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"    private static final String VALID_HOURSWORKED \u003d BENSON.getHoursWorked().toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"//        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"boonhaii"},"content":"//                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ROLE,","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"//                VALID_LEAVES, VALID_SALARY, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"boonhaii"},"content":"//                VALID_ROLE, VALID_LEAVES, VALID_SALARY, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"//                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"boonhaii"},"content":"//                        VALID_ROLE, VALID_LEAVES, VALID_SALARY, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_ROLE,","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"boonhaii"},"content":"//                VALID_LEAVES, VALID_SALARY, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"boonhaii"},"content":"//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_ROLE,","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"boonhaii"},"content":"//                        VALID_LEAVES, VALID_SALARY, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_ROLE,","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"boonhaii"},"content":"//                VALID_LEAVES, VALID_SALARY, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"boonhaii"},"content":"//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_ROLE,","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"boonhaii"},"content":"//                        VALID_LEAVES, VALID_SALARY, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":115,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":117,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":118,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_ROLE,","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"boonhaii"},"content":"//                VALID_LEAVES, VALID_SALARY, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":120,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":121,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":122,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_nullRole_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":126,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null,","lastModifiedDate":"2021-10-07"},{"lineNumber":127,"author":{"gitId":"boonhaii"},"content":"//                VALID_LEAVES, VALID_SALARY, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_invalidRole_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":134,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":135,"author":{"gitId":"boonhaii"},"content":"//                INVALID_ROLE, VALID_LEAVES, VALID_SALARY, VALID_HOURSWORKED,","lastModifiedDate":"2021-10-07"},{"lineNumber":136,"author":{"gitId":"boonhaii"},"content":"//                VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":137,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":138,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":139,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":140,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":141,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":142,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_nullLeaves_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":143,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":144,"author":{"gitId":"boonhaii"},"content":"//                VALID_ROLE, null, VALID_SALARY, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":145,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Leaves.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":146,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":147,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":148,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":149,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":150,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_negativeLeaves_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":151,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"//                VALID_ROLE, INVALID_LEAVES_NEGATIVE, VALID_SALARY, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":153,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Leaves.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":154,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":155,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":156,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":157,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":158,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_characterInLeaves_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":159,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":160,"author":{"gitId":"boonhaii"},"content":"//                VALID_ROLE, INVALID_LEAVES_CHAR, VALID_SALARY, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":161,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Leaves.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":162,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":163,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":164,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":165,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_nullSalary_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":167,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":168,"author":{"gitId":"boonhaii"},"content":"//                VALID_ROLE, VALID_LEAVES, null, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":169,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Salary.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":170,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":171,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":172,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":173,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":174,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_negativeSalary_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":175,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":176,"author":{"gitId":"boonhaii"},"content":"//                VALID_ROLE, VALID_LEAVES, INVALID_SALARY_NEGATIVE, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":177,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Salary.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":178,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":179,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":180,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":181,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":182,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_characterInSalary_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":183,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":184,"author":{"gitId":"boonhaii"},"content":"//                VALID_ROLE, VALID_LEAVES, INVALID_SALARY_CHAR, VALID_HOURSWORKED, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":185,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Salary.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":186,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":187,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":188,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":189,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":190,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_nullHoursWorked_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":191,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":192,"author":{"gitId":"boonhaii"},"content":"//                VALID_ROLE, VALID_LEAVES, VALID_SALARY, null, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":193,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, HoursWorked.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":194,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":195,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":196,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":197,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":198,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_negativeHoursWorked_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":199,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":200,"author":{"gitId":"boonhaii"},"content":"//                VALID_ROLE, VALID_LEAVES, VALID_SALARY, INVALID_HOURSWORKED_NEGATIVE, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":201,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, HoursWorked.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":202,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":203,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":204,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":205,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":206,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_characterInHoursWorked_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":207,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":208,"author":{"gitId":"boonhaii"},"content":"//                VALID_ROLE, VALID_LEAVES, VALID_SALARY, INVALID_HOURSWORKED_CHAR, VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":209,"author":{"gitId":"boonhaii"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, HoursWorked.class.getSimpleName());","lastModifiedDate":"2021-10-07"},{"lineNumber":210,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":211,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":212,"author":{"gitId":"boonhaii"},"content":"//","lastModifiedDate":"2021-10-07"},{"lineNumber":213,"author":{"gitId":"boonhaii"},"content":"//    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":214,"author":{"gitId":"boonhaii"},"content":"//    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":215,"author":{"gitId":"boonhaii"},"content":"//        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2021-10-07"},{"lineNumber":216,"author":{"gitId":"boonhaii"},"content":"//        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2021-10-07"},{"lineNumber":217,"author":{"gitId":"boonhaii"},"content":"//        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":218,"author":{"gitId":"boonhaii"},"content":"//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ROLE,","lastModifiedDate":"2021-10-07"},{"lineNumber":219,"author":{"gitId":"boonhaii"},"content":"//                        VALID_LEAVES, VALID_SALARY, VALID_HOURSWORKED, invalidTags);","lastModifiedDate":"2021-10-07"},{"lineNumber":220,"author":{"gitId":"boonhaii"},"content":"//        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":221,"author":{"gitId":"boonhaii"},"content":"//    }","lastModifiedDate":"2021-10-07"},{"lineNumber":222,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"boonhaii":197,"-":25}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.HOON;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.IDA;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"boonhaii":7,"-":103}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e master","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"danielsimre":3,"boonhaii":5,"-":40}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"         *//*","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"        }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"boonhaii":6,"-":62}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-12-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-12-23"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-12-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-12-23"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Salary;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"        descriptor.setRole(person.getRole());","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"1waykiat"},"content":"        descriptor.setLeaves(person.getLeaves());","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"        descriptor.setSalary(person.getSalary());","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"        descriptor.setHoursWorked(person.getHoursWorked());","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"1waykiat"},"content":"     * Sets the {@code Role} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"1waykiat"},"content":"    public EditPersonDescriptorBuilder withRole(String role) {","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"1waykiat"},"content":"        descriptor.setRole(new Role(role));","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"1waykiat"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"1waykiat"},"content":"     * Sets the {@code Leaves} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"1waykiat"},"content":"    public EditPersonDescriptorBuilder withLeaves(String leaves) {","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"1waykiat"},"content":"        descriptor.setLeaves(new Leaves(leaves));","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"1waykiat"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"1waykiat"},"content":"     * Sets the {@code Salary} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"1waykiat"},"content":"    public EditPersonDescriptorBuilder withSalary(String salary) {","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"1waykiat"},"content":"        descriptor.setSalary(new Salary(salary));","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"1waykiat"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"1waykiat"},"content":"     * Sets the {@code HoursWorked} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"1waykiat"},"content":"    public EditPersonDescriptorBuilder withHoursWorked(String hours) {","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"1waykiat"},"content":"        descriptor.setHoursWorked(new HoursWorked(hours));","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"1waykiat"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"-":87,"1waykiat":41}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Leaves;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Salary;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"    public static final String DEFAULT_ROLE \u003d \"HeRon Developer\";","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"    public static final String DEFAULT_LEAVES \u003d \"0\";","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"    public static final String DEFAULT_SALARY \u003d \"5000\";","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"    public static final String DEFAULT_HOURSWORKED \u003d \"70\";","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"    private Role role;","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"    private Leaves leaves;","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"    private Salary salary;","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"    private HoursWorked hoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"        role \u003d new Role(DEFAULT_ROLE);","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"        leaves \u003d new Leaves(DEFAULT_LEAVES);","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"        salary \u003d new Salary(DEFAULT_SALARY);","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"        hoursWorked \u003d new HoursWorked(DEFAULT_HOURSWORKED);","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"        role \u003d personToCopy.getRole();","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"        leaves \u003d personToCopy.getLeaves();","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"        salary \u003d personToCopy.getSalary();","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"boonhaii"},"content":"        hoursWorked \u003d personToCopy.getHoursWorked();","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":112,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":113,"author":{"gitId":"boonhaii"},"content":"     * Sets the {@code Role} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"boonhaii"},"content":"    public PersonBuilder withRole(String role) {","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"        this.role \u003d new Role(role);","lastModifiedDate":"2021-10-01"},{"lineNumber":117,"author":{"gitId":"boonhaii"},"content":"        return this;","lastModifiedDate":"2021-10-01"},{"lineNumber":118,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":120,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":121,"author":{"gitId":"boonhaii"},"content":"     * Sets the {@code Leaves} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-01"},{"lineNumber":122,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":123,"author":{"gitId":"boonhaii"},"content":"    public PersonBuilder withLeaves(String leaves) {","lastModifiedDate":"2021-10-01"},{"lineNumber":124,"author":{"gitId":"boonhaii"},"content":"        this.leaves \u003d new Leaves(leaves);","lastModifiedDate":"2021-10-01"},{"lineNumber":125,"author":{"gitId":"boonhaii"},"content":"        return this;","lastModifiedDate":"2021-10-01"},{"lineNumber":126,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":127,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":128,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":129,"author":{"gitId":"boonhaii"},"content":"     * Sets the {@code Salary} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-01"},{"lineNumber":130,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":131,"author":{"gitId":"boonhaii"},"content":"    public PersonBuilder withSalary(String salary) {","lastModifiedDate":"2021-10-01"},{"lineNumber":132,"author":{"gitId":"boonhaii"},"content":"        this.salary \u003d new Salary(salary);","lastModifiedDate":"2021-10-01"},{"lineNumber":133,"author":{"gitId":"boonhaii"},"content":"        return this;","lastModifiedDate":"2021-10-01"},{"lineNumber":134,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":135,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":136,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":137,"author":{"gitId":"boonhaii"},"content":"     * Sets the {@code HoursWorked} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-01"},{"lineNumber":138,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"boonhaii"},"content":"    public PersonBuilder withHoursWorked(String hoursWorked) {","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"boonhaii"},"content":"        this.hoursWorked \u003d new HoursWorked(hoursWorked);","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"boonhaii"},"content":"        return this;","lastModifiedDate":"2021-10-01"},{"lineNumber":142,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":145,"author":{"gitId":"boonhaii"},"content":"        return new Person(name, phone, email, address, role, leaves, salary, hoursWorked, tags);","lastModifiedDate":"2021-10-01"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"boonhaii":53,"-":95}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"            .withPhone(\"94351253\").withRole(\"Quality Assurance\").withLeaves(\"14\").withSalary(\"6000\")","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"            .withHoursWorked(\"50\").withTags(\"friends\").build();","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"            .withRole(\"Software Developer\").withLeaves(\"20\").withSalary(\"7000\").withHoursWorked(\"60\")","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withRole(\"Accountant\").withLeaves(\"11\")","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"            .withSalary(\"5555\").withHoursWorked(\"67\").build();","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withRole(\"Legal Assistant\")","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"            .withLeaves(\"20\").withSalary(\"3500\").withHoursWorked(\"60\").withTags(\"friends\").build();","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withRole(\"UI UX Designer\")","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"            .withLeaves(\"20\").withSalary(\"4000\").withHoursWorked(\"50\").build();","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withRole(\"HR Manager\")","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"            .withLeaves(\"15\").withSalary(\"4000\").withHoursWorked(\"40\").build();","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"            .withEmail(\"anna@example.com\").withRole(\"Team Manager\").withLeaves(\"8\").withSalary(\"6500\")","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"            .withHoursWorked(\"55\").withAddress(\"4th street\").build();","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withRole(\"Advertising Team Leader\")","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"            .withLeaves(\"20\").withSalary(\"7000\").withHoursWorked(\"20\").build();","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withRole(\"IT Assistant\")","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"            .withLeaves(\"20\").withSalary(\"4000\").withHoursWorked(\"60\").build();","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"szelongq":1,"boonhaii":17,"-":65}}]
