[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103T-T09-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103T-T09-4/tp/actions)","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2122S1-CS2103T-T09-4/tp/branch/master/graph/badge.svg?token\u003d8G5QJLU0E0)](https://codecov.io/gh/AY2122S1-CS2103T-T09-4/tp)","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"* This is **a project by Software Engineering (SE) students**.\u003cbr\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"* The project is a software project for a desktop application (called _FAST_) used for managing contact details.","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"  * It is **written in OOP fashion**.","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  * It comes with a **reasonable level of user and developer documentation**.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"  * It has added features that are useful for financial advisors.","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"* It is named `Financial Advisor Smart Tracker` (`FAST` for short) because it is intended to be an address book app specifically for financial advisors to use.","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"* For the detailed documentation of this project, see the **[FAST Product Website](https://ay2122s1-cs2103t-t09-4.github.io/tp/)**.","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"squeakysquak":7,"-":5,"Cyn7hius":1}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"Cyn7hius"},"content":"mainClassName \u003d \u0027seedu.fast.Main\u0027","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2018-04-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"Th-429B"},"content":"run {","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"Th-429B"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":71,"Cyn7hius":1,"Th-429B":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"### Khor Ethan","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"\u003cimg src\u003d\"images/squeakysquak.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"[[github](https://github.com/squeakysquak)]","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"[[portfolio](team/ethan.md)]","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"* Role: Developer","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"* Responsibilities: Scheduling \u0026 Tracking","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"Th-429B"},"content":"### Lau Teng Hon","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"Th-429B"},"content":"\u003cimg src\u003d\"images/th-429b.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"Th-429B"},"content":"[[github](https://github.com/Th-429B)]","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"Th-429B"},"content":"[[portfolio](team/tenghon.md)]","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"* Role: Team Lead","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"* Responsibilities: Integration (Tentative)","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"trash-bin99"},"content":"### Toh Wang Bin","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"trash-bin99"},"content":"\u003cimg src\u003d\"images/trash-bin99.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"trash-bin99"},"content":"[[github](https://github.com/trash-bin99)]","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"trash-bin99"},"content":"[[portfolio](team/wangbin.md)]","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"trash-bin99"},"content":"* Responsibilities: Testing","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"### Lim Peiyuan","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"\u003cimg src\u003d\"images/py0000.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"[[github](https://github.com/Py0000)]","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"[[portfolio](team/peiyuan.md)]","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"* Responsibilities: Code Quality","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"Cyn7hius"},"content":"### Calvin Tan","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"Cyn7hius"},"content":"\u003cimg src\u003d\"images/cyn7hius.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"Cyn7hius"},"content":"[[github](https://github.com/Cyn7hius)]","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"Cyn7hius"},"content":"[[portfolio](team/calvin.md)]","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"Cyn7hius"},"content":"* Responsibilities: Documentation","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"squeakysquak":6,"trash-bin99":5,"Py0000":5,"-":33,"Th-429B":5,"Cyn7hius":5}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"## **Introduction**","lastModifiedDate":"2021-11-01"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"Financial Advisor Smart Tracker (FAST), is a free and open-source desktop app for Financial Advisors to manage their contacts.","lastModifiedDate":"2021-11-01"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"FAST is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI).","lastModifiedDate":"2021-11-01"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"This document is a Developer Guide written to help developers who wish to understand more about the design and implementation of FAST. ","lastModifiedDate":"2021-11-01"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"It explains the internal structure of FAST and how the different components in FAST work together to execute the different commands.","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"We hope that this Developer Guide will help any developers who wish to contribute to FAST to have a better understanding of FAST.","lastModifiedDate":"2021-11-01"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-11-01"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"In this section, you will learn more about the design and structure of **FAST**.","lastModifiedDate":"2021-11-01"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2122S1-CS2103T-T09-4/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-11-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e *Figure 1: Architecture Diagram of FAST*","lastModifiedDate":"2021-11-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"**FAST** is developed and build upon **AddressBook3**. We have decided to keep the 6 components used in **AddressBook3**","lastModifiedDate":"2021-11-01"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"but modify and enhance each component to fit the needs of **FAST**.","lastModifiedDate":"2021-11-01"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"The **Architecture diagram** given above explains the high-level design of FAST.","lastModifiedDate":"2021-11-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"There are the 6 major components of **FAST**:","lastModifiedDate":"2021-11-01"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"1) **`Main`** has two classes called [`Main`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/Main.java) and [`MainApp`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/MainApp.java). It is responsible for,","lastModifiedDate":"2021-11-01"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   * At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"   * At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"2) [**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2021-11-01"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"3) [**`UI`**](#ui-component): The UI of the **FAST**.","lastModifiedDate":"2021-11-01"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"4) [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2021-11-01"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"5) [**`Model`**](#model-component): Holds the data of the **FAST** in memory.","lastModifiedDate":"2021-11-01"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"6) [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2021-11-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"Each of the four main components(*labelled 3-6*) (also shown in the diagram above),","lastModifiedDate":"2021-11-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-11-01"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-11-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality ","lastModifiedDate":"2021-11-01"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"using the `LogicManager.java` class which follows the `Logic` interface. ","lastModifiedDate":"2021-11-01"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"Other components interact with a given component through its interface rather than the concrete class ","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"(reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-11-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e *Figure 2: Components Managers of FAST*","lastModifiedDate":"2021-11-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e *Figure 3: Architecture Sequence Diagram of FAST*","lastModifiedDate":"2021-11-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"This section will explain the structure of the UI component.","lastModifiedDate":"2021-11-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"**API**: [`Ui.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/ui/Ui.java)","lastModifiedDate":"2021-11-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png) ","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e *Figure 4: UI Class Diagram of FAST*","lastModifiedDate":"2021-11-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"Our `UI` component uses the JavaFx UI framework. ","lastModifiedDate":"2021-11-01"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"The layout of these UI parts are defined in matching `.fxml` files that are in the [`src/main/resources/view`](https://github.com/AY2122S1-CS2103T-T09-4/tp/tree/master/src/main/resources/view) folder. ","lastModifiedDate":"2021-11-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"The UI consists of a `MainWindow` that is made up of parts such as:","lastModifiedDate":"2021-11-01"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"* `CommandBox`","lastModifiedDate":"2021-11-01"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"* `ResultDisplay`","lastModifiedDate":"2021-11-01"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"* `PersonListPanel`","lastModifiedDate":"2021-11-01"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"* `StatusBarFooter`","lastModifiedDate":"2021-11-01"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"* `HelpWindow`","lastModifiedDate":"2021-11-01"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"* `StatsWindow`","lastModifiedDate":"2021-11-01"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-11-01"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"The `UI` component,","lastModifiedDate":"2021-11-01"},{"lineNumber":109,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"The `PersonCard` class will create new `ItemComponent` and `TagComponent` that will help to add and load the icons used in FAST.","lastModifiedDate":"2021-11-01"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"The `StatsWindow` will display a *pie chart* and a *brief analysis message*. ","lastModifiedDate":"2021-11-01"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"The data used in the *piechart* are obtained from the \u0027Person\u0027 object residing in the `Model` component, which is obtained from `StatsWindowData`. ","lastModifiedDate":"2021-11-01"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"This section will explain the structure of the Logic component.","lastModifiedDate":"2021-11-01"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"**API**: [`Logic.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/logic/Logic.java)","lastModifiedDate":"2021-11-01"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e ","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e *Figure 5: Logic Class Diagram of FAST*","lastModifiedDate":"2021-11-01"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"Here are the other classes in `Logic` (omitted from *Figure 5* above):","lastModifiedDate":"2021-11-01"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e \u003cbr\u003e *Figure 6: Parser Class Diagram of FAST*","lastModifiedDate":"2021-11-01"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"1. When `Logic` is called upon to execute a command, it uses the `FastParser` class to parse the user input.","lastModifiedDate":"2021-11-01"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"2. The `FastParser` will create a specific `XYZCommandParser` object to parse the arguments for the `XYZ` command.","lastModifiedDate":"2021-11-01"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"3. The `XYZCommandParser` will create the `XYZCommand` object.","lastModifiedDate":"2021-11-01"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"4. This results in a `Command` object  which is executed by the `LogicManager`.","lastModifiedDate":"2021-11-01"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"5. The `Command` object can communicate with the `Model` and update `Storage` when it is executed (e.g. to add a client).","lastModifiedDate":"2021-11-01"},{"lineNumber":137,"author":{"gitId":"Py0000"},"content":"6. The result of the command execution is encapsulated as a `CommandResult` object which is returned from `LogicManager`.","lastModifiedDate":"2021-11-01"},{"lineNumber":138,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"How the parsing works:","lastModifiedDate":"2021-11-01"},{"lineNumber":140,"author":{"gitId":"Py0000"},"content":"* When called upon to parse a user command, the `FastParser` class creates an `XYZCommandParser` which uses the other classes shown above to parse the user command and create a `XYZCommand` object which the `FastParser` returns back as a `Command` object.","lastModifiedDate":"2021-11-01"},{"lineNumber":141,"author":{"gitId":"Py0000"},"content":"* All `XYZCommandParser` classes inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-11-01"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e *Figure 7: Logic Sequence Diagram of FAST (Delete Command)*","lastModifiedDate":"2021-11-01"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"This section will explain the structure of the Model component.","lastModifiedDate":"2021-11-01"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"Py0000"},"content":"**API**: [`Model.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/model/Model.java)","lastModifiedDate":"2021-11-01"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"Py0000"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"700\" /\u003e ","lastModifiedDate":"2021-11-01"},{"lineNumber":157,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e *Figure 8: Model Class Diagram of FAST*","lastModifiedDate":"2021-11-01"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"Py0000"},"content":"* stores Fast data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-11-01"},{"lineNumber":162,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"Py0000"},"content":"This section will explain the structure of the Storage component.","lastModifiedDate":"2021-11-01"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"Py0000"},"content":"**API**: [`Storage.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/storage/Storage.java)","lastModifiedDate":"2021-11-01"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e *Figure 9: Storage Class Diagram of FAST*","lastModifiedDate":"2021-11-01"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"Py0000"},"content":"* can save both Fast data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-11-01"},{"lineNumber":177,"author":{"gitId":"Py0000"},"content":"* inherits from both `FastStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-11-01"},{"lineNumber":178,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"Py0000"},"content":"Classes used by multiple components are in the `seedu.fast.commons` package.","lastModifiedDate":"2021-11-01"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":192,"author":{"gitId":"Py0000"},"content":"### Appointment feature","lastModifiedDate":"2021-10-19"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":194,"author":{"gitId":"Py0000"},"content":"#### Current Implementation","lastModifiedDate":"2021-10-19"},{"lineNumber":195,"author":{"gitId":"Py0000"},"content":"Currently, the appointment feature supports 5 different type of command:","lastModifiedDate":"2021-11-02"},{"lineNumber":196,"author":{"gitId":"Py0000"},"content":"1. `add appointment`","lastModifiedDate":"2021-10-19"},{"lineNumber":197,"author":{"gitId":"Py0000"},"content":"2. `edit appointment` ","lastModifiedDate":"2021-10-19"},{"lineNumber":198,"author":{"gitId":"Py0000"},"content":"3. `delete appointment` ","lastModifiedDate":"2021-10-19"},{"lineNumber":199,"author":{"gitId":"Py0000"},"content":"4. `mark appointment` ","lastModifiedDate":"2021-11-02"},{"lineNumber":200,"author":{"gitId":"Py0000"},"content":"5. `unmark appointment`","lastModifiedDate":"2021-11-02"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":202,"author":{"gitId":"Py0000"},"content":"This 5 features will allow users to be able to manage the appointments they have with their clients.","lastModifiedDate":"2021-11-02"},{"lineNumber":203,"author":{"gitId":"Py0000"},"content":"All 5 features extends from the `abstract` `Command` class.  ","lastModifiedDate":"2021-11-02"},{"lineNumber":204,"author":{"gitId":"Py0000"},"content":"These 5 features help clients to manage their appointment by manipulating the `Appointment` and the `AppointmentCount` class.","lastModifiedDate":"2021-11-02"},{"lineNumber":205,"author":{"gitId":"Py0000"},"content":"`add appointment`, `edit appointment` and `delete appointment` works similar to `add`, `edit` and `delete` feature.","lastModifiedDate":"2021-11-02"},{"lineNumber":206,"author":{"gitId":"Py0000"},"content":"The table below summarises the purpose of the 5 different appointment commands.","lastModifiedDate":"2021-11-02"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":208,"author":{"gitId":"Py0000"},"content":"| Command      | Command Word | Purpose |","lastModifiedDate":"2021-11-02"},{"lineNumber":209,"author":{"gitId":"Py0000"},"content":"| ----------- | ----------- | ----- |","lastModifiedDate":"2021-11-02"},{"lineNumber":210,"author":{"gitId":"Py0000"},"content":"| `add appointment` | `aa` | Adds a new appointment. |","lastModifiedDate":"2021-11-02"},{"lineNumber":211,"author":{"gitId":"Py0000"},"content":"| `edit appointment` | `ea` | Edits an existing appointment. |","lastModifiedDate":"2021-11-02"},{"lineNumber":212,"author":{"gitId":"Py0000"},"content":"| `delete appointment` | `da` | Delete an existing appointment.|","lastModifiedDate":"2021-11-02"},{"lineNumber":213,"author":{"gitId":"Py0000"},"content":"| `mark appointment` | `ma` | Mark an appointment as done.|","lastModifiedDate":"2021-11-02"},{"lineNumber":214,"author":{"gitId":"Py0000"},"content":"| `unmark appointment` | `ua` | Undo the marking of an appointment as done.|","lastModifiedDate":"2021-11-02"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":216,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":218,"author":{"gitId":"Py0000"},"content":"**Appointment**","lastModifiedDate":"2021-11-02"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":220,"author":{"gitId":"Py0000"},"content":"Managed by: [`Appointment.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/model/person/Appointment.java)","lastModifiedDate":"2021-11-02"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":222,"author":{"gitId":"Py0000"},"content":"This class contains the details of the appointment with a specific client.","lastModifiedDate":"2021-11-02"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":224,"author":{"gitId":"Py0000"},"content":"Data stored in an `Appointment` object:","lastModifiedDate":"2021-11-02"},{"lineNumber":225,"author":{"gitId":"Py0000"},"content":"1) The `date` of an appointment in `dd-MMM-yyyy` format as a String.","lastModifiedDate":"2021-11-02"},{"lineNumber":226,"author":{"gitId":"Py0000"},"content":"2) The `time` of an appointment in `HHmm` format as a String.","lastModifiedDate":"2021-11-02"},{"lineNumber":227,"author":{"gitId":"Py0000"},"content":"3) The `venue` of an appointment has to be within 20 characters as a String.","lastModifiedDate":"2021-11-02"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":229,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":231,"author":{"gitId":"Py0000"},"content":"**Appointment Count**","lastModifiedDate":"2021-11-02"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":233,"author":{"gitId":"Py0000"},"content":"Managed by: [`AppointmentCount.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/model/person/AppointmentCount.java)","lastModifiedDate":"2021-11-02"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":235,"author":{"gitId":"Py0000"},"content":"This class contains the number of completed / marked appointment with a specific client.","lastModifiedDate":"2021-11-02"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":237,"author":{"gitId":"Py0000"},"content":"Data stored in an `AppointmentCount` object:","lastModifiedDate":"2021-11-02"},{"lineNumber":238,"author":{"gitId":"Py0000"},"content":"1) `count` (number) of completed appointment as an int.","lastModifiedDate":"2021-11-02"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":240,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":242,"author":{"gitId":"Py0000"},"content":"**Add Appointment**","lastModifiedDate":"2021-11-02"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":244,"author":{"gitId":"Py0000"},"content":"Managed by: [`AppointmentCommand.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/logic/commands/AppointmentCommand.java) ","lastModifiedDate":"2021-11-02"},{"lineNumber":245,"author":{"gitId":"Py0000"},"content":"and [`AppointmentCommandParser.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/logic/parser/AppointmentCommandParser.java)","lastModifiedDate":"2021-11-02"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":247,"author":{"gitId":"Py0000"},"content":"`Add apppointment` requires the user to input 4 fields (`index`, `date`, `time` and `venue`), ","lastModifiedDate":"2021-11-02"},{"lineNumber":248,"author":{"gitId":"Py0000"},"content":"of which only 2 (`index` and `date`) are compulsory for FAST to be able to execute the command.","lastModifiedDate":"2021-11-02"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":250,"author":{"gitId":"Py0000"},"content":"`Add appointment` requires the `date` to be of the format `yyyy-mm-dd` and `time` to be of the format `HH:mm`.","lastModifiedDate":"2021-11-02"},{"lineNumber":251,"author":{"gitId":"Py0000"},"content":"Additionally, the `date` entered by the user must be a date in the future (i.e. cannot be a date in the past).","lastModifiedDate":"2021-11-02"},{"lineNumber":252,"author":{"gitId":"Py0000"},"content":"If the `date` and/or `time` input does not follow the required format, Fast will display an error message to the user.","lastModifiedDate":"2021-11-02"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":254,"author":{"gitId":"Py0000"},"content":"`AppointmentCommandParser::parse()` makes use of `ParserUtil::parseDateString()` and `ParserUtil::parseTimeString()` to check if the input `date` and `time` follows the format.","lastModifiedDate":"2021-11-02"},{"lineNumber":255,"author":{"gitId":"Py0000"},"content":"If the input `date` and `time` passes the check, `ParserUtil::parseDateString()` and `ParserUtil::parseTimeString()` will then format the `date` and `time` to be `dd-MMM-yyyy` and `HHmm` respectively.","lastModifiedDate":"2021-11-02"},{"lineNumber":256,"author":{"gitId":"Py0000"},"content":"The new `Appointment` object created by `AppointmentCommandParser::parse()` will receive the formatted `date` and `time` as its parameter.","lastModifiedDate":"2021-11-02"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":258,"author":{"gitId":"Py0000"},"content":"`Add appointment` prevents the user from adding another appointment if an appointment already exist for the specified user.","lastModifiedDate":"2021-11-02"},{"lineNumber":259,"author":{"gitId":"Py0000"},"content":"`AppointmentCommand::execute()` checks if the current `Appointment` is an `empty` appointment and only allows the `AppointmentCommand` to be executed if it is `true`.","lastModifiedDate":"2021-11-02"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":261,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":263,"author":{"gitId":"Py0000"},"content":"**Edit Appointment**","lastModifiedDate":"2021-11-02"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":265,"author":{"gitId":"Py0000"},"content":"Managed by: [`EditAppointmentCommand.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/logic/commands/EditAppointmentCommand.java)","lastModifiedDate":"2021-11-02"},{"lineNumber":266,"author":{"gitId":"Py0000"},"content":"and [`EditAppointmentCommandParser.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/logic/parser/EditAppointmentCommandParser.java)","lastModifiedDate":"2021-11-02"},{"lineNumber":267,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":268,"author":{"gitId":"Py0000"},"content":"`Edit Appointment` function similar to `Add Appointment` except that `date` field is no longer compulsory.","lastModifiedDate":"2021-11-02"},{"lineNumber":269,"author":{"gitId":"Py0000"},"content":"The `EditAppointmentDescriptor` is included to help to duplicate and transfer over existing data that are not edited by the `ea` command.","lastModifiedDate":"2021-11-02"},{"lineNumber":270,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":271,"author":{"gitId":"Py0000"},"content":"`EditAppointmentCommandParser::parse()` makes use of `EditAppointmentDescriptor::isAnyFieldEmpty()` to ensure that at least one of the 3 fields (excluding `index`) is entered.","lastModifiedDate":"2021-11-02"},{"lineNumber":272,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":273,"author":{"gitId":"Py0000"},"content":"`Edit Appointment` prevents user from editing an appointment if an appointment does not exist yet. It uses the same mechanism as `add appointment` to do the check except that this time, ","lastModifiedDate":"2021-11-02"},{"lineNumber":274,"author":{"gitId":"Py0000"},"content":"the `EditAppointmentCommand` will execute if the current `Appointment` does not equal to an `empty` appointment.","lastModifiedDate":"2021-11-02"},{"lineNumber":275,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":276,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":277,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":278,"author":{"gitId":"Py0000"},"content":"**Delete Appointment**","lastModifiedDate":"2021-11-02"},{"lineNumber":279,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":280,"author":{"gitId":"Py0000"},"content":"Managed by: [`DeleteAppointmentCommand.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/logic/commands/DeleteAppointmentCommand.java)","lastModifiedDate":"2021-11-02"},{"lineNumber":281,"author":{"gitId":"Py0000"},"content":"and [`DeleteAppointmentCommandParser.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/logic/parser/DeleteAppointmentCommandParser.java)","lastModifiedDate":"2021-11-02"},{"lineNumber":282,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":283,"author":{"gitId":"Py0000"},"content":"`Delete appointment` only requires the user to specify the `index` parameter. ","lastModifiedDate":"2021-11-02"},{"lineNumber":284,"author":{"gitId":"Py0000"},"content":"It deletes an appointment by creating a new `Appointment` object with empty `date`, `time` and `venue` to replace the current `Appointment` object.","lastModifiedDate":"2021-11-02"},{"lineNumber":285,"author":{"gitId":"Py0000"},"content":"The new `Appointment` object is created in `DeleteAppointmentCommandParser::parse()`.","lastModifiedDate":"2021-11-02"},{"lineNumber":286,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":287,"author":{"gitId":"Py0000"},"content":"`Delete Appointment` prevents user from deleting an appointment if an appointment does not exist yet. It uses the same mechanism as `edit appointment` to do the check.","lastModifiedDate":"2021-11-02"},{"lineNumber":288,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":289,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":290,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":291,"author":{"gitId":"Py0000"},"content":"**Mark Appointment**","lastModifiedDate":"2021-11-02"},{"lineNumber":292,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":293,"author":{"gitId":"Py0000"},"content":"Managed by: [`MarkAppointmentCommand.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/logic/commands/MarkAppointmentCommand.java)","lastModifiedDate":"2021-11-02"},{"lineNumber":294,"author":{"gitId":"Py0000"},"content":"and [`MarkAppointmentCommandParser.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/logic/parser/MarkAppointmentCommandParser.java)","lastModifiedDate":"2021-11-02"},{"lineNumber":295,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":296,"author":{"gitId":"Py0000"},"content":"Similar to `Delete Appointment`, `Mark Appointment` only requires the user to specify the `index` parameter. ","lastModifiedDate":"2021-11-02"},{"lineNumber":297,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":298,"author":{"gitId":"Py0000"},"content":"`Mark Appointment` prevents user from marking an appointment if an appointment does not exist yet. It uses the same mechanism as `edit appointment` to do the check.","lastModifiedDate":"2021-11-02"},{"lineNumber":299,"author":{"gitId":"Py0000"},"content":"If it passes the check, `MarkAppointment::execute()` will make use of `AppointmentCount::incrementAppointmentCount()` to increase the count by 1.","lastModifiedDate":"2021-11-02"},{"lineNumber":300,"author":{"gitId":"Py0000"},"content":"The existing `Appointment` object will be replaced by a new `Appointment` object with an empty `date`, `time` and `venue`.","lastModifiedDate":"2021-11-02"},{"lineNumber":301,"author":{"gitId":"Py0000"},"content":"The new `Appointment` object is created in `MarkAppointmentCommandParser::parse()`. ","lastModifiedDate":"2021-11-02"},{"lineNumber":302,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":303,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":304,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":305,"author":{"gitId":"Py0000"},"content":"**Unmark Appointment**","lastModifiedDate":"2021-11-02"},{"lineNumber":306,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":307,"author":{"gitId":"Py0000"},"content":"Managed by: [`UnmarkAppointmentCommand.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/logic/commands/UnmarkAppointmentCommand.java)","lastModifiedDate":"2021-11-02"},{"lineNumber":308,"author":{"gitId":"Py0000"},"content":"and [`UnmarkAppointmentCommandParser.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/logic/parser/UnmarkAppointmentCommandParser.java)","lastModifiedDate":"2021-11-02"},{"lineNumber":309,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":310,"author":{"gitId":"Py0000"},"content":"Similar to `Delete Appointment`, `Unmark Appointment` only requires the user to specify the `index` parameter.","lastModifiedDate":"2021-11-02"},{"lineNumber":311,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":312,"author":{"gitId":"Py0000"},"content":"`Unmark Appointment` prevents user from marking an appointment if an appointment already exist. It uses the same mechanism as `add appointment` to do the check.","lastModifiedDate":"2021-11-02"},{"lineNumber":313,"author":{"gitId":"Py0000"},"content":"If it passes the check, `UnmarkAppointment::execute()` will make use of `AppointmentCount::decrementAppointmentCount()` to decrease the count by 1.","lastModifiedDate":"2021-11-02"},{"lineNumber":314,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":315,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":316,"author":{"gitId":"Py0000"},"content":"#### Usage Scenario","lastModifiedDate":"2021-11-02"},{"lineNumber":317,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":318,"author":{"gitId":"Py0000"},"content":"**1**) The user launches the application for the first time and wants to add an appointment to a client in FAST.","lastModifiedDate":"2021-11-02"},{"lineNumber":319,"author":{"gitId":"Py0000"},"content":"For example, the user input this command: `aa 1 d/2022-10-11 t/10:00 v/NUS`","lastModifiedDate":"2021-11-02"},{"lineNumber":320,"author":{"gitId":"Py0000"},"content":"The initial state of the `Appointment` object present in the specified client `Person` object before the command is executed is shown below:","lastModifiedDate":"2021-11-02"},{"lineNumber":321,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":322,"author":{"gitId":"Py0000"},"content":"![Appointment_Initial_State](images/AppointmentDefaultState.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":323,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":324,"author":{"gitId":"Py0000"},"content":"**2**) `LogicManager::execute()` will be called which will in turn calls `FastParser::parseCommand()` to parse the given input.","lastModifiedDate":"2021-11-02"},{"lineNumber":325,"author":{"gitId":"Py0000"},"content":"`FastParser::parseCommand()` will determine that it is an add appointment command which will then call `AppointmentCommandParser::parse()`.","lastModifiedDate":"2021-11-02"},{"lineNumber":326,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":327,"author":{"gitId":"Py0000"},"content":"**3**) Inside `AppointmentCommandParser::parse()`:","lastModifiedDate":"2021-11-02"},{"lineNumber":328,"author":{"gitId":"Py0000"},"content":"* `ArgumentTokenizer::tokenize()` will be called to recognise the required prefixes for appointment feature.","lastModifiedDate":"2021-11-02"},{"lineNumber":329,"author":{"gitId":"Py0000"},"content":"* `ParserUtil::parseIndex()`, `ParserUtil::parseDateString()`, `ParserUtil::parseTimeString()` and","lastModifiedDate":"2021-11-02"},{"lineNumber":330,"author":{"gitId":"Py0000"},"content":"   `AddAppointmentCommandParser::checkVenue()` will be called to check and parse the input if it passes the check (for requirement). ","lastModifiedDate":"2021-11-02"},{"lineNumber":331,"author":{"gitId":"Py0000"},"content":"* A new `Appointment` object with the input `date`, `time` and `venue` will be created as shown in the diagram below.","lastModifiedDate":"2021-11-02"},{"lineNumber":332,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":333,"author":{"gitId":"Py0000"},"content":"    ![Appointment_Added_State](images/AppointmentAddedState.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":334,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":335,"author":{"gitId":"Py0000"},"content":"**4**) `AppointmentCommandParser::parse()` will return a new `AppointmentCommand` object that contains the index of the","lastModifiedDate":"2021-11-02"},{"lineNumber":336,"author":{"gitId":"Py0000"},"content":"specified client and the new `Appointment` object.","lastModifiedDate":"2021-11-02"},{"lineNumber":337,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":338,"author":{"gitId":"Py0000"},"content":"**5**)`LogicManager` then calls the method `AppointmentCommand::execute()`, which will attempt to add the new `Appointment`","lastModifiedDate":"2021-11-02"},{"lineNumber":339,"author":{"gitId":"Py0000"},"content":"after verifying that no appointments had been created for the specified contact yet.","lastModifiedDate":"2021-10-19"},{"lineNumber":340,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":341,"author":{"gitId":"Py0000"},"content":"**6**) Inside `AppointmentCommand::execute()`:","lastModifiedDate":"2021-11-02"},{"lineNumber":342,"author":{"gitId":"Py0000"},"content":"* `Model::setPerson` will be called to update the contact details in the model.","lastModifiedDate":"2021-11-02"},{"lineNumber":343,"author":{"gitId":"Py0000"},"content":"* `AppointmentCommand::generateSuccessMessage` will be called to generate the message to be displayed. ","lastModifiedDate":"2021-11-02"},{"lineNumber":344,"author":{"gitId":"Py0000"},"content":"* Message and changes will be reflected afterwards.","lastModifiedDate":"2021-11-02"},{"lineNumber":345,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":346,"author":{"gitId":"Py0000"},"content":"The sequence diagram below illustrates step 2 to step 6.","lastModifiedDate":"2021-11-02"},{"lineNumber":347,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":348,"author":{"gitId":"Py0000"},"content":"![Appointment_Sequence_Diagram](images/AppointmentSequenceDiagram.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":349,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":350,"author":{"gitId":"Py0000"},"content":"**7**) Suppose that the user makes a mistake in the `date` of the appointment and he wants to change it.","lastModifiedDate":"2021-11-02"},{"lineNumber":351,"author":{"gitId":"Py0000"},"content":"Example: `ea 1 d/2022-05-15`","lastModifiedDate":"2021-11-02"},{"lineNumber":352,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":353,"author":{"gitId":"Py0000"},"content":"**8**) Similar course of actions mentioned to step 2 to step 6 will occur except that this time it involves the `EditAppointmentCommand` class and `EditAppointmentCommandParser` class instead.","lastModifiedDate":"2021-11-02"},{"lineNumber":354,"author":{"gitId":"Py0000"},"content":"The diagram below shows the updated object diagram after the `ea` command is executed.","lastModifiedDate":"2021-11-02"},{"lineNumber":355,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":356,"author":{"gitId":"Py0000"},"content":"![Appointment_Added_State_2](images/AppointmentAddedState2.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":357,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":358,"author":{"gitId":"Py0000"},"content":"**9a**) Suppose that the user cancels the appointment and wants to delete it using the command `da 1`.","lastModifiedDate":"2021-11-02"},{"lineNumber":359,"author":{"gitId":"Py0000"},"content":"Similar course of actions mentioned to step 2 to step 6 will occur except that this time it involves the `DeleteAppointmentCommand` class and `DeleteAppointmentCommandParser` class instead.","lastModifiedDate":"2021-11-02"},{"lineNumber":360,"author":{"gitId":"Py0000"},"content":"The update object diagram will be reverted back to the initial state (as shown in step 3).","lastModifiedDate":"2021-11-02"},{"lineNumber":361,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":362,"author":{"gitId":"Py0000"},"content":"**9b**) Suppose that the user did not delete the appointment. Instead he wants to mark the appointment using the command `ma 1`.","lastModifiedDate":"2021-11-02"},{"lineNumber":363,"author":{"gitId":"Py0000"},"content":"Similar course of actions mentioned to step 2 to step 6 will occur except that this time it involves the `MarkAppointmentCommand` class and `MarkAppointmentCommandParser` class instead.","lastModifiedDate":"2021-11-02"},{"lineNumber":364,"author":{"gitId":"Py0000"},"content":"The diagram below shows the updated object diagram.","lastModifiedDate":"2021-11-02"},{"lineNumber":365,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":366,"author":{"gitId":"Py0000"},"content":"![Appointment_Added_State_3](images/AppointmentAddedState3.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":367,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":368,"author":{"gitId":"Py0000"},"content":"**10**) Finally, suppose that the user mark the appointment (in step 9b) by accident and wants to unmark it using `ua 1`.","lastModifiedDate":"2021-11-02"},{"lineNumber":369,"author":{"gitId":"Py0000"},"content":"Similar course of actions mentioned to step 2 to step 6 will occur except that this time it involves the `UnmarkAppointmentCommand` class and `UnmarkAppointmentCommandParser` class instead.","lastModifiedDate":"2021-11-02"},{"lineNumber":370,"author":{"gitId":"Py0000"},"content":"The update object diagram will reflect the changes in the `AppointmentCount` object (decrementing count by 1), and in this case it will be similar to the object diagram shown in step 3 (since the count is 1 as shown in the diagram in step 9b).","lastModifiedDate":"2021-11-02"},{"lineNumber":371,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":372,"author":{"gitId":"Py0000"},"content":"Given below is Activity Diagram for FAST Appointment procedure. It includes scenarios that are not mentioned in step 1 to step 10 above.","lastModifiedDate":"2021-11-02"},{"lineNumber":373,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":374,"author":{"gitId":"Py0000"},"content":"![Appointment_Activity_Diagram](images/AppointmentActivityDiagram.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":375,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":376,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e ","lastModifiedDate":"2021-11-02"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":378,"author":{"gitId":"Py0000"},"content":"#### Design Considerations","lastModifiedDate":"2021-10-19"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":380,"author":{"gitId":"Py0000"},"content":"* **Alternative 1 (current choice):** Divide the appointment features into 5 sub-features.","lastModifiedDate":"2021-11-02"},{"lineNumber":381,"author":{"gitId":"Py0000"},"content":"    * Pros:","lastModifiedDate":"2021-10-19"},{"lineNumber":382,"author":{"gitId":"Py0000"},"content":"        1. Isolation of a single sub-feature to a specific command: more intuitive to use.","lastModifiedDate":"2021-10-19"},{"lineNumber":383,"author":{"gitId":"Py0000"},"content":"        2. Reduces Coupling. One Appointment Command Class handles one type of operation.","lastModifiedDate":"2021-11-02"},{"lineNumber":384,"author":{"gitId":"Py0000"},"content":"        3. Improvement for the command syntax. Less prefix required.","lastModifiedDate":"2021-11-02"},{"lineNumber":385,"author":{"gitId":"Py0000"},"content":"        4. Improvement over `edit appointment` command: retains data fields not directly affected by the command.","lastModifiedDate":"2021-11-02"},{"lineNumber":386,"author":{"gitId":"Py0000"},"content":"    * Cons:","lastModifiedDate":"2021-10-19"},{"lineNumber":387,"author":{"gitId":"Py0000"},"content":"        1. More classes added, resulting in more lines of codes in the program.","lastModifiedDate":"2021-10-19"},{"lineNumber":388,"author":{"gitId":"Py0000"},"content":"        2. More checks and testcases needed.","lastModifiedDate":"2021-10-19"},{"lineNumber":389,"author":{"gitId":"Py0000"},"content":"        3. May have some very similar codes.","lastModifiedDate":"2021-11-02"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":391,"author":{"gitId":"Py0000"},"content":"* **Alternative 2:** Combine all 5 sub-features into one appointment command.","lastModifiedDate":"2021-11-02"},{"lineNumber":392,"author":{"gitId":"Py0000"},"content":"    * Pros:","lastModifiedDate":"2021-10-19"},{"lineNumber":393,"author":{"gitId":"Py0000"},"content":"        1. Reduce the number of commands in the application: less to manage, easier to remember.","lastModifiedDate":"2021-10-19"},{"lineNumber":394,"author":{"gitId":"Py0000"},"content":"    * Cons:","lastModifiedDate":"2021-10-19"},{"lineNumber":395,"author":{"gitId":"Py0000"},"content":"        1. More prefixes required, more complex syntax: less intuitive to use. ","lastModifiedDate":"2021-10-19"},{"lineNumber":396,"author":{"gitId":"Py0000"},"content":"        2. Less abstraction, more coupling and more bug-prone: The same command class and parser class will handle all ","lastModifiedDate":"2021-10-19"},{"lineNumber":397,"author":{"gitId":"Py0000"},"content":"      the four different feature. ","lastModifiedDate":"2021-10-19"},{"lineNumber":398,"author":{"gitId":"Py0000"},"content":"        3. Unnecessary code would be executed to check for the type of sub-features is called in the parser class.","lastModifiedDate":"2021-10-19"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":400,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":402,"author":{"gitId":"Py0000"},"content":"### Find feature","lastModifiedDate":"2021-11-02"},{"lineNumber":403,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":404,"author":{"gitId":"Py0000"},"content":"#### Current implementation","lastModifiedDate":"2021-11-02"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":406,"author":{"gitId":"Py0000"},"content":"The find mechanism uses a few implementations of Predicate\u003cPerson\u003e using the inbuilt `Predicate` class.","lastModifiedDate":"2021-11-02"},{"lineNumber":407,"author":{"gitId":"Py0000"},"content":"It uses these predicates to determine which persons to display in the search results.","lastModifiedDate":"2021-11-02"},{"lineNumber":408,"author":{"gitId":"Py0000"},"content":"There are currently 4 custom predicates implemented in FAST:","lastModifiedDate":"2021-11-02"},{"lineNumber":409,"author":{"gitId":"Py0000"},"content":"- `NameContainsQueriesPredicate` -- checks if the person\u0027s name contains the query.","lastModifiedDate":"2021-11-02"},{"lineNumber":410,"author":{"gitId":"Py0000"},"content":"- `PriorityPredicate` -- checks if the person has the given priority tag.","lastModifiedDate":"2021-11-02"},{"lineNumber":411,"author":{"gitId":"Py0000"},"content":"- `TagMatchesKeywordPredicate` -- checks if any of the person\u0027s tags match the keyword.","lastModifiedDate":"2021-11-02"},{"lineNumber":412,"author":{"gitId":"Py0000"},"content":"- `RemarkContainsKeywordPredicate` -- checks if the person\u0027s remark contains the keyword.","lastModifiedDate":"2021-11-02"},{"lineNumber":413,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":414,"author":{"gitId":"Py0000"},"content":"`NameContainsQueriesPredicate` implemented by running the name through a for-loop to see if any word starts with the query.","lastModifiedDate":"2021-11-02"},{"lineNumber":415,"author":{"gitId":"Py0000"},"content":"`PriorityPredicate` implemented by running the tags through a for-loop and checking if any of them match the given priority.","lastModifiedDate":"2021-11-02"},{"lineNumber":416,"author":{"gitId":"Py0000"},"content":"`TagMatchesKeywordPredicate` implemented by running the tags through a for-loop and checking if any of them match the given keyword.","lastModifiedDate":"2021-11-02"},{"lineNumber":417,"author":{"gitId":"Py0000"},"content":"`RemarkContainsKeywordPredicate` implemented by using the inbuilt `String::contains`.","lastModifiedDate":"2021-11-02"},{"lineNumber":418,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":419,"author":{"gitId":"Py0000"},"content":"Given below is an example usage scenario and how the find mechanism behaves at each step.","lastModifiedDate":"2021-11-02"},{"lineNumber":420,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":421,"author":{"gitId":"Py0000"},"content":"Step 1. The user launches the application for the first time. \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":422,"author":{"gitId":"Py0000"},"content":"Step 2. The user inputs `find john` in the CLI to find all contacts whose names contain `john`. This calls `LogicManager::execute` which in turn","lastModifiedDate":"2021-11-02"},{"lineNumber":423,"author":{"gitId":"Py0000"},"content":"calls `FastParser::parseCommand` to parse the given input. \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":424,"author":{"gitId":"Py0000"},"content":"Step 3. `FastParser` will determine that it is a find command and will call `FindCommandParser::parse`. From the given input,","lastModifiedDate":"2021-11-02"},{"lineNumber":425,"author":{"gitId":"Py0000"},"content":"`FindCommandParser` will determine that the user is searching for a name and return a `FindCommand` with a `NameContainsQueriesPredicate`. \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":426,"author":{"gitId":"Py0000"},"content":"Step 4. After execution of the user input, `LogicManager` calls `FindCommand::execute(model)` where model contains methods that mutate","lastModifiedDate":"2021-11-02"},{"lineNumber":427,"author":{"gitId":"Py0000"},"content":"the state of our contacts. \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":428,"author":{"gitId":"Py0000"},"content":"Step 5. Through a series of method chains, it calls `ModelManager::getFilteredPersonList()`, which will display the results","lastModifiedDate":"2021-11-02"},{"lineNumber":429,"author":{"gitId":"Py0000"},"content":"of the search.\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":431,"author":{"gitId":"Py0000"},"content":"#### Design Considerations","lastModifiedDate":"2021-11-02"},{"lineNumber":432,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":433,"author":{"gitId":"Py0000"},"content":"**Aspect: How find executes:**","lastModifiedDate":"2021-11-02"},{"lineNumber":434,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":435,"author":{"gitId":"Py0000"},"content":"* **Alternative 1 (current choice):** Use many `Predicate\u003cPerson` implementations.","lastModifiedDate":"2021-11-02"},{"lineNumber":436,"author":{"gitId":"Py0000"},"content":"    * Pros: Easy to implement.","lastModifiedDate":"2021-11-02"},{"lineNumber":437,"author":{"gitId":"Py0000"},"content":"    * Cons: For every type of find added, a new class must be made.","lastModifiedDate":"2021-11-02"},{"lineNumber":438,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":439,"author":{"gitId":"Py0000"},"content":"* **Alternative 2:** Implement a custom Find method.","lastModifiedDate":"2021-11-02"},{"lineNumber":440,"author":{"gitId":"Py0000"},"content":"    * Pros: May be able to condense into 1 class","lastModifiedDate":"2021-11-02"},{"lineNumber":441,"author":{"gitId":"Py0000"},"content":"    * Cons: Very complicated and difficult to implement.","lastModifiedDate":"2021-11-02"},{"lineNumber":442,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":443,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":444,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":445,"author":{"gitId":"Cyn7hius"},"content":"### Help Window","lastModifiedDate":"2021-10-20"},{"lineNumber":446,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":447,"author":{"gitId":"Cyn7hius"},"content":"#### Current Implementation","lastModifiedDate":"2021-10-20"},{"lineNumber":448,"author":{"gitId":"Cyn7hius"},"content":"The help windows is a separate window and displays the command usage for each of the command. To access the help","lastModifiedDate":"2021-10-20"},{"lineNumber":449,"author":{"gitId":"Cyn7hius"},"content":"window, users have 3 ways to get to the help page:","lastModifiedDate":"2021-10-20"},{"lineNumber":450,"author":{"gitId":"Cyn7hius"},"content":"* Using the menu bar. Click on `Help` \u003e `Help`.","lastModifiedDate":"2021-10-20"},{"lineNumber":451,"author":{"gitId":"Cyn7hius"},"content":"* Pressing `F1` while using FAST.","lastModifiedDate":"2021-10-20"},{"lineNumber":452,"author":{"gitId":"Cyn7hius"},"content":"* Typing the command `help [COMMAND]`.","lastModifiedDate":"2021-10-20"},{"lineNumber":453,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":454,"author":{"gitId":"Cyn7hius"},"content":"To access the different commands\u0027 help page, there is a dropdown selector which will navigate to ","lastModifiedDate":"2021-10-20"},{"lineNumber":455,"author":{"gitId":"Cyn7hius"},"content":"the different help pages. By default, the help window opens to our \"Quick Start\" page which contains basic ","lastModifiedDate":"2021-10-20"},{"lineNumber":456,"author":{"gitId":"Cyn7hius"},"content":"information for first time users.","lastModifiedDate":"2021-10-20"},{"lineNumber":457,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":458,"author":{"gitId":"Cyn7hius"},"content":"#### Design Considerations","lastModifiedDate":"2021-10-20"},{"lineNumber":459,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":460,"author":{"gitId":"Cyn7hius"},"content":"**Aspect: How to access various commands\u0027 help page**","lastModifiedDate":"2021-10-20"},{"lineNumber":461,"author":{"gitId":"Cyn7hius"},"content":"* **Alternative 1 (Current choice):** Using `JavaFX::ComboBox`which provides a dropdown selector.","lastModifiedDate":"2021-10-20"},{"lineNumber":462,"author":{"gitId":"Cyn7hius"},"content":"    * Pros: Compact and easy to hide the selector in plain sight without distracting the user. Quick to navigate ","lastModifiedDate":"2021-10-20"},{"lineNumber":463,"author":{"gitId":"Cyn7hius"},"content":"            between the pages.","lastModifiedDate":"2021-10-20"},{"lineNumber":464,"author":{"gitId":"Cyn7hius"},"content":"    * Cons: To new users, might not be immediately obvious that the `ComboBox` can be interacted with. Users","lastModifiedDate":"2021-10-20"},{"lineNumber":465,"author":{"gitId":"Cyn7hius"},"content":"            might also miss the scroll bar and miss out some commands available.","lastModifiedDate":"2021-10-20"},{"lineNumber":466,"author":{"gitId":"Cyn7hius"},"content":"      ","lastModifiedDate":"2021-10-20"},{"lineNumber":467,"author":{"gitId":"Cyn7hius"},"content":"* **Alternative 2:** Using a single-page design where all commands\u0027 help messages are viewable at once","lastModifiedDate":"2021-10-20"},{"lineNumber":468,"author":{"gitId":"Cyn7hius"},"content":"    * Pros: Easier to be understood by new users.","lastModifiedDate":"2021-10-20"},{"lineNumber":469,"author":{"gitId":"Cyn7hius"},"content":"    * Cons: Cumbersome to users as they would have to scroll down a lot to find their desired command. ","lastModifiedDate":"2021-10-20"},{"lineNumber":470,"author":{"gitId":"Cyn7hius"},"content":"    ","lastModifiedDate":"2021-10-20"},{"lineNumber":471,"author":{"gitId":"Cyn7hius"},"content":"* **Alternative 3:** Using a Table of Contents (ToC) landing page.","lastModifiedDate":"2021-10-20"},{"lineNumber":472,"author":{"gitId":"Cyn7hius"},"content":"    * Pros: Users can see all the available commands at a glance and can select their desired commands easily.","lastModifiedDate":"2021-10-20"},{"lineNumber":473,"author":{"gitId":"Cyn7hius"},"content":"    * Cons: Users have to navigate back to the ToC to navigate between each command.","lastModifiedDate":"2021-10-20"},{"lineNumber":474,"author":{"gitId":"Cyn7hius"},"content":"    ","lastModifiedDate":"2021-10-20"},{"lineNumber":475,"author":{"gitId":"Cyn7hius"},"content":"We decided on the first choice as it provided users with the greatest ease of use. It is also the fastest way of ","lastModifiedDate":"2021-10-20"},{"lineNumber":476,"author":{"gitId":"Cyn7hius"},"content":"navigating between help pages. While we understand that most experienced users might not need to access the help menu, ","lastModifiedDate":"2021-10-20"},{"lineNumber":477,"author":{"gitId":"Cyn7hius"},"content":"by providing them a quick and easy way to access the commands\u0027 help page when they do need it is very important.","lastModifiedDate":"2021-10-20"},{"lineNumber":478,"author":{"gitId":"Cyn7hius"},"content":"    ","lastModifiedDate":"2021-10-20"},{"lineNumber":479,"author":{"gitId":"Cyn7hius"},"content":"**Aspect: How to access the help window**","lastModifiedDate":"2021-10-20"},{"lineNumber":480,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":481,"author":{"gitId":"Cyn7hius"},"content":"Initially, the help command only involved inputting `help` into FAST. However, we chose to revamp it to allow an ","lastModifiedDate":"2021-10-20"},{"lineNumber":482,"author":{"gitId":"Cyn7hius"},"content":"additional `[COMMAND]` paremater for the help command, which nagivates to the selected command\u0027s help page.","lastModifiedDate":"2021-10-20"},{"lineNumber":483,"author":{"gitId":"Cyn7hius"},"content":"  * Pros: Allows experienced users to quickly navigate to their desired help page, without having to open the help menu","lastModifiedDate":"2021-10-20"},{"lineNumber":484,"author":{"gitId":"Cyn7hius"},"content":"    first and selecting the command help page from there.","lastModifiedDate":"2021-10-20"},{"lineNumber":485,"author":{"gitId":"Cyn7hius"},"content":"  * Cons: Users might not know the exact `[COMMAND]` parameter to enter, which is counter-intuitive for a help command","lastModifiedDate":"2021-10-20"},{"lineNumber":486,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":487,"author":{"gitId":"Cyn7hius"},"content":"To address to cons of our implementation, we decided to compromise by still opening the help menu regardless of a","lastModifiedDate":"2021-10-20"},{"lineNumber":488,"author":{"gitId":"Cyn7hius"},"content":"valid input. If an incorrect `[COMMAND]` was entered, FAST will provide feedback to the user and still open the help","lastModifiedDate":"2021-10-20"},{"lineNumber":489,"author":{"gitId":"Cyn7hius"},"content":"window to the default page.","lastModifiedDate":"2021-10-20"},{"lineNumber":490,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":491,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":492,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":493,"author":{"gitId":"Py0000"},"content":"### Multiple Delete feature","lastModifiedDate":"2021-11-02"},{"lineNumber":494,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":495,"author":{"gitId":"Py0000"},"content":"#### Current Implementation","lastModifiedDate":"2021-11-02"},{"lineNumber":496,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":497,"author":{"gitId":"Py0000"},"content":"Managed by: [`DeleteCommand.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/logic/commands/DeleteCommand.java)","lastModifiedDate":"2021-11-02"},{"lineNumber":498,"author":{"gitId":"Py0000"},"content":"and [`DeleteCommandParser.java`](https://github.com/AY2122S1-CS2103T-T09-4/tp/blob/master/src/main/java/seedu/fast/logic/parser/DeleteCommandParser.java)","lastModifiedDate":"2021-11-02"},{"lineNumber":499,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":500,"author":{"gitId":"Py0000"},"content":"The `multiple delete` feature built on the existing `delete` feature. With the introduction of `multiple delete`, ","lastModifiedDate":"2021-11-02"},{"lineNumber":501,"author":{"gitId":"Py0000"},"content":"the `DeleteCommand` class is designed to handle both types of delete. ","lastModifiedDate":"2021-11-02"},{"lineNumber":502,"author":{"gitId":"Py0000"},"content":"`DeleteCommand::isSingleDelete()` and `DeleteCommand::executeSingleDelete()` handles the scenario of deleting just one client.","lastModifiedDate":"2021-11-02"},{"lineNumber":503,"author":{"gitId":"Py0000"},"content":"`DeleteCommand::isMultipleDelete()` and `DeleteCommand::executeMultipleDelete()` handles the scenario of deleting multiple client.","lastModifiedDate":"2021-11-02"},{"lineNumber":504,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":505,"author":{"gitId":"Py0000"},"content":"`Multiple delete` allows user to delete up to 10 clients in one go. ","lastModifiedDate":"2021-11-02"},{"lineNumber":506,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":507,"author":{"gitId":"Py0000"},"content":"Duplicated and out of bound indexes are not allowed. If these indexes are detected,","lastModifiedDate":"2021-11-02"},{"lineNumber":508,"author":{"gitId":"Py0000"},"content":"the command will not be executed. `HashSet` is used to check for duplicates in the extracted indexes.","lastModifiedDate":"2021-11-02"},{"lineNumber":509,"author":{"gitId":"Py0000"},"content":"The indexes will also be sorted in descending order to check for any out of bound indexes.","lastModifiedDate":"2021-11-02"},{"lineNumber":510,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":511,"author":{"gitId":"Py0000"},"content":"Currently, `multiple delete` allows 2 different format of user input:","lastModifiedDate":"2021-11-02"},{"lineNumber":512,"author":{"gitId":"Py0000"},"content":"1) `del INDEX...`","lastModifiedDate":"2021-11-02"},{"lineNumber":513,"author":{"gitId":"Py0000"},"content":"2) `del INDEX-INDEX`","lastModifiedDate":"2021-11-02"},{"lineNumber":514,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":515,"author":{"gitId":"Py0000"},"content":"To handle this 2 types of scenario, the `DeleteCommandParser::isRangeInput()` is implemented to determine whether the user input follows format 2.","lastModifiedDate":"2021-11-02"},{"lineNumber":516,"author":{"gitId":"Py0000"},"content":"`DeleteCommandParser::isRangeInput()` makes use of `DeleteCommandParser::CountDash()` to ensure that the input is a valid input that contains only one dash.","lastModifiedDate":"2021-11-02"},{"lineNumber":517,"author":{"gitId":"Py0000"},"content":"On top of checking the number of dashes, it also ensures that the length of the input is at least 3 after all whitespaces have been removed.","lastModifiedDate":"2021-11-02"},{"lineNumber":518,"author":{"gitId":"Py0000"},"content":"The end index must be greater than or equals to the start index. If the end index is equals to the start index, it will be treated as a `single delete`.","lastModifiedDate":"2021-11-02"},{"lineNumber":519,"author":{"gitId":"Py0000"},"content":"After validation, `DeleteCommandParser::parseRangeInput()` will extract all the indexes that the user wish to delete and create a new `DeleteCommand`.","lastModifiedDate":"2021-11-02"},{"lineNumber":520,"author":{"gitId":"Py0000"},"content":"The indexes are generated using a loop, starting from the first index, slowly incrementing by 1 until it reaches the end index.","lastModifiedDate":"2021-11-02"},{"lineNumber":521,"author":{"gitId":"Py0000"},"content":"As for format 1, the indexes are extracted from the user input by breaking up the input between the whitespaces.","lastModifiedDate":"2021-11-02"},{"lineNumber":522,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":523,"author":{"gitId":"Py0000"},"content":"The activity diagram below shows the flow of a multiple delete command.","lastModifiedDate":"2021-11-02"},{"lineNumber":524,"author":{"gitId":"Py0000"},"content":"![Multiple_Delete_Activity_Diagram](images/MultipleDeleteActivityDiagram.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":525,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":526,"author":{"gitId":"Py0000"},"content":"#### Usage Scenario","lastModifiedDate":"2021-11-02"},{"lineNumber":527,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":528,"author":{"gitId":"Py0000"},"content":"**1**) The user enters this command `del 1-5` into FAST.","lastModifiedDate":"2021-11-02"},{"lineNumber":529,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":530,"author":{"gitId":"Py0000"},"content":"**2**) `LogicManage::execute()` will be called which will in turn call `FastParser::parseCommand()`","lastModifiedDate":"2021-11-02"},{"lineNumber":531,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":532,"author":{"gitId":"Py0000"},"content":"**3**) `FastParser::ParseCommand()` will determine that it is a delete command and it will call the `DeleteCommandParser::parse()`","lastModifiedDate":"2021-11-02"},{"lineNumber":533,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":534,"author":{"gitId":"Py0000"},"content":"**4**) Inside `DeleteCommandParser::parse()`:","lastModifiedDate":"2021-11-02"},{"lineNumber":535,"author":{"gitId":"Py0000"},"content":" * `DeleteCommandParser::isRangeInput()` will check if the user input contains exactly 1 dash and if the length is at least 3, after removing all the whitespaces. The result will be `true`","lastModifiedDate":"2021-11-02"},{"lineNumber":536,"author":{"gitId":"Py0000"},"content":" * `DeleteCommandParser::spiltRangeInput()` will parse the input and extract out the start index and the end index.","lastModifiedDate":"2021-11-02"},{"lineNumber":537,"author":{"gitId":"Py0000"},"content":" * `DeleteCommandParser::parseRangeInput()` will generate all the indexes in between the start and end index and return a new `DeleteCommand` object.","lastModifiedDate":"2021-11-02"},{"lineNumber":538,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":539,"author":{"gitId":"Py0000"},"content":"**5**) `LogicManager` will call `DeleteCommand::execute()`.","lastModifiedDate":"2021-11-02"},{"lineNumber":540,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":541,"author":{"gitId":"Py0000"},"content":"**6**) Inside `DeleteCommand::execute()`:","lastModifiedDate":"2021-11-02"},{"lineNumber":542,"author":{"gitId":"Py0000"},"content":" * It will check if the length of the Index array is more than 10 or more than the number of clients that FAST currently has.","lastModifiedDate":"2021-11-02"},{"lineNumber":543,"author":{"gitId":"Py0000"},"content":" * After validation, `DeleteCommand::isMultipleDelete()` will determine that it is a multiple delete.","lastModifiedDate":"2021-11-02"},{"lineNumber":544,"author":{"gitId":"Py0000"},"content":" * `DeleteCommand::sortOrder()` will sort the indexes in descending order.","lastModifiedDate":"2021-11-02"},{"lineNumber":545,"author":{"gitId":"Py0000"},"content":" * `DeleteCommand::getInvalidIndex()` will traverse through the Index array to collate a list of invalid index.","lastModifiedDate":"2021-11-02"},{"lineNumber":546,"author":{"gitId":"Py0000"},"content":" * `DeleteCommand::checkIndex()` will check and determine that there is no invalid index.","lastModifiedDate":"2021-11-02"},{"lineNumber":547,"author":{"gitId":"Py0000"},"content":" * `DeleteCommand::checkDuplicates()` will check and determine that there is no duplicated index.","lastModifiedDate":"2021-11-02"},{"lineNumber":548,"author":{"gitId":"Py0000"},"content":" * `DeleteCommand::executeMultipleDelete()` will start to delete the 5 clients in a for loop through `Model::deletePerson()`.","lastModifiedDate":"2021-11-02"},{"lineNumber":549,"author":{"gitId":"Py0000"},"content":" * Success message will be displayed afterwards.","lastModifiedDate":"2021-11-02"},{"lineNumber":550,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":551,"author":{"gitId":"Py0000"},"content":"The sequence diagram below shows step 1 to step 6 mentioned above.","lastModifiedDate":"2021-11-02"},{"lineNumber":552,"author":{"gitId":"Py0000"},"content":"![Multiple_Delete_Sequence_Diagram](images/MultipleDeleteSequenceDiagram.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":553,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":554,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":555,"author":{"gitId":"Py0000"},"content":"#### Design Consideration","lastModifiedDate":"2021-11-02"},{"lineNumber":556,"author":{"gitId":"Py0000"},"content":"**Alternative 1 (current choice):** Execute multiple delete in descending order of indexes.","lastModifiedDate":"2021-11-02"},{"lineNumber":557,"author":{"gitId":"Py0000"},"content":"* Pros:","lastModifiedDate":"2021-11-02"},{"lineNumber":558,"author":{"gitId":"Py0000"},"content":"  1. Detects out of bound index first.","lastModifiedDate":"2021-11-02"},{"lineNumber":559,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":560,"author":{"gitId":"Py0000"},"content":"* Cons:","lastModifiedDate":"2021-11-02"},{"lineNumber":561,"author":{"gitId":"Py0000"},"content":"  1. Have to introduce another method to do the sorting.","lastModifiedDate":"2021-11-02"},{"lineNumber":562,"author":{"gitId":"Py0000"},"content":"  2. Slower time as the index array needs to be sorted first.","lastModifiedDate":"2021-11-02"},{"lineNumber":563,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":564,"author":{"gitId":"Py0000"},"content":"**Alternative 2:** Execute multiple delete in the order of indexes input by user.","lastModifiedDate":"2021-11-02"},{"lineNumber":565,"author":{"gitId":"Py0000"},"content":"* Pros:","lastModifiedDate":"2021-11-02"},{"lineNumber":566,"author":{"gitId":"Py0000"},"content":"    1. Faster process, do not need to sort.","lastModifiedDate":"2021-11-02"},{"lineNumber":567,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":568,"author":{"gitId":"Py0000"},"content":"* Cons:","lastModifiedDate":"2021-11-02"},{"lineNumber":569,"author":{"gitId":"Py0000"},"content":"    1. More bug-prone, have to account for the differences between the currently deleted index and the to-be deleted index as the model updates after each delete, hence the index may not be the same as what the user has input.","lastModifiedDate":"2021-11-02"},{"lineNumber":570,"author":{"gitId":"Py0000"},"content":"    2. Will delete contacts until the first invalid index is detect, might be confusing for the user.","lastModifiedDate":"2021-11-02"},{"lineNumber":571,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":572,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":573,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":574,"author":{"gitId":"Py0000"},"content":"### Sort feature","lastModifiedDate":"2021-11-02"},{"lineNumber":575,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":576,"author":{"gitId":"Py0000"},"content":"#### Current Implementation","lastModifiedDate":"2021-11-02"},{"lineNumber":577,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":578,"author":{"gitId":"Py0000"},"content":"The sort mechanism is facilitated by the inbuilt Collections::sort method.","lastModifiedDate":"2021-11-02"},{"lineNumber":579,"author":{"gitId":"Py0000"},"content":"This is done by passing a custom comparator that implements the Comparator interface to the sort method.","lastModifiedDate":"2021-11-02"},{"lineNumber":580,"author":{"gitId":"Py0000"},"content":"There are currently three custom comparators implemented in FAST:","lastModifiedDate":"2021-11-02"},{"lineNumber":581,"author":{"gitId":"Py0000"},"content":"- `SortByName` -- Sorts the contacts alphabetically by name.","lastModifiedDate":"2021-11-02"},{"lineNumber":582,"author":{"gitId":"Py0000"},"content":"- `SortByAppointment` -- Sorts the contacts chronologically by date.","lastModifiedDate":"2021-11-02"},{"lineNumber":583,"author":{"gitId":"Py0000"},"content":"- `SortByPriority` -- Sorts the contacts by priority tags.","lastModifiedDate":"2021-11-02"},{"lineNumber":584,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":585,"author":{"gitId":"Py0000"},"content":"`SortByName`: Implemented by using the inbuilt `String::compareTo`.  \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":586,"author":{"gitId":"Py0000"},"content":"`SortByAppointment`: Implemented by first converting the appointment date from `String` to a `Date` object before using","lastModifiedDate":"2021-11-02"},{"lineNumber":587,"author":{"gitId":"Py0000"},"content":"the inbuilt `Date::compareTo` method.  \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":588,"author":{"gitId":"Py0000"},"content":"`SortByPriority`: Implemented by first assigning int values to tags, tags with highest priority will have the smallest int value.","lastModifiedDate":"2021-11-02"},{"lineNumber":589,"author":{"gitId":"Py0000"},"content":"Using those priority values, the inbuilt `Integer::compareTo` is used. \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":590,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":591,"author":{"gitId":"Py0000"},"content":"Given below is an example usage scenario and how the sort mechanism behaves at each step.","lastModifiedDate":"2021-11-02"},{"lineNumber":592,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":593,"author":{"gitId":"Py0000"},"content":"Step 1. The user launches the application for the first time. \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":594,"author":{"gitId":"Py0000"},"content":"Step 2. The user inputs `sort name` in the CLI to sort all contacts by name. This calls `LogicManager::execute` which in turn","lastModifiedDate":"2021-11-02"},{"lineNumber":595,"author":{"gitId":"Py0000"},"content":"calls `FastParser::parseCommand` to parse the given input. \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":596,"author":{"gitId":"Py0000"},"content":"Step 3. `FastParser` will determine that it is a sort command and will call `SortCommandParser::parse`. From the given input,","lastModifiedDate":"2021-11-02"},{"lineNumber":597,"author":{"gitId":"Py0000"},"content":"`SortCommandParser` will create the corresponding `SortByName` Comparator and return a `SortCommand` with that comparator. \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":598,"author":{"gitId":"Py0000"},"content":"Step 4. After execution of the user input, `LogicManager` calls `SortCommand::execute(model)` where model contains methods that mutate","lastModifiedDate":"2021-11-02"},{"lineNumber":599,"author":{"gitId":"Py0000"},"content":"the state of our contacts. \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":600,"author":{"gitId":"Py0000"},"content":"Step 5. Through a series of method chains, it calls `UniquePersonList::sortPersons(SortByName)`, which executes the sort method","lastModifiedDate":"2021-11-02"},{"lineNumber":601,"author":{"gitId":"Py0000"},"content":"to sort the list of persons by their name.\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":602,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":603,"author":{"gitId":"Py0000"},"content":"#### Design Considerations","lastModifiedDate":"2021-11-02"},{"lineNumber":604,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":605,"author":{"gitId":"Py0000"},"content":"**Aspect: How sort executes:**","lastModifiedDate":"2021-11-02"},{"lineNumber":606,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":607,"author":{"gitId":"Py0000"},"content":"* **Alternative 1 (current choice):** Use the inbuilt `Collections::sort`.","lastModifiedDate":"2021-11-02"},{"lineNumber":608,"author":{"gitId":"Py0000"},"content":"    * Pros: Easy to implement.","lastModifiedDate":"2021-11-02"},{"lineNumber":609,"author":{"gitId":"Py0000"},"content":"    * Cons: May need additional attributes to compare.","lastModifiedDate":"2021-11-02"},{"lineNumber":610,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":611,"author":{"gitId":"Py0000"},"content":"* **Alternative 2:** Implement a custom Sort method.","lastModifiedDate":"2021-11-02"},{"lineNumber":612,"author":{"gitId":"Py0000"},"content":"    * Pros: May not need additional attributes","lastModifiedDate":"2021-11-02"},{"lineNumber":613,"author":{"gitId":"Py0000"},"content":"    * Cons: Very complicated, may have performance issues if the sort is not efficient.","lastModifiedDate":"2021-11-02"},{"lineNumber":614,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":615,"author":{"gitId":"Py0000"},"content":"**Aspect: How SortByDate is implemented:**","lastModifiedDate":"2021-11-02"},{"lineNumber":616,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":617,"author":{"gitId":"Py0000"},"content":"* **Alternative 1 (current choice):** Convert the String value to Date object before using inbuilt `compareTo`.","lastModifiedDate":"2021-11-02"},{"lineNumber":618,"author":{"gitId":"Py0000"},"content":"    * Pros: Easy to implement.","lastModifiedDate":"2021-11-02"},{"lineNumber":619,"author":{"gitId":"Py0000"},"content":"    * Cons: Need to account for empty appointment dates.","lastModifiedDate":"2021-11-02"},{"lineNumber":620,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":621,"author":{"gitId":"Py0000"},"content":"* **Alternative 2:** Compare dates in String.","lastModifiedDate":"2021-11-02"},{"lineNumber":622,"author":{"gitId":"Py0000"},"content":"    * Pros: No need to convert the values to another type.","lastModifiedDate":"2021-11-02"},{"lineNumber":623,"author":{"gitId":"Py0000"},"content":"    * Cons: Complicated since there is a need for 3 different comparisons namely, year, month, date.","lastModifiedDate":"2021-11-02"},{"lineNumber":624,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":625,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":626,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":627,"author":{"gitId":"Cyn7hius"},"content":"### Statistics window","lastModifiedDate":"2021-10-20"},{"lineNumber":628,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":629,"author":{"gitId":"Cyn7hius"},"content":"#### Current Implementation","lastModifiedDate":"2021-10-20"},{"lineNumber":630,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":631,"author":{"gitId":"Cyn7hius"},"content":"The statis window displays statistics and insights into the user\u0027s client base. To access the stats window, users have ","lastModifiedDate":"2021-10-20"},{"lineNumber":632,"author":{"gitId":"Cyn7hius"},"content":"2 ways of getting to the stats page:","lastModifiedDate":"2021-10-20"},{"lineNumber":633,"author":{"gitId":"Cyn7hius"},"content":"* Using the menu bar. Click on `Stats` \u003e `Stats`.","lastModifiedDate":"2021-10-20"},{"lineNumber":634,"author":{"gitId":"Cyn7hius"},"content":"* Pressing `F2` while using FAST.","lastModifiedDate":"2021-10-20"},{"lineNumber":635,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":636,"author":{"gitId":"Cyn7hius"},"content":"Currently, the stats window provides infomation for the client\u0027s Priority Tags and their Insurance Plans. We used ","lastModifiedDate":"2021-10-20"},{"lineNumber":637,"author":{"gitId":"Cyn7hius"},"content":"`JavaFX::PieChart` to visualise the client\u0027s data and display them to the user. We also provided a few template insights","lastModifiedDate":"2021-10-20"},{"lineNumber":638,"author":{"gitId":"Cyn7hius"},"content":"for the user to make sense of the data provided.","lastModifiedDate":"2021-10-20"},{"lineNumber":639,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":640,"author":{"gitId":"Cyn7hius"},"content":"#### Design Considerations","lastModifiedDate":"2021-10-20"},{"lineNumber":641,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":642,"author":{"gitId":"Cyn7hius"},"content":"**Aspect: How to visualise the data**","lastModifiedDate":"2021-10-20"},{"lineNumber":643,"author":{"gitId":"Cyn7hius"},"content":"* **Alternative 1 (Current choice):** Using `JavaFX::PieChart`.","lastModifiedDate":"2021-10-20"},{"lineNumber":644,"author":{"gitId":"Cyn7hius"},"content":"    * Pros: Can be easily understood by the user. Provides a good overview of the proportion at a glance.","lastModifiedDate":"2021-10-20"},{"lineNumber":645,"author":{"gitId":"Cyn7hius"},"content":"    * Cons: Gets messy if there are a lot of variables. Data elements with a small count will be hidden to the","lastModifiedDate":"2021-10-20"},{"lineNumber":646,"author":{"gitId":"Cyn7hius"},"content":"            user.","lastModifiedDate":"2021-10-20"},{"lineNumber":647,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":648,"author":{"gitId":"Cyn7hius"},"content":"* **Alternative 2:** Using `JavaFX::BarChart`.","lastModifiedDate":"2021-10-20"},{"lineNumber":649,"author":{"gitId":"Cyn7hius"},"content":"    * Pros: Easier to be understood by new users. ","lastModifiedDate":"2021-10-20"},{"lineNumber":650,"author":{"gitId":"Cyn7hius"},"content":"    * Cons: The information might be overbearing. Does not provide an immediate overview of the client base. New","lastModifiedDate":"2021-10-20"},{"lineNumber":651,"author":{"gitId":"Cyn7hius"},"content":"            users might also be confused by the large amount of information displayed at once.","lastModifiedDate":"2021-10-20"},{"lineNumber":652,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":653,"author":{"gitId":"Cyn7hius"},"content":"Ultimately, as our main focus was speed and ease of use, we decided on the piechart implementation as it is both ","lastModifiedDate":"2021-10-20"},{"lineNumber":654,"author":{"gitId":"Cyn7hius"},"content":"easily understood, yet is able to convey the essence of the data to the user. Other chart types are less common and ","lastModifiedDate":"2021-10-20"},{"lineNumber":655,"author":{"gitId":"Cyn7hius"},"content":"thus might be confusing the the user. To address the cons of the piechart, we also included some analysis of the ","lastModifiedDate":"2021-10-20"},{"lineNumber":656,"author":{"gitId":"Cyn7hius"},"content":"piechart to help users better understand the data and provide a more complete statistic.","lastModifiedDate":"2021-10-20"},{"lineNumber":657,"author":{"gitId":"Cyn7hius"},"content":"    ","lastModifiedDate":"2021-10-20"},{"lineNumber":658,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":659,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":660,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":661,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":662,"author":{"gitId":"trash-bin99"},"content":"### Tagging feature","lastModifiedDate":"2021-10-19"},{"lineNumber":663,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":664,"author":{"gitId":"trash-bin99"},"content":"#### Current Implementation","lastModifiedDate":"2021-10-19"},{"lineNumber":665,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":666,"author":{"gitId":"trash-bin99"},"content":"Other than the edit command. a tag command has also been added to make adding and deleting tags easier.","lastModifiedDate":"2021-10-19"},{"lineNumber":667,"author":{"gitId":"trash-bin99"},"content":"This command has a relatively straightforward implementation:","lastModifiedDate":"2021-10-19"},{"lineNumber":668,"author":{"gitId":"trash-bin99"},"content":"1. A `Set` of currently assigned tags is retrieved from the specified `Person`.","lastModifiedDate":"2021-10-19"},{"lineNumber":669,"author":{"gitId":"trash-bin99"},"content":"2. A new `Set` is created using the retrieved `Set`, then tags are deleted and added as necessary.","lastModifiedDate":"2021-10-19"},{"lineNumber":670,"author":{"gitId":"trash-bin99"},"content":"3. If there are no issues with adding and deleting, and certain conditions are satisfied, the `Person` ","lastModifiedDate":"2021-10-19"},{"lineNumber":671,"author":{"gitId":"trash-bin99"},"content":"   will be updated with the new `Set` of tags. Any violations of the conditions will result in an error being ","lastModifiedDate":"2021-10-20"},{"lineNumber":672,"author":{"gitId":"trash-bin99"},"content":"   shown to the user. The conditions are as follows:","lastModifiedDate":"2021-10-20"},{"lineNumber":673,"author":{"gitId":"trash-bin99"},"content":"    1. All tag names have a maximum character length of 20 alphanumeric characters","lastModifiedDate":"2021-10-20"},{"lineNumber":674,"author":{"gitId":"trash-bin99"},"content":"    2. A maximum of 1 Priority tag exists in the `Set` of tags","lastModifiedDate":"2021-10-20"},{"lineNumber":675,"author":{"gitId":"trash-bin99"},"content":"    3. A maximum of 1 of each Investment Plan tag exists in the `Set` of tags","lastModifiedDate":"2021-10-20"},{"lineNumber":676,"author":{"gitId":"trash-bin99"},"content":"    4. No duplicate tag is added to the `Set`","lastModifiedDate":"2021-10-20"},{"lineNumber":677,"author":{"gitId":"trash-bin99"},"content":"    5. No non-existent tag is attempted to be deleted from the \u0027Set\u0027","lastModifiedDate":"2021-10-20"},{"lineNumber":678,"author":{"gitId":"trash-bin99"},"content":"    ","lastModifiedDate":"2021-10-19"},{"lineNumber":679,"author":{"gitId":"trash-bin99"},"content":"Below is an example usage scenario: ","lastModifiedDate":"2021-10-19"},{"lineNumber":680,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":681,"author":{"gitId":"trash-bin99"},"content":"1. The user launches the application and inputs \"tag 1 a/fat d/thin\", to add a tag `fat` and delete a tag `thin`","lastModifiedDate":"2021-10-19"},{"lineNumber":682,"author":{"gitId":"trash-bin99"},"content":"   from the first listed contact.","lastModifiedDate":"2021-10-19"},{"lineNumber":683,"author":{"gitId":"trash-bin99"},"content":"2. This calls `LogicManager::execute` which further calls `FastParser::parseCommand` to parse the given input.","lastModifiedDate":"2021-10-19"},{"lineNumber":684,"author":{"gitId":"trash-bin99"},"content":"3. `FastParser` determines that it is a tag command, and further calls `TagCommandParser::parse`.","lastModifiedDate":"2021-10-19"},{"lineNumber":685,"author":{"gitId":"trash-bin99"},"content":"4. `TagCommandParser` will then identify the tags to add and delete, and return a `TagCommand` that contains a Set","lastModifiedDate":"2021-10-19"},{"lineNumber":686,"author":{"gitId":"trash-bin99"},"content":"   of tags to delete and another Set of tags to add.","lastModifiedDate":"2021-10-19"},{"lineNumber":687,"author":{"gitId":"trash-bin99"},"content":"5. `LogicManager` then calls the method `TagCommand::execute`, which will attempt to add and delete the specified ","lastModifiedDate":"2021-10-19"},{"lineNumber":688,"author":{"gitId":"trash-bin99"},"content":"   tags, while ensuring that certain conditions are met.","lastModifiedDate":"2021-10-19"},{"lineNumber":689,"author":{"gitId":"trash-bin99"},"content":"6. If there are no issues, the command will finish executing, and a message indicating success will appear.","lastModifiedDate":"2021-10-19"},{"lineNumber":690,"author":{"gitId":"trash-bin99"},"content":"   Any changes to the tags will be reflected immediately: In this case, the tag `fat` will be added while the","lastModifiedDate":"2021-10-19"},{"lineNumber":691,"author":{"gitId":"trash-bin99"},"content":"   tag `thin` will be deleted.","lastModifiedDate":"2021-10-19"},{"lineNumber":692,"author":{"gitId":"trash-bin99"},"content":"   ","lastModifiedDate":"2021-10-19"},{"lineNumber":693,"author":{"gitId":"trash-bin99"},"content":"#### Design Considerations","lastModifiedDate":"2021-10-19"},{"lineNumber":694,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":695,"author":{"gitId":"trash-bin99"},"content":"* **Alternative 1 (current choice):** Implement a dedicated Tag command.","lastModifiedDate":"2021-10-19"},{"lineNumber":696,"author":{"gitId":"trash-bin99"},"content":"    * Pros: ","lastModifiedDate":"2021-10-19"},{"lineNumber":697,"author":{"gitId":"trash-bin99"},"content":"      1. Isolation of a single feature to a specific command: more intuitive to use.","lastModifiedDate":"2021-10-19"},{"lineNumber":698,"author":{"gitId":"trash-bin99"},"content":"      2. Improvement over `edit` command: retains tags not directly affected by the command","lastModifiedDate":"2021-10-19"},{"lineNumber":699,"author":{"gitId":"trash-bin99"},"content":"    * Cons:","lastModifiedDate":"2021-10-19"},{"lineNumber":700,"author":{"gitId":"trash-bin99"},"content":"      1. Repeated functionality that already exists in `edit` command","lastModifiedDate":"2021-10-19"},{"lineNumber":701,"author":{"gitId":"trash-bin99"},"content":"    ","lastModifiedDate":"2021-10-19"},{"lineNumber":702,"author":{"gitId":"trash-bin99"},"content":"* **Alternative 2:** Augment the `edit` command.","lastModifiedDate":"2021-10-19"},{"lineNumber":703,"author":{"gitId":"trash-bin99"},"content":"    * Pros:","lastModifiedDate":"2021-10-19"},{"lineNumber":704,"author":{"gitId":"trash-bin99"},"content":"      1. Reduce the number of commands in the application: less to manage, easier to remember.","lastModifiedDate":"2021-10-19"},{"lineNumber":705,"author":{"gitId":"trash-bin99"},"content":"    * Cons:","lastModifiedDate":"2021-10-19"},{"lineNumber":706,"author":{"gitId":"trash-bin99"},"content":"      1. Overloading the `edit` command, which already accepts many parameters and modifiers in its","lastModifiedDate":"2021-10-19"},{"lineNumber":707,"author":{"gitId":"trash-bin99"},"content":"         command format, could make it much more confusing to use, especially for newer users.","lastModifiedDate":"2021-10-19"},{"lineNumber":708,"author":{"gitId":"trash-bin99"},"content":"      2. Harder to implement, as many existing dependencies could be affected.   ","lastModifiedDate":"2021-10-19"},{"lineNumber":709,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":710,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":711,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":712,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":713,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":714,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":715,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":716,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":717,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":718,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":719,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":720,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":721,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":722,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":723,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":724,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":725,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":726,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":727,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":728,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":729,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":730,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":731,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":732,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":733,"author":{"gitId":"Cyn7hius"},"content":"* No time/busy","lastModifiedDate":"2021-09-27"},{"lineNumber":734,"author":{"gitId":"Cyn7hius"},"content":"* Might not be tech-savvy","lastModifiedDate":"2021-09-27"},{"lineNumber":735,"author":{"gitId":"Cyn7hius"},"content":"* Many contacts to manage","lastModifiedDate":"2021-09-27"},{"lineNumber":736,"author":{"gitId":"Th-429B"},"content":"* Has a need to manage a significant number of contacts","lastModifiedDate":"2021-10-17"},{"lineNumber":737,"author":{"gitId":"Th-429B"},"content":"* Can type fast","lastModifiedDate":"2021-10-17"},{"lineNumber":738,"author":{"gitId":"Th-429B"},"content":"* Prefers typing to mouse interactions","lastModifiedDate":"2021-10-17"},{"lineNumber":739,"author":{"gitId":"Th-429B"},"content":"* Is reasonably comfortable using CLI apps","lastModifiedDate":"2021-10-17"},{"lineNumber":740,"author":{"gitId":"Th-429B"},"content":"* Needs to profile clients","lastModifiedDate":"2021-10-17"},{"lineNumber":741,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":742,"author":{"gitId":"Cyn7hius"},"content":"**Value proposition**: Financial Advisors are busy. We will help them save time by optimising our system for them. FAST keeps track of client details and information for them.","lastModifiedDate":"2021-09-27"},{"lineNumber":743,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":744,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":745,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":746,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":747,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":748,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":749,"author":{"gitId":"trash-bin99"},"content":"| Priority | As a …​                                 | I want to …​                                              | So that I …​                                                                |","lastModifiedDate":"2021-09-28"},{"lineNumber":750,"author":{"gitId":"trash-bin99"},"content":"| -------- | ------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------------------------ |","lastModifiedDate":"2021-09-28"},{"lineNumber":751,"author":{"gitId":"trash-bin99"},"content":"| `* * *`  | user                                       | use the application offline                                  | can view my contacts without an internet connection                            |","lastModifiedDate":"2021-09-28"},{"lineNumber":752,"author":{"gitId":"trash-bin99"},"content":"| `* * *`  | FA                                         | delete contact info                                          | will not have useless data in my app                                           |","lastModifiedDate":"2021-09-28"},{"lineNumber":753,"author":{"gitId":"trash-bin99"},"content":"| `* * *`  | FA                                         | store my clients contact info                                | can contact them in the future more easily                                     |","lastModifiedDate":"2021-09-28"},{"lineNumber":754,"author":{"gitId":"trash-bin99"},"content":"| `* * *`  | user                                       | see all of my contacts                                       | know who is in my contacts                                                     |","lastModifiedDate":"2021-09-27"},{"lineNumber":755,"author":{"gitId":"trash-bin99"},"content":"| `* * *`  | new user                                   | learn how to use the app                                     | can effectively use the app                                                    |","lastModifiedDate":"2021-09-28"},{"lineNumber":756,"author":{"gitId":"trash-bin99"},"content":"| `* * *`  | busy person                                | use the app with friendlier syntax that\u0027s easier to type     | can add contacts with less trouble                                             |","lastModifiedDate":"2021-09-28"},{"lineNumber":757,"author":{"gitId":"trash-bin99"},"content":"| `* * *`  | busy person                                | see all the available commands at a glance                   | can focus on managing my client base rather than dealing with the syntax       |","lastModifiedDate":"2021-09-28"},{"lineNumber":758,"author":{"gitId":"trash-bin99"},"content":"| `* * *`  | FA                                         | update my clients contact info                               | have up to date information                                                    |","lastModifiedDate":"2021-09-28"},{"lineNumber":759,"author":{"gitId":"trash-bin99"},"content":"| `* * *`  | forgetful person                           | quickly check for the highest priority client                | can move on to the next client quickly without delay                           |","lastModifiedDate":"2021-09-28"},{"lineNumber":760,"author":{"gitId":"trash-bin99"},"content":"| `* * *`  | FA with many clients                       | tag my clients\u0027 info                                         | can see different groups of clients according to the tags                      |","lastModifiedDate":"2021-09-28"},{"lineNumber":761,"author":{"gitId":"trash-bin99"},"content":"| `* *`    | FA                                         | store my clients contact information                         | do not need to store them on my phone                                          |","lastModifiedDate":"2021-09-28"},{"lineNumber":762,"author":{"gitId":"trash-bin99"},"content":"| `* *`    | numbers person                             | delete multiple contacts in one go                           | do not have to delete contacts individually                                    |","lastModifiedDate":"2021-09-28"},{"lineNumber":763,"author":{"gitId":"trash-bin99"},"content":"| `* *`    | FA with many clients                       | search through my clients                                    | can easily find a specific client                                              |","lastModifiedDate":"2021-09-28"},{"lineNumber":764,"author":{"gitId":"trash-bin99"},"content":"| `* *`    | FA                                         | have fast access to important numbers (e.g. office, partners | can quickly contact my partners should something arise                         |","lastModifiedDate":"2021-09-28"},{"lineNumber":765,"author":{"gitId":"trash-bin99"},"content":"| `* *`    | potential user                             | see how the app works with sample data                       | can understand what the app will look like with real data                      |","lastModifiedDate":"2021-09-28"},{"lineNumber":766,"author":{"gitId":"trash-bin99"},"content":"| `* *`    | FA                                         | group my clients according to their investment strategies    | can easily manage each group                                                   |","lastModifiedDate":"2021-09-28"},{"lineNumber":767,"author":{"gitId":"trash-bin99"},"content":"| `* *`    | FA                                         | archive data that might be obsolete at the moment            | do not flood my app with obsolete data and can still access them in the future |","lastModifiedDate":"2021-09-28"},{"lineNumber":768,"author":{"gitId":"trash-bin99"},"content":"| `*`      | FA                                         | store appointments info of my clients                        | will not forget about important meetings                                       |","lastModifiedDate":"2021-09-28"},{"lineNumber":769,"author":{"gitId":"trash-bin99"},"content":"| `*`      | person with many devices                   | import and export the client info                            | can switch between devices quickly                                             |","lastModifiedDate":"2021-09-28"},{"lineNumber":770,"author":{"gitId":"trash-bin99"},"content":"| `*`      | FA with many clients                       | view stats of my client base                                 | can know how much income I am making                                           |","lastModifiedDate":"2021-09-28"},{"lineNumber":771,"author":{"gitId":"trash-bin99"},"content":"| `*`      | FA                                         | reminded to contact potential clients                        | can disturb potential clients into signing on                                  |","lastModifiedDate":"2021-09-28"},{"lineNumber":772,"author":{"gitId":"trash-bin99"},"content":"| `*`      | FA                                         | check the number of clients and deals currently              | can check if i have fulfilled my monthly quota                                 |","lastModifiedDate":"2021-09-28"},{"lineNumber":773,"author":{"gitId":"trash-bin99"},"content":"| `*`      | FA                                         | store extra info that could be useful                        | can remember extra details that could be useful in clinching a deal            |","lastModifiedDate":"2021-09-28"},{"lineNumber":774,"author":{"gitId":"trash-bin99"},"content":"| `*`      | FA                                         | see frequently contacted clients                             | don\u0027t have to keep searching for the same person over and over again           |","lastModifiedDate":"2021-09-28"},{"lineNumber":775,"author":{"gitId":"trash-bin99"},"content":"| `*`      | FA                                         | list out all my investment plans                             | know what investment plans I am selling                                        |","lastModifiedDate":"2021-09-28"},{"lineNumber":776,"author":{"gitId":"trash-bin99"},"content":"| `*`      | user                                       | color-code my contacts                                       | can differentiate between the tags, and it looks nicer                         |","lastModifiedDate":"2021-09-28"},{"lineNumber":777,"author":{"gitId":"trash-bin99"},"content":"| `*`      | Responsible FA                             | be reminded of clashes in my appointments                    | will not lose any potential clients                                            |","lastModifiedDate":"2021-09-28"},{"lineNumber":778,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":779,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":780,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":781,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":782,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":783,"author":{"gitId":"Py0000"},"content":"(For all use cases below, the **System** is the `Financial Advisor Smart Tracker (FAST)` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2021-09-27"},{"lineNumber":784,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":785,"author":{"gitId":"Py0000"},"content":"#### Use case: UC01 - Add Contact","lastModifiedDate":"2021-11-02"},{"lineNumber":786,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":787,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":788,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":789,"author":{"gitId":"Py0000"},"content":"1. User requests to add a new contact.","lastModifiedDate":"2021-10-15"},{"lineNumber":790,"author":{"gitId":"Py0000"},"content":"2. FAST displays a message indicating success.","lastModifiedDate":"2021-10-15"},{"lineNumber":791,"author":{"gitId":"Py0000"},"content":"3. FAST displays the new contact below.","lastModifiedDate":"2021-10-15"},{"lineNumber":792,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":793,"author":{"gitId":"Py0000"},"content":"   Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":794,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":795,"author":{"gitId":"Py0000"},"content":"**Extensions**","lastModifiedDate":"2021-09-27"},{"lineNumber":796,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":797,"author":{"gitId":"Py0000"},"content":"* 1a. The given command syntax is invalid.","lastModifiedDate":"2021-10-15"},{"lineNumber":798,"author":{"gitId":"Py0000"},"content":"    * 1a1. FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":799,"author":{"gitId":"Py0000"},"content":"    * 1a2. FAST shows an example of add contact command to user.","lastModifiedDate":"2021-10-15"},{"lineNumber":800,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":801,"author":{"gitId":"Py0000"},"content":"      Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":802,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":803,"author":{"gitId":"Py0000"},"content":"#### Use case: UC02 - Delete Contact","lastModifiedDate":"2021-11-02"},{"lineNumber":804,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":805,"author":{"gitId":"Py0000"},"content":"**MSS**","lastModifiedDate":"2021-09-27"},{"lineNumber":806,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":807,"author":{"gitId":"Py0000"},"content":"1. User requests to list persons (UC06).","lastModifiedDate":"2021-10-15"},{"lineNumber":808,"author":{"gitId":"Py0000"},"content":"2. User requests to delete a specific person in the list.","lastModifiedDate":"2021-10-15"},{"lineNumber":809,"author":{"gitId":"Py0000"},"content":"3. FAST deletes the person.","lastModifiedDate":"2021-10-15"},{"lineNumber":810,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":811,"author":{"gitId":"Py0000"},"content":"   Use case ends","lastModifiedDate":"2021-09-27"},{"lineNumber":812,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":813,"author":{"gitId":"Py0000"},"content":"**Extensions**","lastModifiedDate":"2021-09-27"},{"lineNumber":814,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":815,"author":{"gitId":"Py0000"},"content":"* 2a. The given index is invalid.","lastModifiedDate":"2021-10-15"},{"lineNumber":816,"author":{"gitId":"Py0000"},"content":"    * 2a1. FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":817,"author":{"gitId":"Py0000"},"content":"    * 2a2. FAST shows an example of delete contact command to user.","lastModifiedDate":"2021-10-15"},{"lineNumber":818,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":819,"author":{"gitId":"-"},"content":"      Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":820,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":821,"author":{"gitId":"Py0000"},"content":"#### Use case: UC03 - Edit Contact","lastModifiedDate":"2021-11-02"},{"lineNumber":822,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":823,"author":{"gitId":"Py0000"},"content":"**MSS**","lastModifiedDate":"2021-09-27"},{"lineNumber":824,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":825,"author":{"gitId":"Py0000"},"content":"1. User requests to list contacts (UC06).","lastModifiedDate":"2021-10-15"},{"lineNumber":826,"author":{"gitId":"Py0000"},"content":"2. User requests to edit a contact.","lastModifiedDate":"2021-10-15"},{"lineNumber":827,"author":{"gitId":"Py0000"},"content":"3. FAST displays the updated contact.","lastModifiedDate":"2021-10-15"},{"lineNumber":828,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":829,"author":{"gitId":"Py0000"},"content":"   Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":830,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":831,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":832,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":833,"author":{"gitId":"Py0000"},"content":"* 2a. The given index is invalid.","lastModifiedDate":"2021-10-15"},{"lineNumber":834,"author":{"gitId":"Py0000"},"content":"    * 2a1. FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":835,"author":{"gitId":"Py0000"},"content":"    * 2a2. FAST shows an example of edit contact command to user.","lastModifiedDate":"2021-10-15"},{"lineNumber":836,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":837,"author":{"gitId":"Py0000"},"content":"      Use case ends.","lastModifiedDate":"2021-09-27"},{"lineNumber":838,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":839,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":840,"author":{"gitId":"Py0000"},"content":"* 2b. The given command syntax is invalid.","lastModifiedDate":"2021-10-15"},{"lineNumber":841,"author":{"gitId":"Py0000"},"content":"    * 2b1. FAST displays an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":842,"author":{"gitId":"Py0000"},"content":"    * 2b2. FAST displays an example of the edit contact command to the user.","lastModifiedDate":"2021-10-15"},{"lineNumber":843,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":844,"author":{"gitId":"-"},"content":"      Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":845,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":846,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":847,"author":{"gitId":"Py0000"},"content":"#### Use case: UC04 - Add a remark","lastModifiedDate":"2021-11-02"},{"lineNumber":848,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":849,"author":{"gitId":"Py0000"},"content":"**MSS**","lastModifiedDate":"2021-09-27"},{"lineNumber":850,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":851,"author":{"gitId":"Py0000"},"content":"1. User requests to list persons (UC06).","lastModifiedDate":"2021-10-15"},{"lineNumber":852,"author":{"gitId":"Py0000"},"content":"2. User requests to add a remark to a specific person in the list.","lastModifiedDate":"2021-10-15"},{"lineNumber":853,"author":{"gitId":"Py0000"},"content":"3. FAST displays the new remark in the contact.","lastModifiedDate":"2021-10-15"},{"lineNumber":854,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":855,"author":{"gitId":"Py0000"},"content":"   Use case ends","lastModifiedDate":"2021-09-27"},{"lineNumber":856,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":857,"author":{"gitId":"Py0000"},"content":"**Extensions**","lastModifiedDate":"2021-09-27"},{"lineNumber":858,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":859,"author":{"gitId":"Py0000"},"content":"* 2a. The given index is invalid.","lastModifiedDate":"2021-10-15"},{"lineNumber":860,"author":{"gitId":"Py0000"},"content":"    * 2a1. FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":861,"author":{"gitId":"Py0000"},"content":"    * 2a2. FAST shows an example of remark command to user.","lastModifiedDate":"2021-10-15"},{"lineNumber":862,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":863,"author":{"gitId":"Py0000"},"content":"      Use case ends","lastModifiedDate":"2021-09-27"},{"lineNumber":864,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":865,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":866,"author":{"gitId":"Py0000"},"content":"* 2b. The given command syntax is invalid","lastModifiedDate":"2021-09-27"},{"lineNumber":867,"author":{"gitId":"Py0000"},"content":"    * 2b1. FAST displays an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":868,"author":{"gitId":"Py0000"},"content":"    * 2b2. FAST displays an example of the remark command to the user.","lastModifiedDate":"2021-10-15"},{"lineNumber":869,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":870,"author":{"gitId":"Py0000"},"content":"      Use case ends","lastModifiedDate":"2021-09-27"},{"lineNumber":871,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":872,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":873,"author":{"gitId":"Py0000"},"content":"* 2c. User removes an existing remark","lastModifiedDate":"2021-09-27"},{"lineNumber":874,"author":{"gitId":"Py0000"},"content":"    * 2c1. FAST displays a message that the remark has been removed.","lastModifiedDate":"2021-10-15"},{"lineNumber":875,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":876,"author":{"gitId":"Py0000"},"content":"      Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":877,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":878,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":879,"author":{"gitId":"Py0000"},"content":"#### Use case: UC05 - Find Contact by name","lastModifiedDate":"2021-11-02"},{"lineNumber":880,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":881,"author":{"gitId":"Py0000"},"content":"**MSS**","lastModifiedDate":"2021-09-27"},{"lineNumber":882,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":883,"author":{"gitId":"Py0000"},"content":"1. User searches for a name.","lastModifiedDate":"2021-10-15"},{"lineNumber":884,"author":{"gitId":"squeakysquak"},"content":"2. FAST shows a list of persons with the specified name or people whose name starts with the search query.","lastModifiedDate":"2021-10-19"},{"lineNumber":885,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":886,"author":{"gitId":"Py0000"},"content":"   Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":887,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":888,"author":{"gitId":"Py0000"},"content":"**Extensions**","lastModifiedDate":"2021-09-27"},{"lineNumber":889,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":890,"author":{"gitId":"Py0000"},"content":"* 1a. The given search query is invalid.","lastModifiedDate":"2021-10-15"},{"lineNumber":891,"author":{"gitId":"Py0000"},"content":"    * 1a1. FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":892,"author":{"gitId":"Py0000"},"content":"    * 1a2. FAST shows an example of find command to user.","lastModifiedDate":"2021-10-15"},{"lineNumber":893,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":894,"author":{"gitId":"Py0000"},"content":"      Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":895,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":896,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":897,"author":{"gitId":"Py0000"},"content":"* 1b FAST cannot find any contacts with the given search query.","lastModifiedDate":"2021-10-15"},{"lineNumber":898,"author":{"gitId":"Py0000"},"content":"    * 1b1. FAST displays a message to inform user no contacts that matches the query was found.","lastModifiedDate":"2021-10-15"},{"lineNumber":899,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":900,"author":{"gitId":"Py0000"},"content":"      Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":901,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":902,"author":{"gitId":"Py0000"},"content":"#### Use case: UC06 - List Contacts","lastModifiedDate":"2021-11-02"},{"lineNumber":903,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":904,"author":{"gitId":"Py0000"},"content":"**MSS**","lastModifiedDate":"2021-09-27"},{"lineNumber":905,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":906,"author":{"gitId":"Py0000"},"content":"1. User requests to list contacts.","lastModifiedDate":"2021-10-15"},{"lineNumber":907,"author":{"gitId":"Py0000"},"content":"2. FAST displays a list of contacts.","lastModifiedDate":"2021-10-15"},{"lineNumber":908,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":909,"author":{"gitId":"Py0000"},"content":"   Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":910,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":911,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2021-09-27"},{"lineNumber":912,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":913,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":914,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":915,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":916,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":917,"author":{"gitId":"Py0000"},"content":"#### Use case: UC07 - Add Appointment","lastModifiedDate":"2021-11-02"},{"lineNumber":918,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":919,"author":{"gitId":"Py0000"},"content":"**MSS**","lastModifiedDate":"2021-10-15"},{"lineNumber":920,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":921,"author":{"gitId":"Py0000"},"content":"1. User requests to list persons (UC06)","lastModifiedDate":"2021-10-15"},{"lineNumber":922,"author":{"gitId":"Py0000"},"content":"2. User requests to add a new appointment.","lastModifiedDate":"2021-10-15"},{"lineNumber":923,"author":{"gitId":"Py0000"},"content":"3. FAST displays a message indicating success.","lastModifiedDate":"2021-10-15"},{"lineNumber":924,"author":{"gitId":"Py0000"},"content":"4. FAST displays the new contact below.","lastModifiedDate":"2021-10-15"},{"lineNumber":925,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":926,"author":{"gitId":"Py0000"},"content":"   Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":927,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":928,"author":{"gitId":"Py0000"},"content":"**Extensions**","lastModifiedDate":"2021-10-15"},{"lineNumber":929,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":930,"author":{"gitId":"Py0000"},"content":"* 2a. The given index is invalid.","lastModifiedDate":"2021-10-15"},{"lineNumber":931,"author":{"gitId":"Py0000"},"content":"    * 2a1. FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":932,"author":{"gitId":"Py0000"},"content":"    * 2a2. FAST shows an example of add appointment command to user. ","lastModifiedDate":"2021-10-15"},{"lineNumber":933,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":934,"author":{"gitId":"Py0000"},"content":"* 2b. The given command syntax is invalid.","lastModifiedDate":"2021-10-15"},{"lineNumber":935,"author":{"gitId":"Py0000"},"content":"    * 2b1. FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":936,"author":{"gitId":"Py0000"},"content":"    * 2b2. FAST shows an example of add appointment command to user.","lastModifiedDate":"2021-10-15"},{"lineNumber":937,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":938,"author":{"gitId":"Py0000"},"content":"      Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":939,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":940,"author":{"gitId":"Py0000"},"content":"* 2c. An appointment has already been scheduled.","lastModifiedDate":"2021-10-15"},{"lineNumber":941,"author":{"gitId":"Py0000"},"content":"    * 2c1. FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":942,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":943,"author":{"gitId":"Py0000"},"content":"      Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":944,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":945,"author":{"gitId":"Py0000"},"content":"#### Use case: UC08 - Delete Appointment","lastModifiedDate":"2021-11-02"},{"lineNumber":946,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":947,"author":{"gitId":"Py0000"},"content":"**MSS**","lastModifiedDate":"2021-10-15"},{"lineNumber":948,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":949,"author":{"gitId":"Py0000"},"content":"1. User requests to list persons (UC06)","lastModifiedDate":"2021-10-15"},{"lineNumber":950,"author":{"gitId":"Py0000"},"content":"2. User requests to delete an appointment.","lastModifiedDate":"2021-10-15"},{"lineNumber":951,"author":{"gitId":"Py0000"},"content":"3. FAST displays a message indicating success.","lastModifiedDate":"2021-10-15"},{"lineNumber":952,"author":{"gitId":"Py0000"},"content":"4. FAST displays the new contact below.","lastModifiedDate":"2021-10-15"},{"lineNumber":953,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":954,"author":{"gitId":"Py0000"},"content":"   Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":955,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":956,"author":{"gitId":"Py0000"},"content":"**Extensions**","lastModifiedDate":"2021-10-15"},{"lineNumber":957,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":958,"author":{"gitId":"Py0000"},"content":"* 2a. The given index is invalid.","lastModifiedDate":"2021-10-15"},{"lineNumber":959,"author":{"gitId":"Py0000"},"content":"    * 2a1. FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":960,"author":{"gitId":"Py0000"},"content":"    * 2a2. FAST shows an example of delete appointment command to user.","lastModifiedDate":"2021-10-15"},{"lineNumber":961,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":962,"author":{"gitId":"Py0000"},"content":"* 2b. No appointment scheduled yet.","lastModifiedDate":"2021-10-15"},{"lineNumber":963,"author":{"gitId":"Py0000"},"content":"    * 2b1. FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":964,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":965,"author":{"gitId":"Py0000"},"content":"      Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":966,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":967,"author":{"gitId":"Py0000"},"content":"#### Use case: UC09 - Edit Appointment","lastModifiedDate":"2021-11-02"},{"lineNumber":968,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":969,"author":{"gitId":"Py0000"},"content":"**MSS**","lastModifiedDate":"2021-10-15"},{"lineNumber":970,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":971,"author":{"gitId":"Py0000"},"content":"1. User requests to list persons (UC06)","lastModifiedDate":"2021-10-15"},{"lineNumber":972,"author":{"gitId":"Py0000"},"content":"2. User requests to edit an appointment.","lastModifiedDate":"2021-10-15"},{"lineNumber":973,"author":{"gitId":"Py0000"},"content":"3. FAST displays a message indicating success.","lastModifiedDate":"2021-10-15"},{"lineNumber":974,"author":{"gitId":"Py0000"},"content":"4. FAST displays the new contact below.","lastModifiedDate":"2021-10-15"},{"lineNumber":975,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":976,"author":{"gitId":"Py0000"},"content":"   Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":977,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":978,"author":{"gitId":"Py0000"},"content":"**Extensions**","lastModifiedDate":"2021-10-15"},{"lineNumber":979,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":980,"author":{"gitId":"Py0000"},"content":"* 2a. The given index is invalid.","lastModifiedDate":"2021-10-15"},{"lineNumber":981,"author":{"gitId":"Py0000"},"content":"    * 2a1. FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":982,"author":{"gitId":"Py0000"},"content":"    * 2a2. FAST shows an example of edit appointment command to user.","lastModifiedDate":"2021-10-15"},{"lineNumber":983,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":984,"author":{"gitId":"Py0000"},"content":"* 2b. The given command syntax is invalid.","lastModifiedDate":"2021-10-15"},{"lineNumber":985,"author":{"gitId":"Py0000"},"content":"    * 2b1. FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":986,"author":{"gitId":"Py0000"},"content":"    * 2b2. FAST shows an example of edit appointment command to user.","lastModifiedDate":"2021-10-15"},{"lineNumber":987,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":988,"author":{"gitId":"Py0000"},"content":"      Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":989,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":990,"author":{"gitId":"Py0000"},"content":"* 2c. No appointment scheduled yet.","lastModifiedDate":"2021-10-15"},{"lineNumber":991,"author":{"gitId":"Py0000"},"content":"    * 2c1.FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":992,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":993,"author":{"gitId":"Py0000"},"content":"      Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":994,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":995,"author":{"gitId":"Py0000"},"content":"#### Use case: UC10 - Mark Appointment","lastModifiedDate":"2021-11-02"},{"lineNumber":996,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":997,"author":{"gitId":"Py0000"},"content":"**MSS**","lastModifiedDate":"2021-10-15"},{"lineNumber":998,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":999,"author":{"gitId":"Py0000"},"content":"1. User requests to list persons (UC06)","lastModifiedDate":"2021-10-15"},{"lineNumber":1000,"author":{"gitId":"Py0000"},"content":"2. User requests to mark an appointment.","lastModifiedDate":"2021-11-02"},{"lineNumber":1001,"author":{"gitId":"Py0000"},"content":"3. FAST displays a message indicating success.","lastModifiedDate":"2021-10-15"},{"lineNumber":1002,"author":{"gitId":"Py0000"},"content":"4. FAST displays the new contact below.","lastModifiedDate":"2021-10-15"},{"lineNumber":1003,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":1004,"author":{"gitId":"Py0000"},"content":"   Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":1005,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":1006,"author":{"gitId":"Py0000"},"content":"**Extensions**","lastModifiedDate":"2021-10-15"},{"lineNumber":1007,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":1008,"author":{"gitId":"Py0000"},"content":"* 2a. The given index is invalid.","lastModifiedDate":"2021-10-15"},{"lineNumber":1009,"author":{"gitId":"Py0000"},"content":"    * 2a1. FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":1010,"author":{"gitId":"Py0000"},"content":"    * 2a2. FAST shows an example of mark appointment command to user.","lastModifiedDate":"2021-11-02"},{"lineNumber":1011,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":1012,"author":{"gitId":"Py0000"},"content":"* 2b. No appointment scheduled yet.","lastModifiedDate":"2021-10-15"},{"lineNumber":1013,"author":{"gitId":"Py0000"},"content":"    * 2b1. FAST shows an error message.","lastModifiedDate":"2021-10-15"},{"lineNumber":1014,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":1015,"author":{"gitId":"Py0000"},"content":"      Use case ends.","lastModifiedDate":"2021-10-15"},{"lineNumber":1016,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1017,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1018,"author":{"gitId":"Py0000"},"content":"#### Use case: UC11 - Unmark Appointment","lastModifiedDate":"2021-11-02"},{"lineNumber":1019,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1020,"author":{"gitId":"Py0000"},"content":"**MSS**","lastModifiedDate":"2021-11-02"},{"lineNumber":1021,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1022,"author":{"gitId":"Py0000"},"content":"1. User requests to list persons (UC06)","lastModifiedDate":"2021-11-02"},{"lineNumber":1023,"author":{"gitId":"Py0000"},"content":"2. User requests to unmark an appointment.","lastModifiedDate":"2021-11-02"},{"lineNumber":1024,"author":{"gitId":"Py0000"},"content":"3. FAST displays a message indicating success.","lastModifiedDate":"2021-11-02"},{"lineNumber":1025,"author":{"gitId":"Py0000"},"content":"4. FAST displays the new contact below.","lastModifiedDate":"2021-11-02"},{"lineNumber":1026,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1027,"author":{"gitId":"Py0000"},"content":"   Use case ends.","lastModifiedDate":"2021-11-02"},{"lineNumber":1028,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1029,"author":{"gitId":"Py0000"},"content":"**Extensions**","lastModifiedDate":"2021-11-02"},{"lineNumber":1030,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1031,"author":{"gitId":"Py0000"},"content":"* 2a. The given index is invalid.","lastModifiedDate":"2021-11-02"},{"lineNumber":1032,"author":{"gitId":"Py0000"},"content":"    * 2a1. FAST shows an error message.","lastModifiedDate":"2021-11-02"},{"lineNumber":1033,"author":{"gitId":"Py0000"},"content":"    * 2a2. FAST shows an example of unmark appointment command to user.","lastModifiedDate":"2021-11-02"},{"lineNumber":1034,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1035,"author":{"gitId":"Py0000"},"content":"* 2b. Appointment already exist.","lastModifiedDate":"2021-11-02"},{"lineNumber":1036,"author":{"gitId":"Py0000"},"content":"    * 2b1. FAST shows an error message.","lastModifiedDate":"2021-11-02"},{"lineNumber":1037,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1038,"author":{"gitId":"Py0000"},"content":"      Use case ends.","lastModifiedDate":"2021-11-02"},{"lineNumber":1039,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1040,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1041,"author":{"gitId":"Py0000"},"content":"#### Use case: UC12 - Sort contacts","lastModifiedDate":"2021-11-02"},{"lineNumber":1042,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":1043,"author":{"gitId":"Th-429B"},"content":"**MSS**","lastModifiedDate":"2021-10-17"},{"lineNumber":1044,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":1045,"author":{"gitId":"Th-429B"},"content":"1. User requests to sort persons","lastModifiedDate":"2021-10-17"},{"lineNumber":1046,"author":{"gitId":"Th-429B"},"content":"2. FAST displays a list of contacts sorted by the given keyword.","lastModifiedDate":"2021-10-17"},{"lineNumber":1047,"author":{"gitId":"Th-429B"},"content":"   Use case ends.","lastModifiedDate":"2021-10-17"},{"lineNumber":1048,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":1049,"author":{"gitId":"Th-429B"},"content":"**Extensions**","lastModifiedDate":"2021-10-17"},{"lineNumber":1050,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":1051,"author":{"gitId":"Th-429B"},"content":"* 2a. The given command syntax is invalid.","lastModifiedDate":"2021-10-17"},{"lineNumber":1052,"author":{"gitId":"Th-429B"},"content":"    * 2a1. FAST shows an error message.","lastModifiedDate":"2021-10-17"},{"lineNumber":1053,"author":{"gitId":"Th-429B"},"content":"    * 2a2. FAST shows an example of sort command to user.","lastModifiedDate":"2021-10-17"},{"lineNumber":1054,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":1055,"author":{"gitId":"Th-429B"},"content":"* 2b. The list is empty.","lastModifiedDate":"2021-10-17"},{"lineNumber":1056,"author":{"gitId":"Th-429B"},"content":"      Use case ends.","lastModifiedDate":"2021-10-17"},{"lineNumber":1057,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":1058,"author":{"gitId":"Py0000"},"content":"#### Use case: UC13 - Find Contact by priority","lastModifiedDate":"2021-11-02"},{"lineNumber":1059,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1060,"author":{"gitId":"squeakysquak"},"content":"**MSS**","lastModifiedDate":"2021-10-19"},{"lineNumber":1061,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1062,"author":{"gitId":"squeakysquak"},"content":"1. User searches for a priority.","lastModifiedDate":"2021-10-19"},{"lineNumber":1063,"author":{"gitId":"squeakysquak"},"content":"2. FAST shows a list of persons with the specified priority.","lastModifiedDate":"2021-10-19"},{"lineNumber":1064,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1065,"author":{"gitId":"squeakysquak"},"content":"   Use case ends.","lastModifiedDate":"2021-10-19"},{"lineNumber":1066,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1067,"author":{"gitId":"squeakysquak"},"content":"**Extensions**","lastModifiedDate":"2021-10-19"},{"lineNumber":1068,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1069,"author":{"gitId":"squeakysquak"},"content":"* 1a. The given priority is invalid and does not follow the format of a priority tag.","lastModifiedDate":"2021-10-19"},{"lineNumber":1070,"author":{"gitId":"squeakysquak"},"content":"    * 1a1. FAST shows an error message.","lastModifiedDate":"2021-10-19"},{"lineNumber":1071,"author":{"gitId":"squeakysquak"},"content":"    * 1a2. FAST shows an example of find command and correct format for priority to user.","lastModifiedDate":"2021-10-19"},{"lineNumber":1072,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1073,"author":{"gitId":"squeakysquak"},"content":"      Use case ends.","lastModifiedDate":"2021-10-19"},{"lineNumber":1074,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1075,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1076,"author":{"gitId":"squeakysquak"},"content":"* 1b FAST cannot find any contacts with the given priority.","lastModifiedDate":"2021-10-19"},{"lineNumber":1077,"author":{"gitId":"squeakysquak"},"content":"    * 1b1. FAST displays a message to inform user no contacts with the given priority were found.","lastModifiedDate":"2021-10-19"},{"lineNumber":1078,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1079,"author":{"gitId":"squeakysquak"},"content":"      Use case ends.","lastModifiedDate":"2021-10-19"},{"lineNumber":1080,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1081,"author":{"gitId":"Py0000"},"content":"#### Use case: UC14 - Find Contact by tag","lastModifiedDate":"2021-11-02"},{"lineNumber":1082,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1083,"author":{"gitId":"squeakysquak"},"content":"**MSS**","lastModifiedDate":"2021-10-19"},{"lineNumber":1084,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1085,"author":{"gitId":"squeakysquak"},"content":"1. User searches for some tags.","lastModifiedDate":"2021-10-19"},{"lineNumber":1086,"author":{"gitId":"squeakysquak"},"content":"2. FAST shows a list of persons with the specified tags.","lastModifiedDate":"2021-10-19"},{"lineNumber":1087,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1088,"author":{"gitId":"squeakysquak"},"content":"   Use case ends.","lastModifiedDate":"2021-10-19"},{"lineNumber":1089,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1090,"author":{"gitId":"squeakysquak"},"content":"**Extensions**","lastModifiedDate":"2021-10-19"},{"lineNumber":1091,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1092,"author":{"gitId":"squeakysquak"},"content":"* 1a. The given tags are invalid.","lastModifiedDate":"2021-10-19"},{"lineNumber":1093,"author":{"gitId":"squeakysquak"},"content":"    * 1a1. FAST shows an error message.","lastModifiedDate":"2021-10-19"},{"lineNumber":1094,"author":{"gitId":"squeakysquak"},"content":"    * 1a2. FAST shows an example of find command.","lastModifiedDate":"2021-10-19"},{"lineNumber":1095,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1096,"author":{"gitId":"squeakysquak"},"content":"      Use case ends.","lastModifiedDate":"2021-10-19"},{"lineNumber":1097,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1098,"author":{"gitId":"Py0000"},"content":"#### Use case: UC15 - Find Contact by remark","lastModifiedDate":"2021-11-02"},{"lineNumber":1099,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1100,"author":{"gitId":"squeakysquak"},"content":"**MSS**","lastModifiedDate":"2021-10-19"},{"lineNumber":1101,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1102,"author":{"gitId":"squeakysquak"},"content":"1. User searches for a remark.","lastModifiedDate":"2021-10-19"},{"lineNumber":1103,"author":{"gitId":"squeakysquak"},"content":"2. FAST shows a list of persons whose remarks contain the searched remark.","lastModifiedDate":"2021-10-19"},{"lineNumber":1104,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1105,"author":{"gitId":"squeakysquak"},"content":"   Use case ends.","lastModifiedDate":"2021-10-19"},{"lineNumber":1106,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1107,"author":{"gitId":"squeakysquak"},"content":"**Extensions**","lastModifiedDate":"2021-10-19"},{"lineNumber":1108,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1109,"author":{"gitId":"squeakysquak"},"content":"* 1a. The given remark is invalid.","lastModifiedDate":"2021-10-19"},{"lineNumber":1110,"author":{"gitId":"squeakysquak"},"content":"    * 1a1. FAST shows an error message.","lastModifiedDate":"2021-10-19"},{"lineNumber":1111,"author":{"gitId":"squeakysquak"},"content":"    * 1a2. FAST shows an example of find command.","lastModifiedDate":"2021-10-19"},{"lineNumber":1112,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1113,"author":{"gitId":"squeakysquak"},"content":"      Use case ends.","lastModifiedDate":"2021-10-19"},{"lineNumber":1114,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1115,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1116,"author":{"gitId":"squeakysquak"},"content":"* 1b FAST cannot find any contacts with the given remark.","lastModifiedDate":"2021-10-19"},{"lineNumber":1117,"author":{"gitId":"squeakysquak"},"content":"    * 1b1. FAST displays a message to inform user no contacts with the given remark were found.","lastModifiedDate":"2021-10-19"},{"lineNumber":1118,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1119,"author":{"gitId":"squeakysquak"},"content":"      Use case ends.","lastModifiedDate":"2021-10-19"},{"lineNumber":1120,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1121,"author":{"gitId":"Py0000"},"content":"#### Use case: UC16 - Help command","lastModifiedDate":"2021-11-02"},{"lineNumber":1122,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":1123,"author":{"gitId":"Cyn7hius"},"content":"**MSS**","lastModifiedDate":"2021-10-20"},{"lineNumber":1124,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":1125,"author":{"gitId":"Cyn7hius"},"content":"1. User requests to open the help window.","lastModifiedDate":"2021-10-20"},{"lineNumber":1126,"author":{"gitId":"Cyn7hius"},"content":"2. FAST opens a new help window. Use case ends.","lastModifiedDate":"2021-10-20"},{"lineNumber":1127,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":1128,"author":{"gitId":"Cyn7hius"},"content":"**Extension**","lastModifiedDate":"2021-10-20"},{"lineNumber":1129,"author":{"gitId":"Cyn7hius"},"content":"* 1a. There is already a help window opened.","lastModifiedDate":"2021-10-20"},{"lineNumber":1130,"author":{"gitId":"Cyn7hius"},"content":"    * 1a1. FAST focuses on the existing help window. Use case ends.","lastModifiedDate":"2021-10-20"},{"lineNumber":1131,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":1132,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":1133,"author":{"gitId":"Py0000"},"content":"#### Use case: U17 - Statistics window","lastModifiedDate":"2021-11-02"},{"lineNumber":1134,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":1135,"author":{"gitId":"Cyn7hius"},"content":"**MSS**","lastModifiedDate":"2021-10-20"},{"lineNumber":1136,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":1137,"author":{"gitId":"Cyn7hius"},"content":"1. User requests to open the stats window.","lastModifiedDate":"2021-10-20"},{"lineNumber":1138,"author":{"gitId":"Cyn7hius"},"content":"2. FAST opens a new stats window. Use case ends.","lastModifiedDate":"2021-10-20"},{"lineNumber":1139,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":1140,"author":{"gitId":"Cyn7hius"},"content":"**Extension**","lastModifiedDate":"2021-10-20"},{"lineNumber":1141,"author":{"gitId":"Cyn7hius"},"content":"* 1a. There is already a stats window opened.","lastModifiedDate":"2021-10-20"},{"lineNumber":1142,"author":{"gitId":"Cyn7hius"},"content":"    * 1a1. FAST updates and focuses on the existing help window. Use case ends.","lastModifiedDate":"2021-10-20"},{"lineNumber":1143,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":1144,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":1145,"author":{"gitId":"Py0000"},"content":"#### Use case: UC18 - Edit tags of a contact","lastModifiedDate":"2021-11-02"},{"lineNumber":1146,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1147,"author":{"gitId":"trash-bin99"},"content":"**MSS**","lastModifiedDate":"2021-10-19"},{"lineNumber":1148,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1149,"author":{"gitId":"trash-bin99"},"content":"1. User requests to list contacts (UC06)","lastModifiedDate":"2021-10-19"},{"lineNumber":1150,"author":{"gitId":"trash-bin99"},"content":"2. User requests to edit tags of a contact","lastModifiedDate":"2021-10-19"},{"lineNumber":1151,"author":{"gitId":"trash-bin99"},"content":"3. FAST displays a message indicating success.","lastModifiedDate":"2021-10-19"},{"lineNumber":1152,"author":{"gitId":"trash-bin99"},"content":"4. FAST displays the updated contact below.","lastModifiedDate":"2021-10-19"},{"lineNumber":1153,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1154,"author":{"gitId":"trash-bin99"},"content":"  Use case ends.","lastModifiedDate":"2021-10-20"},{"lineNumber":1155,"author":{"gitId":"trash-bin99"},"content":"  ","lastModifiedDate":"2021-10-20"},{"lineNumber":1156,"author":{"gitId":"trash-bin99"},"content":"**Extensions**","lastModifiedDate":"2021-10-19"},{"lineNumber":1157,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1158,"author":{"gitId":"trash-bin99"},"content":"* 2a. The given index is invalid.","lastModifiedDate":"2021-10-19"},{"lineNumber":1159,"author":{"gitId":"trash-bin99"},"content":"    * 2a1. FAST shows an error message.","lastModifiedDate":"2021-10-19"},{"lineNumber":1160,"author":{"gitId":"trash-bin99"},"content":"    * 2a2. FAST shows an example of the tag command to the user.","lastModifiedDate":"2021-10-19"},{"lineNumber":1161,"author":{"gitId":"trash-bin99"},"content":"    ","lastModifiedDate":"2021-10-19"},{"lineNumber":1162,"author":{"gitId":"trash-bin99"},"content":"      Use case ends.","lastModifiedDate":"2021-10-19"},{"lineNumber":1163,"author":{"gitId":"trash-bin99"},"content":"    ","lastModifiedDate":"2021-10-19"},{"lineNumber":1164,"author":{"gitId":"trash-bin99"},"content":"* 2b. A tag to be added to the specified contact already exists.","lastModifiedDate":"2021-10-19"},{"lineNumber":1165,"author":{"gitId":"trash-bin99"},"content":"    * 2b1. FAST shows an error message to the user that the tag already exists.","lastModifiedDate":"2021-10-19"},{"lineNumber":1166,"author":{"gitId":"trash-bin99"},"content":"    ","lastModifiedDate":"2021-10-19"},{"lineNumber":1167,"author":{"gitId":"trash-bin99"},"content":"      Use case ends.","lastModifiedDate":"2021-10-19"},{"lineNumber":1168,"author":{"gitId":"trash-bin99"},"content":"    ","lastModifiedDate":"2021-10-19"},{"lineNumber":1169,"author":{"gitId":"trash-bin99"},"content":"* 2c. A tag to be deleted from the specified contact does not exist.","lastModifiedDate":"2021-10-19"},{"lineNumber":1170,"author":{"gitId":"trash-bin99"},"content":"    * 2c1. FAST shows an error message to the user that the tag does not exist.","lastModifiedDate":"2021-10-19"},{"lineNumber":1171,"author":{"gitId":"trash-bin99"},"content":"    ","lastModifiedDate":"2021-10-19"},{"lineNumber":1172,"author":{"gitId":"trash-bin99"},"content":"      Use case ends.","lastModifiedDate":"2021-10-19"},{"lineNumber":1173,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1174,"author":{"gitId":"trash-bin99"},"content":"* 2d. More than one Priority tag is added to a contact.","lastModifiedDate":"2021-10-19"},{"lineNumber":1175,"author":{"gitId":"trash-bin99"},"content":"    * 2d1. FAST shows an error message to the user that each contact may only have one Priority tag.","lastModifiedDate":"2021-10-19"},{"lineNumber":1176,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1177,"author":{"gitId":"trash-bin99"},"content":"      Use case ends.","lastModifiedDate":"2021-10-19"},{"lineNumber":1178,"author":{"gitId":"trash-bin99"},"content":"    ","lastModifiedDate":"2021-10-19"},{"lineNumber":1179,"author":{"gitId":"trash-bin99"},"content":"* 2e. More than one of each Insurance Plan tag is added to a contact.","lastModifiedDate":"2021-10-19"},{"lineNumber":1180,"author":{"gitId":"trash-bin99"},"content":"    * 2e1. FAST shows an error message to the user that each contact may only have one of each Investment Plan tag.    ","lastModifiedDate":"2021-10-19"},{"lineNumber":1181,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":1182,"author":{"gitId":"trash-bin99"},"content":"      Use case ends.","lastModifiedDate":"2021-10-20"},{"lineNumber":1183,"author":{"gitId":"trash-bin99"},"content":"    ","lastModifiedDate":"2021-10-20"},{"lineNumber":1184,"author":{"gitId":"trash-bin99"},"content":"* 2f. Tag name exceeds maximum length of 20 characters.","lastModifiedDate":"2021-10-20"},{"lineNumber":1185,"author":{"gitId":"trash-bin99"},"content":"    * 2f1. FAST shows an error message to the user that the maximum tag length is 20 characters.","lastModifiedDate":"2021-10-20"},{"lineNumber":1186,"author":{"gitId":"trash-bin99"},"content":"    ","lastModifiedDate":"2021-10-20"},{"lineNumber":1187,"author":{"gitId":"trash-bin99"},"content":"      Use case ends.","lastModifiedDate":"2021-10-20"},{"lineNumber":1188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":1189,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":1190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1191,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":1192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1193,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":1194,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":1195,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":1196,"author":{"gitId":"Th-429B"},"content":"4.  Should work fully offline, and not rely on external URLs for important guides and documentation","lastModifiedDate":"2021-09-27"},{"lineNumber":1197,"author":{"gitId":"Th-429B"},"content":"5.  Application should be usable by a single user","lastModifiedDate":"2021-09-27"},{"lineNumber":1198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1199,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":1200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1201,"author":{"gitId":"Th-429B"},"content":"* **Contact**: A client to be stored in FAST, includes information on the client","lastModifiedDate":"2021-09-27"},{"lineNumber":1202,"author":{"gitId":"Th-429B"},"content":"* **CLI**: Command Line Interface","lastModifiedDate":"2021-09-27"},{"lineNumber":1203,"author":{"gitId":"Th-429B"},"content":"* **FAST**: Financial Advisor Smart Tracker, the name of this software","lastModifiedDate":"2021-09-27"},{"lineNumber":1204,"author":{"gitId":"Th-429B"},"content":"* **FXML**: FX Markup Language, the format in which the GUI layout is stored in","lastModifiedDate":"2021-09-27"},{"lineNumber":1205,"author":{"gitId":"Th-429B"},"content":"* **Java 11**: Version of the programming language, used in the coding of this software","lastModifiedDate":"2021-09-27"},{"lineNumber":1206,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":1207,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":1208,"author":{"gitId":"Th-429B"},"content":"* **Remark**: A comment/note about a specific contact","lastModifiedDate":"2021-09-27"},{"lineNumber":1209,"author":{"gitId":"trash-bin99"},"content":"  **Tag** A short note about a specific contact, used for sorting and grouping contacts","lastModifiedDate":"2021-10-20"},{"lineNumber":1210,"author":{"gitId":"Th-429B"},"content":"* **URL**: Uniform Resource Locator, known more commonly as a link to a website.","lastModifiedDate":"2021-09-27"},{"lineNumber":1211,"author":{"gitId":"Th-429B"},"content":"* **XML**: Extensible MarkUp Language, used to format the layout of this software","lastModifiedDate":"2021-09-27"},{"lineNumber":1212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1214,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":1215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1216,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":1217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1218,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":1219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1220,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":1221,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":1222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1223,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1225,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":1226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1227,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":1228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1229,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":1230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1231,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":1232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1233,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":1234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1235,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":1236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1237,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1238,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":1239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1240,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":1241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1242,"author":{"gitId":"Py0000"},"content":"### Adding a Client","lastModifiedDate":"2021-11-02"},{"lineNumber":1243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1244,"author":{"gitId":"Py0000"},"content":"1. Adds a new Client to FAST.","lastModifiedDate":"2021-11-02"},{"lineNumber":1245,"author":{"gitId":"Py0000"},"content":"   1. **Prerequisites**: Arguments are valid, compulsory parameters are provided. Client added must not be a duplicated client.","lastModifiedDate":"2021-11-02"},{"lineNumber":1246,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1247,"author":{"gitId":"Py0000"},"content":"   2. **Test case**: `add n/Matthew p/98523146 e/Matt@example.com a/Seletar Lane 12`\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1248,"author":{"gitId":"Py0000"},"content":"      **Expected**: Adds a client with name `Matthew`, phone `98523146`, email `Matt@example.com` and address `Seletar Lane 12`. Success message with details of the newly added client will be shown.","lastModifiedDate":"2021-11-02"},{"lineNumber":1249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1250,"author":{"gitId":"Py0000"},"content":"   3. **Test case**: `add n/Matthew`\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1251,"author":{"gitId":"Py0000"},"content":"      **Expected**: No client added. Error message is shown.","lastModifiedDate":"2021-11-02"},{"lineNumber":1252,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1253,"author":{"gitId":"Py0000"},"content":"   4. **Other incorrect add commands to try**: `add n/Matthew p/98523146... e/Matt@example.com a/Seletar Lane 12`, `add n/Matthew... p/98523146 e/Matt@example.com a/Seletar Lane 12`, `add n/Matthew p/98523146 e/Matt...@example.com a/Seletar Lane 12`, `add n/Matthew p/98523146 e/Matt@example.com a/Seletar Lane 12...` (where ... represents string that exceeds the character limit). \u003cbr\u003e ","lastModifiedDate":"2021-11-02"},{"lineNumber":1254,"author":{"gitId":"Py0000"},"content":"      **Expected**: Similar to previous (in Point 3).","lastModifiedDate":"2021-11-02"},{"lineNumber":1255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1256,"author":{"gitId":"Py0000"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1257,"author":{"gitId":"Py0000"},"content":":information: ","lastModifiedDate":"2021-11-02"},{"lineNumber":1258,"author":{"gitId":"Py0000"},"content":"Character limit:","lastModifiedDate":"2021-11-02"},{"lineNumber":1259,"author":{"gitId":"Py0000"},"content":"1) Name - 0 to 50 characters","lastModifiedDate":"2021-11-02"},{"lineNumber":1260,"author":{"gitId":"Py0000"},"content":"2) Phone - 3 to 20 digits","lastModifiedDate":"2021-11-02"},{"lineNumber":1261,"author":{"gitId":"Py0000"},"content":"3) Email - max 100 characters (at least 2 for domain portion, before @ symbol)","lastModifiedDate":"2021-11-02"},{"lineNumber":1262,"author":{"gitId":"Py0000"},"content":"4) Address - max 100 characters","lastModifiedDate":"2021-11-02"},{"lineNumber":1263,"author":{"gitId":"Py0000"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1265,"author":{"gitId":"Py0000"},"content":"### Editing a Client","lastModifiedDate":"2021-11-02"},{"lineNumber":1266,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1267,"author":{"gitId":"Py0000"},"content":"1. Edits an existing Client in FAST.","lastModifiedDate":"2021-11-02"},{"lineNumber":1268,"author":{"gitId":"Py0000"},"content":"    1. **Prerequisites**: Arguments are valid, compulsory parameters are provided. Multiple clients in the list.","lastModifiedDate":"2021-11-02"},{"lineNumber":1269,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1270,"author":{"gitId":"Py0000"},"content":"    2. **Test case**: `edit 1 n/Mattias`\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1271,"author":{"gitId":"Py0000"},"content":"       **Expected**: Edits the name of the first client in the displayed list. Success message with details of the edited client is shown.","lastModifiedDate":"2021-11-02"},{"lineNumber":1272,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1273,"author":{"gitId":"Py0000"},"content":"    3. **Test case**: `edit n/Mattias`\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1274,"author":{"gitId":"Py0000"},"content":"       **Expected**: No client added. Error message is shown.","lastModifiedDate":"2021-11-02"},{"lineNumber":1275,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1276,"author":{"gitId":"Py0000"},"content":"    4. **Other incorrect edit commands to try**: `edit 1 n/ `, `edit 1 p/11`, `edit 1 e/mattias@u` \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1277,"author":{"gitId":"Py0000"},"content":"       **Expected**: Similar to previous (in Point 3).","lastModifiedDate":"2021-11-02"},{"lineNumber":1278,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1279,"author":{"gitId":"Py0000"},"content":"### Deleting a Client","lastModifiedDate":"2021-11-02"},{"lineNumber":1280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1281,"author":{"gitId":"Py0000"},"content":"#### Single delete","lastModifiedDate":"2021-11-02"},{"lineNumber":1282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1283,"author":{"gitId":"Py0000"},"content":"1. Deleting a client while all clients are being shown","lastModifiedDate":"2021-11-02"},{"lineNumber":1284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1285,"author":{"gitId":"Py0000"},"content":"   1. **Prerequisites**: List all clients using the `list` command. Multiple clients in the list.","lastModifiedDate":"2021-11-02"},{"lineNumber":1286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1287,"author":{"gitId":"Py0000"},"content":"   1. **Test case**: `del 1`\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1288,"author":{"gitId":"Py0000"},"content":"      **Expected**: First contact is deleted from the list. Success message with details of the deleted contact shown in the status message.","lastModifiedDate":"2021-11-02"},{"lineNumber":1289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1290,"author":{"gitId":"Py0000"},"content":"   1. **Test case**: `del 0`\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1291,"author":{"gitId":"Py0000"},"content":"      **Expected**: No person is deleted. Error message displayed.","lastModifiedDate":"2021-11-02"},{"lineNumber":1292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1293,"author":{"gitId":"Py0000"},"content":"   1. **Other incorrect delete commands to try**: `del`, `del x`(where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1294,"author":{"gitId":"Py0000"},"content":"      **Expected**: Similar to previous (in Point 3).","lastModifiedDate":"2021-11-02"},{"lineNumber":1295,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1296,"author":{"gitId":"Py0000"},"content":"#### Multiple delete","lastModifiedDate":"2021-11-02"},{"lineNumber":1297,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1298,"author":{"gitId":"Py0000"},"content":"1. Deleting multiple clients using range input while all clients are being shown","lastModifiedDate":"2021-11-02"},{"lineNumber":1299,"author":{"gitId":"Py0000"},"content":"   1. **Prerequisites**: List all clients using the `list` command. Multiple clients in the list. Argument is valid.","lastModifiedDate":"2021-11-02"},{"lineNumber":1300,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1301,"author":{"gitId":"Py0000"},"content":"   2. **Test case**: `del 1-3`\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1302,"author":{"gitId":"Py0000"},"content":"      **Expected**: First, second and third contacts are deleted from the list. Success message showing number of contacts deleted is shown .","lastModifiedDate":"2021-11-02"},{"lineNumber":1303,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1304,"author":{"gitId":"Py0000"},"content":"   3. **Test case**: `del 3-1`\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1305,"author":{"gitId":"Py0000"},"content":"      **Expected**: No client is deleted. Error message displayed.","lastModifiedDate":"2021-11-02"},{"lineNumber":1306,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1307,"author":{"gitId":"Py0000"},"content":"   4. **Other incorrect delete commands to try**: `del`, `del 1-`, `del 1-x`(where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1308,"author":{"gitId":"Py0000"},"content":"      **Expected**: Similar to previous (in Point 3).","lastModifiedDate":"2021-11-02"},{"lineNumber":1309,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1310,"author":{"gitId":"Py0000"},"content":"2. Deleting multiple clients using several indexes input while all clients are being shown","lastModifiedDate":"2021-11-02"},{"lineNumber":1311,"author":{"gitId":"Py0000"},"content":"    1. **Prerequisites**: List all clients using the `list` command. Multiple clients in the list. Argument is valid.","lastModifiedDate":"2021-11-02"},{"lineNumber":1312,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1313,"author":{"gitId":"Py0000"},"content":"    2. **Test case**: `del 1 3 5`\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1314,"author":{"gitId":"Py0000"},"content":"       **Expected**: First, third and fifth contacts are deleted from the list. Success message showing number of contacts deleted is shown .","lastModifiedDate":"2021-11-02"},{"lineNumber":1315,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1316,"author":{"gitId":"Py0000"},"content":"    3. **Test case**: `del 1 0 `\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1317,"author":{"gitId":"Py0000"},"content":"       **Expected**: No client is deleted. Error message displayed.","lastModifiedDate":"2021-11-02"},{"lineNumber":1318,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1319,"author":{"gitId":"Py0000"},"content":"    4. **Other incorrect delete commands to try**: `del`, `del 1 x 2`(where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1320,"author":{"gitId":"Py0000"},"content":"       **Expected**: Similar to previous.","lastModifiedDate":"2021-11-02"},{"lineNumber":1321,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1322,"author":{"gitId":"Py0000"},"content":"### Adding a remark","lastModifiedDate":"2021-11-02"},{"lineNumber":1323,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1324,"author":{"gitId":"Py0000"},"content":"1. Adds a remark to an existing Client in FAST.","lastModifiedDate":"2021-11-02"},{"lineNumber":1325,"author":{"gitId":"Py0000"},"content":"    1. **Prerequisites**: Arguments are valid, compulsory parameters are provided. Multiple clients in the list.","lastModifiedDate":"2021-11-02"},{"lineNumber":1326,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1327,"author":{"gitId":"Py0000"},"content":"    2. **Test case**: `rmk 1 r/He loves to sleep.`\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1328,"author":{"gitId":"Py0000"},"content":"       **Expected**: Add a remark `He loves to sleep` to the first client in the displayed list. Success message with details of the client and the new remark is shown.","lastModifiedDate":"2021-11-02"},{"lineNumber":1329,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1330,"author":{"gitId":"Py0000"},"content":"    3. **Test case**: `rmk 1 r/`\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1331,"author":{"gitId":"Py0000"},"content":"       **Expected**: Removes the remark of the first client in the displayed list. Success message with details of the client and an empty remark is shown.","lastModifiedDate":"2021-11-02"},{"lineNumber":1332,"author":{"gitId":"Py0000"},"content":"    4. **Test case**: `rmk 1`\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1333,"author":{"gitId":"Py0000"},"content":"       **Expected**: No remark added. Error message is shown.","lastModifiedDate":"2021-11-02"},{"lineNumber":1334,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1335,"author":{"gitId":"Py0000"},"content":"    5. **Other incorrect remark commands to try**: `rmk r/ `, `rmk 1 r/remark...`(where remark... represents a remark longer than 45 characters) \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1336,"author":{"gitId":"Py0000"},"content":"       **Expected**: Similar to previous (in Point 4).","lastModifiedDate":"2021-11-02"},{"lineNumber":1337,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1338,"author":{"gitId":"Py0000"},"content":"### Appointment Feature","lastModifiedDate":"2021-11-02"},{"lineNumber":1339,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1340,"author":{"gitId":"Py0000"},"content":"#### Adding an appointment","lastModifiedDate":"2021-11-02"},{"lineNumber":1341,"author":{"gitId":"Py0000"},"content":"1. Adds a new appointment to FAST","lastModifiedDate":"2021-11-02"},{"lineNumber":1342,"author":{"gitId":"Py0000"},"content":"   1. **Prerequisites**: Arguments are valid, compulsory parameters provided and appointment does not exist for the specified client yet.","lastModifiedDate":"2021-11-02"},{"lineNumber":1343,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1344,"author":{"gitId":"Py0000"},"content":"   2. **Test Case**: `aa 1 d/2030-05-15 t/07:00 v/NUS` \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1345,"author":{"gitId":"Py0000"},"content":"   **Expected**: Adds an appointment to the first client in the displayed list with date `15 May 2030`, time `0700hrs` and venue `NUS`. Success message with details of the client name and appointment added is shown.","lastModifiedDate":"2021-11-02"},{"lineNumber":1346,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1347,"author":{"gitId":"Py0000"},"content":"   3. **Test Case**: `aa 1 v/NUS` \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1348,"author":{"gitId":"Py0000"},"content":"      **Expected**: No appointment added. Error message displayed.","lastModifiedDate":"2021-11-02"},{"lineNumber":1349,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1350,"author":{"gitId":"Py0000"},"content":"   4. **Other invalid commands to try**: `aa d/2023-05-15`, `aa 1 d/2019-05-15`,  `aa 1 d/2023-15-05`, `aa 1 d/2023-05-15 t/0700`, `aa y d/2023-05-15`(where y is an index with an appointment), `aa 1 v/venue...`(where venue... is longer than 20 characters) \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1351,"author":{"gitId":"Py0000"},"content":"      **Expected**: Similar to previous testcase (in Point 3).","lastModifiedDate":"2021-11-02"},{"lineNumber":1352,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1353,"author":{"gitId":"Py0000"},"content":"#### Editing an appointment","lastModifiedDate":"2021-11-02"},{"lineNumber":1354,"author":{"gitId":"Py0000"},"content":"1. Edits an existing appointment in FAST","lastModifiedDate":"2021-11-02"},{"lineNumber":1355,"author":{"gitId":"Py0000"},"content":"    1. **Prerequisites**: Arguments are valid, compulsory parameters provided and appointment exists for the specified client yet.","lastModifiedDate":"2021-11-02"},{"lineNumber":1356,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1357,"author":{"gitId":"Py0000"},"content":"    2. **Test Case**: `ea 1 d/2030-12-16 t/17:00 v/SOC` \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1358,"author":{"gitId":"Py0000"},"content":"       **Expected**: Edits the appointment of the first client in the displayed list. Changes the date to `16 Dec 2030`, time to `1700hrs` and venue to `SOC`. Success message with details of the client name and edited appointment is shown.","lastModifiedDate":"2021-11-02"},{"lineNumber":1359,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1360,"author":{"gitId":"Py0000"},"content":"    3. **Test Case**: `ea 1` \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1361,"author":{"gitId":"Py0000"},"content":"       **Expected**: No appointment edited. Error message displayed.","lastModifiedDate":"2021-11-02"},{"lineNumber":1362,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1363,"author":{"gitId":"Py0000"},"content":"    4. **Other invalid commands to try**: `ea d/2023-12-16`, `ea 1 d/2019-12-16`,  `ea 1 d/2023-16-12`, `ea 1 d/2023-12-16 t/1700` `ea y v/SOC`(where y is an index with no appointment), `ea 1 v/venue...`(where venue... is longer than 20 characters)\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1364,"author":{"gitId":"Py0000"},"content":"       **Expected**: Similar to previous testcase (in Point 3).","lastModifiedDate":"2021-11-02"},{"lineNumber":1365,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1366,"author":{"gitId":"Py0000"},"content":"#### Deleting an appointment","lastModifiedDate":"2021-11-02"},{"lineNumber":1367,"author":{"gitId":"Py0000"},"content":"1. Deletes an existing appointment in FAST","lastModifiedDate":"2021-11-02"},{"lineNumber":1368,"author":{"gitId":"Py0000"},"content":"    1. **Prerequisites**: Arguments are valid, compulsory parameters provided and appointment exists for the specified client yet.","lastModifiedDate":"2021-11-02"},{"lineNumber":1369,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1370,"author":{"gitId":"Py0000"},"content":"    2. **Test Case**: `da 1` \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1371,"author":{"gitId":"Py0000"},"content":"       **Expected**: Deletes the appointment of the first client in the displayed list. Success message with client name is shown.","lastModifiedDate":"2021-11-02"},{"lineNumber":1372,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1373,"author":{"gitId":"Py0000"},"content":"    3. **Test Case**: `da 0` \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1374,"author":{"gitId":"Py0000"},"content":"       **Expected**: No appointment deleted. Error message displayed.","lastModifiedDate":"2021-11-02"},{"lineNumber":1375,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1376,"author":{"gitId":"Py0000"},"content":"    4. **Other invalid commands to try**: `da`, `da x`(where x is larger than the list size) \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1377,"author":{"gitId":"Py0000"},"content":"       **Expected**: Similar to previous testcase (in Point 3).","lastModifiedDate":"2021-11-02"},{"lineNumber":1378,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1379,"author":{"gitId":"Py0000"},"content":"#### Marking an appointment","lastModifiedDate":"2021-11-02"},{"lineNumber":1380,"author":{"gitId":"Py0000"},"content":"1. Marks an existing appointment in FAST","lastModifiedDate":"2021-11-02"},{"lineNumber":1381,"author":{"gitId":"Py0000"},"content":"    1. **Prerequisites**: Arguments are valid, compulsory parameters provided and appointment exists for the specified client yet.","lastModifiedDate":"2021-11-02"},{"lineNumber":1382,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1383,"author":{"gitId":"Py0000"},"content":"    2. **Test Case**: `ma 1` \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1384,"author":{"gitId":"Py0000"},"content":"       **Expected**: Marks and deletes the appointment of the first client in the displayed list. Appointment count is incremented by 1. Success message with details of the client name and edited appointment is shown.","lastModifiedDate":"2021-11-02"},{"lineNumber":1385,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1386,"author":{"gitId":"Py0000"},"content":"    3. **Test Case**: `ma 0` \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1387,"author":{"gitId":"Py0000"},"content":"       **Expected**: No appointment marked. Error message displayed.","lastModifiedDate":"2021-11-02"},{"lineNumber":1388,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1389,"author":{"gitId":"Py0000"},"content":"    4. **Other invalid commands to try**: `ma`, `ma x`(where x is larger than the list size), `ma y`(where y is an index with no appointment). \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1390,"author":{"gitId":"Py0000"},"content":"       **Expected**: Similar to previous testcase (in Point 3).","lastModifiedDate":"2021-11-02"},{"lineNumber":1391,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":1392,"author":{"gitId":"Py0000"},"content":"#### Unmarking an appointment","lastModifiedDate":"2021-11-02"},{"lineNumber":1393,"author":{"gitId":"Py0000"},"content":"1. Umarks an existing appointment in FAST","lastModifiedDate":"2021-11-02"},{"lineNumber":1394,"author":{"gitId":"Py0000"},"content":"    1. **Prerequisites**: Arguments are valid, compulsory parameters provided and appointment does not exist for the specified client yet.","lastModifiedDate":"2021-11-02"},{"lineNumber":1395,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1396,"author":{"gitId":"Py0000"},"content":"    2. **Test Case**: `ua 1` \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1397,"author":{"gitId":"Py0000"},"content":"       **Expected**: Unmarks the appointment of the first client in the displayed list. Appointment count is decremented by 1. Success message with client name is shown.","lastModifiedDate":"2021-11-02"},{"lineNumber":1398,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1399,"author":{"gitId":"Py0000"},"content":"    3. **Test Case**: `ua 0` \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1400,"author":{"gitId":"Py0000"},"content":"       **Expected**: No appointment unmarked. Error message displayed.","lastModifiedDate":"2021-11-02"},{"lineNumber":1401,"author":{"gitId":"Py0000"},"content":"   ","lastModifiedDate":"2021-11-02"},{"lineNumber":1402,"author":{"gitId":"Py0000"},"content":"    4. **Other invalid commands to try**: `ua`, `ua x`(where x is larger than the list size), `ua y`(where y is an index with an appointment). \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":1403,"author":{"gitId":"Py0000"},"content":"       **Expected**: Similar to previous testcase (in Point 3).","lastModifiedDate":"2021-11-02"},{"lineNumber":1404,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1405,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":1406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1407,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":1408,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1409,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":1410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1411,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"trash-bin99":120,"squeakysquak":62,"Py0000":830,"-":265,"Cyn7hius":103,"Th-429B":31}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"   1. Run the `seedu.fast.Main` and try a few commands.","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"squeakysquak":1,"-":54}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"   e.g. `seedu.fast.commons.StringUtilTest`","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"squeakysquak"},"content":"   e.g. `seedu.fast.storage.StorageManagerTest`","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"squeakysquak"},"content":"   e.g. `seedu.fast.logic.LogicManagerTest`","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"squeakysquak":3,"-":33}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"Cyn7hius"},"content":"## **Introduction**","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"\u003cdiv align\u003d\"center\"\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":"  \u003cimg alt\u003d\"logo\" src\u003d\"images/logo.png\"\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"Th-429B"},"content":"Welcome and thank you for downloading **FAST**! Are you a financial advisor having troubles managing your contacts","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"Th-429B"},"content":"on your phone? Do you find existing contact management software troublesome and not intuitive to use? Do you want","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"trash-bin99"},"content":"a free alternative compared to those paid contact management software? If you answered \"YES!\" to any those questions,","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"trash-bin99"},"content":"then FAST is for you!","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"Cyn7hius"},"content":"FAST stands for Financial Advisor Smart Tracker (FAST), and as its name implies, we strive to be the fastest, and most","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"Th-429B"},"content":"efficient when it comes to managing your contacts.","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"trash-bin99"},"content":"FAST is a **free and open-source desktop app for Financial Advisors to manage their contacts.**","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"Th-429B"},"content":"More importantly, FAST is **optimized for those who prefer to work with a Command Line","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"Th-429B"},"content":"Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI).","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"trash-bin99"},"content":"If you are a Financial Advisor that can type fast, FAST will get your contact management tasks done faster than traditional GUI apps!","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"Cyn7hius"},"content":"### Features overview","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"Cyn7hius"},"content":"Here is an overview of the features FAST offers:","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"trash-bin99"},"content":"* Keep track of your client\u0027s [information](#managing-a-client) (i.e. Name, Phone number, Email address, Home address, and Remarks) in our","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"Cyn7hius"},"content":"  all-in-one app!","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"Cyn7hius"},"content":"* Record and keep track of your client\u0027s [appointment](#appointments) dates. Never miss another appointment date again!","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"trash-bin99"},"content":"* [Tag](#tags) your clients with the insurance plan they have purchased or are interested in.","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"* View built-in [analysis](#viewing-statistics) of your client base to better understand your portfolio.","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"### Purpose of this guide","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"trash-bin99"},"content":"This guide aims to help new users to be familiar with FAST. After reading this guide, new users will be more familiar with the different features available in FAST.","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"This guide also serves as a reminder for existing users to quickly search for specific information if they are unsure of how to use certain features, ","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"by clicking on the links, to jump to the section where the information which they are looking for exists.","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"Cyn7hius"},"content":"## **How to use this user guide**","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"Cyn7hius"},"content":"We recommend first time users to read the user guide in the order that is written.","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"Cyn7hius"},"content":"Throughout the user guide, we include links in blue like [this](#how-to-use-this-user-guide) which will jump to the ","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"Cyn7hius"},"content":"corresponding section of the user guide. These links allow you to quickly navigate this document. ","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"trash-bin99"},"content":"This guide follows the structure as stated [here](#structure-of-this-document).","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"Cyn7hius"},"content":"We also use special formats to highlight information that will be important or useful to you.","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"trash-bin99"},"content":"These include:","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"trash-bin99"},"content":"**Cautions**","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"trash-bin99"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"trash-bin99"},"content":":exclamation: **Caution** Example caution","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"trash-bin99"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"trash-bin99"},"content":"Messages that appear in these boxes are important to take note of, as not knowing them might harm your user experience.","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"trash-bin99"},"content":"**Tips**","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"trash-bin99"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"trash-bin99"},"content":"Example tip","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"trash-bin99"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":67,"author":{"gitId":"trash-bin99"},"content":"Messages that appear in these boxes can help you to more effectively use FAST.","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"trash-bin99"},"content":"**Useful information**","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"trash-bin99"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"trash-bin99"},"content":":information_source: Example useful information","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"trash-bin99"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":75,"author":{"gitId":"trash-bin99"},"content":"Messages that appear in these boxes will be useful in helping you to understand how to use FAST.","lastModifiedDate":"2021-10-23"},{"lineNumber":76,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":77,"author":{"gitId":"trash-bin99"},"content":"**Technical Information**","lastModifiedDate":"2021-10-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"trash-bin99"},"content":"`Example technical information`","lastModifiedDate":"2021-10-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":81,"author":{"gitId":"trash-bin99"},"content":"Messages that appear in these boxes indicate that the text is of a more technical nature, such as user input.","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"### Structure of this document","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"To help you make the most of your time, we have added a multitude of features to FAST, which will help you efficiently manage your contacts.","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"As such, this user guide has been structured to help you find what you are looking for.","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"In [How to use this user guide](#how-to-use-this-user-guide), you can learn how to most effectively read through this guide.","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"In [Quick start](#quick-start), you will find simple instructions on how to quickly begin using FAST.","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"In [Features](#features), you can find documentation on how to use the features available in FAST.","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"In [FAQs](#faqs), you may find answers to questions or problems you might have while using FAST.","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"In [Command summary](#command-summary), you will find a summary of the commands available in FAST.","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"In [Glossary](#glossary), you will find useful descriptions and meanings of terms used in this document.","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"Cyn7hius"},"content":"## **Quick start**","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"Cyn7hius"},"content":"1. Ensure you have Java `11` or above installed in your Computer. FAST can be used ","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"trash-bin99"},"content":"on any operating system including Windows, macOS or Linux","lastModifiedDate":"2021-10-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"Th-429B"},"content":"1. Download the latest `fast.jar` from [here](https://github.com/AY2122S1-CS2103T-T09-4/tp/releases).","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"Cyn7hius"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your FAST.","lastModifiedDate":"2021-09-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"Cyn7hius"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. ","lastModifiedDate":"2021-10-22"},{"lineNumber":111,"author":{"gitId":"Cyn7hius"},"content":"   ","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"Th-429B"},"content":"   \u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-10-17"},{"lineNumber":115,"author":{"gitId":"squeakysquak"},"content":"   :information_source: More icons will be added in future iterations\u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"Th-429B"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"Cyn7hius"},"content":"   ","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"Cyn7hius"},"content":"1. When you first start up, FAST will contain some sample data for you to explore the different features.","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"Cyn7hius"},"content":"1. You are now ready to start managing your clients!","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"Cyn7hius"},"content":"   ","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"trash-bin99"},"content":"### User interface","lastModifiedDate":"2021-10-23"},{"lineNumber":122,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"squeakysquak"},"content":"![UiAnnotated](images/UiAnnotated.png)","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e Referring to the image above, the _Menu bar_ at the top is where you can access the _Help page_, _Stats page_ and exit ","lastModifiedDate":"2021-10-30"},{"lineNumber":125,"author":{"gitId":"Cyn7hius"},"content":"FAST. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":126,"author":{"gitId":"Cyn7hius"},"content":"Next, the _Results display_ is where FAST gives you feedback to your commands. For example, if you make a typo","lastModifiedDate":"2021-10-22"},{"lineNumber":127,"author":{"gitId":"Cyn7hius"},"content":"in your command, FAST will inform you here! \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"Cyn7hius"},"content":"Following that, we have the _Client information_ cards. Each client is represented by a card, which contains","lastModifiedDate":"2021-10-22"},{"lineNumber":129,"author":{"gitId":"Cyn7hius"},"content":"all the information of that client. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":130,"author":{"gitId":"Cyn7hius"},"content":"Lastly, the _Command box_ is where you can type in all your commands!","lastModifiedDate":"2021-10-22"},{"lineNumber":131,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":132,"author":{"gitId":"Cyn7hius"},"content":"### Try it out!","lastModifiedDate":"2021-10-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"Cyn7hius"},"content":"We recommend that you play around with FAST to get a better idea of the features and their usages. Don\u0027t worry, these","lastModifiedDate":"2021-10-22"},{"lineNumber":135,"author":{"gitId":"Cyn7hius"},"content":"are all sample data! Here are some commands you can try to see what they do:","lastModifiedDate":"2021-10-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"Cyn7hius"},"content":"1. Add a contact named \"John Doe\" to FAST","lastModifiedDate":"2021-10-22"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"   * `add n/Matthew Shen p/91087657 e/matthew@example.com a/511 Seletar Road 12`","lastModifiedDate":"2021-10-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"Cyn7hius"},"content":"2. Delete the 3rd contact in FAST","lastModifiedDate":"2021-10-22"},{"lineNumber":142,"author":{"gitId":"Py0000"},"content":"    * `del 3`","lastModifiedDate":"2021-10-30"},{"lineNumber":143,"author":{"gitId":"Cyn7hius"},"content":"    ","lastModifiedDate":"2021-10-22"},{"lineNumber":144,"author":{"gitId":"Cyn7hius"},"content":"3. View all your saved contacts","lastModifiedDate":"2021-10-22"},{"lineNumber":145,"author":{"gitId":"Cyn7hius"},"content":"    *  `list`","lastModifiedDate":"2021-10-27"},{"lineNumber":146,"author":{"gitId":"Cyn7hius"},"content":"    ","lastModifiedDate":"2021-10-22"},{"lineNumber":147,"author":{"gitId":"squeakysquak"},"content":"4. Try searching for a high priority client!","lastModifiedDate":"2021-10-22"},{"lineNumber":148,"author":{"gitId":"squeakysquak"},"content":"    * `find pr/high`","lastModifiedDate":"2021-10-22"},{"lineNumber":149,"author":{"gitId":"squeakysquak"},"content":"    ","lastModifiedDate":"2021-10-22"},{"lineNumber":150,"author":{"gitId":"squeakysquak"},"content":"5. Try setting an appointment for him.","lastModifiedDate":"2021-10-22"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"    * `aa 1 d/2021-12-12 t/14:30 v/Buona Vista`","lastModifiedDate":"2021-10-25"},{"lineNumber":152,"author":{"gitId":"squeakysquak"},"content":"    ","lastModifiedDate":"2021-10-22"},{"lineNumber":153,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":154,"author":{"gitId":"squeakysquak"},"content":":information_source: When you are ready to use FAST to keep track of your own clients, you can use ","lastModifiedDate":"2021-10-22"},{"lineNumber":155,"author":{"gitId":"Cyn7hius"},"content":"`clear` to delete this sample data. \u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":156,"author":{"gitId":"Cyn7hius"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"Cyn7hius"},"content":"## **Features**","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"Py0000"},"content":"### **Command Format**","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"Cyn7hius"},"content":"*All* the commands used in FAST application follows these notations!","lastModifiedDate":"2021-10-27"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":167,"author":{"gitId":"Cyn7hius"},"content":"* Words in `UPPER_CASE` are the parameters to be added in by the user.\u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":168,"author":{"gitId":"Cyn7hius"},"content":"  * e.g. for `add n/NAME`, `NAME` is where you would replace it with the actual client\u0027s name such as in `add n/John Doe`.","lastModifiedDate":"2021-10-27"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"Cyn7hius"},"content":"  * e.g. if you see `n/NAME [t/TAG]`, this can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2021-10-27"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"Cyn7hius"},"content":"* Items with `…`​ after them can be used zero or more times.\u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":176,"author":{"gitId":"Cyn7hius"},"content":"  * e.g. if you see`[t/TAG]…​`, it can be `t/friend`, `t/friend t/family` or just left empty.","lastModifiedDate":"2021-10-27"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":179,"author":{"gitId":"Py0000"},"content":"* Parameters can be in any order. (This excludes parameters without a prefix.) \u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"Cyn7hius"},"content":"    * e.g. if the command uses this format: `n/NAME p/PHONE_NUMBER`, you can also input `p/PHONE_NUMBER n/NAME`.","lastModifiedDate":"2021-10-27"},{"lineNumber":181,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"Py0000"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":185,"author":{"gitId":"Py0000"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":186,"author":{"gitId":"Py0000"},"content":"* Parameter without a prefix **must** be the **first** parameter in the command (when required).","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":189,"author":{"gitId":"Cyn7hius"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the","lastModifiedDate":"2021-10-22"},{"lineNumber":190,"author":{"gitId":"Cyn7hius"},"content":"  last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":191,"author":{"gitId":"Cyn7hius"},"content":"    * e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-10-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":194,"author":{"gitId":"Cyn7hius"},"content":"* For commands that do not take in any parameter (such as  `list`, `exit` and `clear`), anything written after","lastModifiedDate":"2021-10-22"},{"lineNumber":195,"author":{"gitId":"Cyn7hius"},"content":"  the command will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":196,"author":{"gitId":"Cyn7hius"},"content":"    * e.g. if you input `help 123`, it will simply be interpreted as `help`.","lastModifiedDate":"2021-10-27"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":199,"author":{"gitId":"trash-bin99"},"content":"* If a command expects a specific set of parameters, and you entered *extra* parameter into the command (with unrecognised),","lastModifiedDate":"2021-10-26"},{"lineNumber":200,"author":{"gitId":"Py0000"},"content":"prefix, then FAST will assume it to be part of the previous parameter input, which may or may not be valid for certain commands. \u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":201,"author":{"gitId":"Py0000"},"content":"    * e.g. if a command expects this parameter `ea v/New York` but you enter `ea v/New York p/87657654`, ","lastModifiedDate":"2021-10-26"},{"lineNumber":202,"author":{"gitId":"Py0000"},"content":"  FAST will assume your input to `v/` to be `New York p/87657654`.","lastModifiedDate":"2021-10-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":205,"author":{"gitId":"Py0000"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-26"},{"lineNumber":206,"author":{"gitId":"Py0000"},"content":"Parameters refer to the details that are to be included as an input to a command. \u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"Py0000"},"content":"Prefix refers to the word symbol used before the parameter. ","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e \u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"Py0000"},"content":"### **Command Parameters**","lastModifiedDate":"2021-10-26"},{"lineNumber":213,"author":{"gitId":"Cyn7hius"},"content":"In this subsection, you can see all the parameters used in FAST at one place. These parameters are used for ","lastModifiedDate":"2021-10-27"},{"lineNumber":214,"author":{"gitId":"Cyn7hius"},"content":"all our features usage.","lastModifiedDate":"2021-10-27"},{"lineNumber":215,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":216,"author":{"gitId":"Py0000"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-10-26"},{"lineNumber":217,"author":{"gitId":"Py0000"},"content":"To achieve the best possible experience, avoid adding excessively long input to FAST.","lastModifiedDate":"2021-10-26"},{"lineNumber":218,"author":{"gitId":"Py0000"},"content":"\u003c/div\u003e\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":219,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":220,"author":{"gitId":"Py0000"},"content":"#### `ADDRESS` ","lastModifiedDate":"2021-10-26"},{"lineNumber":221,"author":{"gitId":"Py0000"},"content":"* The address of your client","lastModifiedDate":"2021-10-26"},{"lineNumber":222,"author":{"gitId":"Py0000"},"content":"* Can take any value (should not be *blank*)","lastModifiedDate":"2021-10-26"},{"lineNumber":223,"author":{"gitId":"Th-429B"},"content":"* Should not be more than **100** characters","lastModifiedDate":"2021-10-31"},{"lineNumber":224,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":225,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":226,"author":{"gitId":"Py0000"},"content":"#### `DATE`","lastModifiedDate":"2021-10-26"},{"lineNumber":227,"author":{"gitId":"Py0000"},"content":"* The date of an appointment with your client","lastModifiedDate":"2021-10-26"},{"lineNumber":228,"author":{"gitId":"Py0000"},"content":"* Should be in this format: `yyyy-mm-dd` ","lastModifiedDate":"2021-10-26"},{"lineNumber":229,"author":{"gitId":"Py0000"},"content":"  * e.g. `2023-05-15` ","lastModifiedDate":"2021-10-26"},{"lineNumber":230,"author":{"gitId":"Py0000"},"content":"* Should be a valid date (cannot be a date in the past) where:","lastModifiedDate":"2021-10-30"},{"lineNumber":231,"author":{"gitId":"Py0000"},"content":"  * `yyyy` (year): should be a positive 4-digit number ","lastModifiedDate":"2021-10-30"},{"lineNumber":232,"author":{"gitId":"Py0000"},"content":"  * `mm` (month): should be a valid calendar month between 01 and 12","lastModifiedDate":"2021-10-26"},{"lineNumber":233,"author":{"gitId":"Py0000"},"content":"  * `dd` (day): should be a valid calendar day between 01 - 31 (might be less than 31 depending on the month)","lastModifiedDate":"2021-10-26"},{"lineNumber":234,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":235,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":236,"author":{"gitId":"Py0000"},"content":"#### `EMAIL`","lastModifiedDate":"2021-10-26"},{"lineNumber":237,"author":{"gitId":"Py0000"},"content":"* The email address of your client","lastModifiedDate":"2021-10-26"},{"lineNumber":238,"author":{"gitId":"Py0000"},"content":"* Should be in this format: `local-part@domain`","lastModifiedDate":"2021-10-26"},{"lineNumber":239,"author":{"gitId":"Py0000"},"content":"* `local-part`: ","lastModifiedDate":"2021-10-26"},{"lineNumber":240,"author":{"gitId":"trash-bin99"},"content":"  * should only contain *alphanumeric characters* and these *special characters* excluding parentheses (!#$%\u0026\u0027*+/\u003d?\\{\\}\\|~^.-`).","lastModifiedDate":"2021-10-30"},{"lineNumber":241,"author":{"gitId":"Py0000"},"content":"  * should not start and end with special characters,","lastModifiedDate":"2021-10-26"},{"lineNumber":242,"author":{"gitId":"Py0000"},"content":"* `domain`: ","lastModifiedDate":"2021-10-26"},{"lineNumber":243,"author":{"gitId":"Py0000"},"content":"  * must be at least **2** characters long. ","lastModifiedDate":"2021-10-26"},{"lineNumber":244,"author":{"gitId":"Py0000"},"content":"  * each domain label must start and end with alphanumeric characters","lastModifiedDate":"2021-10-26"},{"lineNumber":245,"author":{"gitId":"Py0000"},"content":"  * each domain label is separated using hyphens (if any)","lastModifiedDate":"2021-10-26"},{"lineNumber":246,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":247,"author":{"gitId":"Py0000"},"content":"  ","lastModifiedDate":"2021-10-26"},{"lineNumber":248,"author":{"gitId":"trash-bin99"},"content":"#### `HELP_TOPIC`","lastModifiedDate":"2021-10-30"},{"lineNumber":249,"author":{"gitId":"trash-bin99"},"content":"* The Help topics available in FAST:","lastModifiedDate":"2021-10-30"},{"lineNumber":250,"author":{"gitId":"trash-bin99"},"content":"  * `Quick Start`","lastModifiedDate":"2021-10-30"},{"lineNumber":251,"author":{"gitId":"trash-bin99"},"content":"  * `Add`","lastModifiedDate":"2021-10-30"},{"lineNumber":252,"author":{"gitId":"trash-bin99"},"content":"  * `Appointment`","lastModifiedDate":"2021-10-30"},{"lineNumber":253,"author":{"gitId":"trash-bin99"},"content":"  * `Edit Appointment`","lastModifiedDate":"2021-10-30"},{"lineNumber":254,"author":{"gitId":"trash-bin99"},"content":"  * `Delete Appointment`","lastModifiedDate":"2021-10-30"},{"lineNumber":255,"author":{"gitId":"trash-bin99"},"content":"  * `Mark Appointment`","lastModifiedDate":"2021-10-30"},{"lineNumber":256,"author":{"gitId":"trash-bin99"},"content":"  * `Clear`","lastModifiedDate":"2021-10-30"},{"lineNumber":257,"author":{"gitId":"trash-bin99"},"content":"  * `Delete`","lastModifiedDate":"2021-10-30"},{"lineNumber":258,"author":{"gitId":"trash-bin99"},"content":"  * `Edit`","lastModifiedDate":"2021-10-30"},{"lineNumber":259,"author":{"gitId":"trash-bin99"},"content":"  * `Find`","lastModifiedDate":"2021-10-30"},{"lineNumber":260,"author":{"gitId":"trash-bin99"},"content":"  * `List`","lastModifiedDate":"2021-10-30"},{"lineNumber":261,"author":{"gitId":"trash-bin99"},"content":"  * `Help`","lastModifiedDate":"2021-10-30"},{"lineNumber":262,"author":{"gitId":"trash-bin99"},"content":"  * `Remark`","lastModifiedDate":"2021-10-30"},{"lineNumber":263,"author":{"gitId":"trash-bin99"},"content":"  * `Sort`","lastModifiedDate":"2021-10-30"},{"lineNumber":264,"author":{"gitId":"trash-bin99"},"content":"  * `Statistic`","lastModifiedDate":"2021-10-30"},{"lineNumber":265,"author":{"gitId":"trash-bin99"},"content":"  * `Tag`","lastModifiedDate":"2021-10-30"},{"lineNumber":266,"author":{"gitId":"trash-bin99"},"content":"  * `Investment Plan Tag`","lastModifiedDate":"2021-10-30"},{"lineNumber":267,"author":{"gitId":"trash-bin99"},"content":"  * `Priority Tag`","lastModifiedDate":"2021-10-30"},{"lineNumber":268,"author":{"gitId":"trash-bin99"},"content":"  * `Misc`","lastModifiedDate":"2021-10-30"},{"lineNumber":269,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":270,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":271,"author":{"gitId":"Py0000"},"content":"#### `INDEX`","lastModifiedDate":"2021-10-26"},{"lineNumber":272,"author":{"gitId":"Py0000"},"content":"* Refers to the number shown in the displayed client list","lastModifiedDate":"2021-10-26"},{"lineNumber":273,"author":{"gitId":"Py0000"},"content":"* **Must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-10-26"},{"lineNumber":274,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":275,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":276,"author":{"gitId":"trash-bin99"},"content":"#### `KEYWORD`","lastModifiedDate":"2021-10-27"},{"lineNumber":277,"author":{"gitId":"trash-bin99"},"content":"*   The condition to sort your client list","lastModifiedDate":"2021-10-27"},{"lineNumber":278,"author":{"gitId":"Th-429B"},"content":"*   There are currently only 3 `KEYWORD` available: `name`, `appointment`, `priority`.","lastModifiedDate":"2021-10-31"},{"lineNumber":279,"author":{"gitId":"Th-429B"},"content":"    * `name` will sort all clients in alphabetical order from A to Z.","lastModifiedDate":"2021-10-31"},{"lineNumber":280,"author":{"gitId":"Th-429B"},"content":"    * `appointment` will sort all client by appointment date from the earliest date to latest.","lastModifiedDate":"2021-10-31"},{"lineNumber":281,"author":{"gitId":"Th-429B"},"content":"    * `priority` will sort all client by `priority tag` from the highest to the lowest priority.","lastModifiedDate":"2021-10-31"},{"lineNumber":282,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":283,"author":{"gitId":"Cyn7hius"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e :information_source: ","lastModifiedDate":"2021-11-01"},{"lineNumber":284,"author":{"gitId":"Cyn7hius"},"content":"** Notes about sorting by appointment:** \u003cbr\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":285,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":286,"author":{"gitId":"Th-429B"},"content":"* For clients with the **same appointment date**, FAST will first show those *without appointment times*, followed by","lastModifiedDate":"2021-10-31"},{"lineNumber":287,"author":{"gitId":"Th-429B"},"content":"the earliest time to the latest time.","lastModifiedDate":"2021-10-31"},{"lineNumber":288,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":289,"author":{"gitId":"Cyn7hius"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":290,"author":{"gitId":"Cyn7hius"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":291,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":292,"author":{"gitId":"Py0000"},"content":"#### `NAME`","lastModifiedDate":"2021-10-26"},{"lineNumber":293,"author":{"gitId":"Cyn7hius"},"content":"* The name of your client","lastModifiedDate":"2021-10-27"},{"lineNumber":294,"author":{"gitId":"Py0000"},"content":"* Should only contain alphanumeric characters and spaces (should not be blank)","lastModifiedDate":"2021-10-26"},{"lineNumber":295,"author":{"gitId":"squeakysquak"},"content":"   \u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":296,"author":{"gitId":"squeakysquak"},"content":"   :information_source: FAST does not allow duplicate names, but you may use numbers to differentiate between 2 clients with","lastModifiedDate":"2021-11-01"},{"lineNumber":297,"author":{"gitId":"squeakysquak"},"content":"   the exact same name.\u003cbr\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":298,"author":{"gitId":"squeakysquak"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":299,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":300,"author":{"gitId":"Py0000"},"content":"#### `PHONE`","lastModifiedDate":"2021-10-26"},{"lineNumber":301,"author":{"gitId":"Py0000"},"content":"* The contact number of your client","lastModifiedDate":"2021-10-26"},{"lineNumber":302,"author":{"gitId":"Py0000"},"content":"* Should only contain numbers","lastModifiedDate":"2021-10-26"},{"lineNumber":303,"author":{"gitId":"Cyn7hius"},"content":"  * for numbers with an area/country code e.g. +65 80081355, you can just enter 6580081355","lastModifiedDate":"2021-10-27"},{"lineNumber":304,"author":{"gitId":"Th-429B"},"content":"* Should be at least **3** digits long and at most **20** digits long.","lastModifiedDate":"2021-10-31"},{"lineNumber":305,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":306,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":307,"author":{"gitId":"Py0000"},"content":"#### `QUERY`","lastModifiedDate":"2021-10-26"},{"lineNumber":308,"author":{"gitId":"Py0000"},"content":"* The term used to search for clients in FAST","lastModifiedDate":"2021-10-26"},{"lineNumber":309,"author":{"gitId":"Cyn7hius"},"content":"* Can be any value","lastModifiedDate":"2021-10-27"},{"lineNumber":310,"author":{"gitId":"Cyn7hius"},"content":"* Cannot be left blank","lastModifiedDate":"2021-10-27"},{"lineNumber":311,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":312,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":313,"author":{"gitId":"Py0000"},"content":"#### `REMARK`","lastModifiedDate":"2021-10-26"},{"lineNumber":314,"author":{"gitId":"Py0000"},"content":"* Extra notes given for your client","lastModifiedDate":"2021-10-26"},{"lineNumber":315,"author":{"gitId":"Th-429B"},"content":"* Should not be more than **45** characters","lastModifiedDate":"2021-10-31"},{"lineNumber":316,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":318,"author":{"gitId":"Py0000"},"content":"#### `TAG`","lastModifiedDate":"2021-10-26"},{"lineNumber":319,"author":{"gitId":"Py0000"},"content":"* A label given to your client","lastModifiedDate":"2021-10-26"},{"lineNumber":320,"author":{"gitId":"Py0000"},"content":"* There are 3 types of `TAG` in FAST:","lastModifiedDate":"2021-10-26"},{"lineNumber":321,"author":{"gitId":"Py0000"},"content":"  1. Normal Tags: should not be longer than 20 characters","lastModifiedDate":"2021-10-26"},{"lineNumber":322,"author":{"gitId":"Cyn7hius"},"content":"     * no prefix","lastModifiedDate":"2021-11-01"},{"lineNumber":323,"author":{"gitId":"Py0000"},"content":"  2. Priority Tag: either one of the 3 priorities (low, med, high)","lastModifiedDate":"2021-10-26"},{"lineNumber":324,"author":{"gitId":"Cyn7hius"},"content":"     * prefix: pr/","lastModifiedDate":"2021-11-01"},{"lineNumber":325,"author":{"gitId":"Py0000"},"content":"  3. Investment Plan Tag: either one of the 7 plans (health, invest, life, motor, property, save or travel)","lastModifiedDate":"2021-10-26"},{"lineNumber":326,"author":{"gitId":"Cyn7hius"},"content":"     * prefix: ip/","lastModifiedDate":"2021-11-01"},{"lineNumber":327,"author":{"gitId":"Cyn7hius"},"content":"  ","lastModifiedDate":"2021-11-01"},{"lineNumber":328,"author":{"gitId":"Cyn7hius"},"content":"* To use Priority or Inventment Plan Tags, you need to specify the prefix, or it will be treated as a Normal Tag.","lastModifiedDate":"2021-11-01"},{"lineNumber":329,"author":{"gitId":"trash-bin99"},"content":"* Refer to [Tags](#tags) to find out more about each tag","lastModifiedDate":"2021-10-27"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":332,"author":{"gitId":"Py0000"},"content":"#### `TIME`","lastModifiedDate":"2021-10-26"},{"lineNumber":333,"author":{"gitId":"Cyn7hius"},"content":"* The time of an appointment with your client","lastModifiedDate":"2021-10-27"},{"lineNumber":334,"author":{"gitId":"Py0000"},"content":"* 24-hour format","lastModifiedDate":"2021-10-26"},{"lineNumber":335,"author":{"gitId":"Py0000"},"content":"* Should be in this format: `HH:mm` ","lastModifiedDate":"2021-10-26"},{"lineNumber":336,"author":{"gitId":"Py0000"},"content":"  * eg. `10:30` represents 10.30am","lastModifiedDate":"2021-10-26"},{"lineNumber":337,"author":{"gitId":"Py0000"},"content":"* Should be a valid time from 00:00 to 23:59 where:","lastModifiedDate":"2021-10-26"},{"lineNumber":338,"author":{"gitId":"Py0000"},"content":"  * `HH` (hour): should be between 00 and 23","lastModifiedDate":"2021-10-26"},{"lineNumber":339,"author":{"gitId":"Py0000"},"content":"  * `mm` (minute): should be between 00 and 59","lastModifiedDate":"2021-10-26"},{"lineNumber":340,"author":{"gitId":"Py0000"},"content":"    ","lastModifiedDate":"2021-10-26"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":342,"author":{"gitId":"Cyn7hius"},"content":"#### `VENUE`","lastModifiedDate":"2021-10-27"},{"lineNumber":343,"author":{"gitId":"Py0000"},"content":"* The location of an appointment with your client","lastModifiedDate":"2021-10-26"},{"lineNumber":344,"author":{"gitId":"Py0000"},"content":"* Should not be longer than **20** characters long","lastModifiedDate":"2021-10-30"},{"lineNumber":345,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e \u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":347,"author":{"gitId":"Cyn7hius"},"content":"### **Managing a client**","lastModifiedDate":"2021-10-26"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":349,"author":{"gitId":"Cyn7hius"},"content":"FAST allows you to easily manage your clients. Just like a contact in your phone\u0027s Contact Book, you can use","lastModifiedDate":"2021-10-26"},{"lineNumber":350,"author":{"gitId":"Cyn7hius"},"content":"FAST to save your client\u0027s Name, Phone Number, Address, Email Address and Remarks. In addition, you can also add","lastModifiedDate":"2021-10-26"},{"lineNumber":351,"author":{"gitId":"Cyn7hius"},"content":"in appointment dates and tag your clients all within FAST.","lastModifiedDate":"2021-10-26"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":353,"author":{"gitId":"squeakysquak"},"content":"![ClientCard](images/clientcardexample.png)","lastModifiedDate":"2021-10-27"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"Cyn7hius"},"content":"In this user guide, we will showcase commands related to Clients first followed by sections on [Appointment](#appointments)","lastModifiedDate":"2021-10-26"},{"lineNumber":356,"author":{"gitId":"trash-bin99"},"content":"and [Tags](#tags). After this section on clients, you can also learn more about [managing your client base](#managing-your-client-base),","lastModifiedDate":"2021-10-27"},{"lineNumber":357,"author":{"gitId":"Cyn7hius"},"content":"or view our [other utility features](#others). ","lastModifiedDate":"2021-10-26"},{"lineNumber":358,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":359,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":360,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":361,"author":{"gitId":"Cyn7hius"},"content":"#### Adding a client: `add`","lastModifiedDate":"2021-10-26"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"Cyn7hius"},"content":"You can use this command to add a client to FAST.","lastModifiedDate":"2021-10-26"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":365,"author":{"gitId":"Th-429B"},"content":"**Format**: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`","lastModifiedDate":"2021-10-25"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"Py0000"},"content":"**Parameters**:","lastModifiedDate":"2021-10-26"},{"lineNumber":368,"author":{"gitId":"Py0000"},"content":"* [`NAME`](#name)","lastModifiedDate":"2021-10-26"},{"lineNumber":369,"author":{"gitId":"Py0000"},"content":"* [`PHONE_NUMBER`](#phone)","lastModifiedDate":"2021-10-26"},{"lineNumber":370,"author":{"gitId":"Py0000"},"content":"* [`EMAIL`](#email)","lastModifiedDate":"2021-10-26"},{"lineNumber":371,"author":{"gitId":"Py0000"},"content":"* [`ADDRESS`](#address)","lastModifiedDate":"2021-10-26"},{"lineNumber":372,"author":{"gitId":"Py0000"},"content":"* [`TAG`](#tag)","lastModifiedDate":"2021-10-26"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":374,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"Py0000"},"content":"A client can have any number of [`TAG`](#tag) (including 0)","lastModifiedDate":"2021-10-26"},{"lineNumber":376,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"Th-429B"},"content":"**Examples**:","lastModifiedDate":"2021-10-25"},{"lineNumber":379,"author":{"gitId":"Cyn7hius"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` will add a new client called ","lastModifiedDate":"2021-10-22"},{"lineNumber":380,"author":{"gitId":"Cyn7hius"},"content":"  `John Doe`, who has phone number of `98765432`, has an email address `johnd@example.com` and stays at ","lastModifiedDate":"2021-10-22"},{"lineNumber":381,"author":{"gitId":"Cyn7hius"},"content":"  `John street, block 123, #01-01`.","lastModifiedDate":"2021-10-22"},{"lineNumber":382,"author":{"gitId":"squeakysquak"},"content":"  ![AddExample](images/addexample.png)","lastModifiedDate":"2021-10-27"},{"lineNumber":383,"author":{"gitId":"Cyn7hius"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal` will add a new client ","lastModifiedDate":"2021-10-22"},{"lineNumber":384,"author":{"gitId":"Cyn7hius"},"content":"   called `Betsy Crowe`, has a phone number of `1234567`, has an email address `betsycrowe@example.com`, ","lastModifiedDate":"2021-10-22"},{"lineNumber":385,"author":{"gitId":"Cyn7hius"},"content":"  stays at `Newgate Prison` and is tagged as both a `friend` and `criminal`.","lastModifiedDate":"2021-10-22"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e ","lastModifiedDate":"2021-10-26"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"Cyn7hius"},"content":"#### Editing a client: `edit`","lastModifiedDate":"2021-10-26"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"Th-429B"},"content":"You can edit an existing client in FAST. ","lastModifiedDate":"2021-10-25"},{"lineNumber":392,"author":{"gitId":"Th-429B"},"content":"This can be used if the client\u0027s information has changed, or if you entered an incorrect entry previously.","lastModifiedDate":"2021-10-25"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"Th-429B"},"content":"**Format**: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2021-10-25"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"Py0000"},"content":"* Edits the client at the specified `INDEX`","lastModifiedDate":"2021-10-26"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":398,"author":{"gitId":"Py0000"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e :information_source:","lastModifiedDate":"2021-10-26"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":400,"author":{"gitId":"Py0000"},"content":"* Only the edited fields will be updated to the input values, while the unedited values are unchanged.","lastModifiedDate":"2021-10-26"},{"lineNumber":401,"author":{"gitId":"Py0000"},"content":"* You can remove all the client’s tags by typing `t/` without specifying any tags after it.","lastModifiedDate":"2021-10-26"},{"lineNumber":402,"author":{"gitId":"Py0000"},"content":"* For further information on the type of tags available and how to use them, refer to the [Tags](#tags) section.","lastModifiedDate":"2021-10-26"},{"lineNumber":403,"author":{"gitId":"Py0000"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":404,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":405,"author":{"gitId":"Py0000"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e :exclamation:","lastModifiedDate":"2021-10-26"},{"lineNumber":406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":407,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-10-26"},{"lineNumber":408,"author":{"gitId":"Py0000"},"content":"* When editing tags, all existing tags of the client will be replaced with the new tags.","lastModifiedDate":"2021-10-26"},{"lineNumber":409,"author":{"gitId":"Py0000"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":410,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":411,"author":{"gitId":"Py0000"},"content":"**Parameters**:","lastModifiedDate":"2021-10-26"},{"lineNumber":412,"author":{"gitId":"Py0000"},"content":"* [`INDEX`](#index)","lastModifiedDate":"2021-10-26"},{"lineNumber":413,"author":{"gitId":"Py0000"},"content":"* [`NAME`](#name)","lastModifiedDate":"2021-10-26"},{"lineNumber":414,"author":{"gitId":"Py0000"},"content":"* [`PHONE_NUMBER`](#phone)","lastModifiedDate":"2021-10-26"},{"lineNumber":415,"author":{"gitId":"Py0000"},"content":"* [`EMAIL`](#email)","lastModifiedDate":"2021-10-26"},{"lineNumber":416,"author":{"gitId":"Py0000"},"content":"* [`ADDRESS`](#address)","lastModifiedDate":"2021-10-26"},{"lineNumber":417,"author":{"gitId":"Py0000"},"content":"* [`TAG`](#tag)","lastModifiedDate":"2021-10-26"},{"lineNumber":418,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":419,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":420,"author":{"gitId":"Py0000"},"content":"**Examples**:","lastModifiedDate":"2021-10-26"},{"lineNumber":421,"author":{"gitId":"squeakysquak"},"content":"* `edit 1 p/91234567 e/alexdabro@example.com` Edits the phone number and email address of the first client to be `91234567` and `alexdabro@example.com` respectively.","lastModifiedDate":"2021-10-27"},{"lineNumber":422,"author":{"gitId":"squeakysquak"},"content":"![EditExample](images/editexample.png)","lastModifiedDate":"2021-10-27"},{"lineNumber":423,"author":{"gitId":"Py0000"},"content":"* `edit 2 n/Betsy Crower t/` Edits the name of the second client to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2021-10-26"},{"lineNumber":424,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":425,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":426,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"Cyn7hius"},"content":"#### Deleting a client: `del`","lastModifiedDate":"2021-10-26"},{"lineNumber":428,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"Th-429B"},"content":"You can delete the specified client from FAST. This is useful when a client has stopped using your services.","lastModifiedDate":"2021-10-25"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"Py0000"},"content":"**Format 1**: `del INDEX...`","lastModifiedDate":"2021-10-26"},{"lineNumber":432,"author":{"gitId":"Py0000"},"content":"**Format 2**: `del INDEX-INDEX`","lastModifiedDate":"2021-10-26"},{"lineNumber":433,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":434,"author":{"gitId":"Py0000"},"content":"* Deletes the client(s) at the specified `INDEX`.","lastModifiedDate":"2021-10-26"},{"lineNumber":435,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":436,"author":{"gitId":"Py0000"},"content":"**Parameters**:","lastModifiedDate":"2021-10-26"},{"lineNumber":437,"author":{"gitId":"trash-bin99"},"content":"* [`INDEX`](#index)","lastModifiedDate":"2021-10-26"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"Th-429B"},"content":"**Examples**:","lastModifiedDate":"2021-10-25"},{"lineNumber":440,"author":{"gitId":"squeakysquak"},"content":"* `list` followed by `del 2` deletes the second client in FAST. If `Bernice Yu` is the second client on the list, his entry","lastModifiedDate":"2021-10-27"},{"lineNumber":441,"author":{"gitId":"squeakysquak"},"content":"will be deleted.","lastModifiedDate":"2021-10-27"},{"lineNumber":442,"author":{"gitId":"squeakysquak"},"content":"![DeleteExample](images/deleteexample.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":443,"author":{"gitId":"Cyn7hius"},"content":"* `find Betsy` followed by `del 1` deletes the first client in the results of the `find` command.","lastModifiedDate":"2021-10-22"},{"lineNumber":444,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":445,"author":{"gitId":"Py0000"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: Tip:","lastModifiedDate":"2021-10-22"},{"lineNumber":446,"author":{"gitId":"Py0000"},"content":"Can be used to delete up to **10** contacts in a single `del` command by supplying more `INDEX`.","lastModifiedDate":"2021-10-22"},{"lineNumber":447,"author":{"gitId":"Py0000"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":448,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":449,"author":{"gitId":"Py0000"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:exclamation: Warning:","lastModifiedDate":"2021-10-26"},{"lineNumber":450,"author":{"gitId":"Py0000"},"content":"If *Format 1* is used, there should be a space in between each `INDEX` if multiple `INDEX` are input. \u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":451,"author":{"gitId":"Py0000"},"content":"If *Format 2* is used, first `INDEX` should not be larger than second `INDEX`.","lastModifiedDate":"2021-10-30"},{"lineNumber":452,"author":{"gitId":"Py0000"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":453,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":454,"author":{"gitId":"Th-429B"},"content":"**Examples**:","lastModifiedDate":"2021-10-25"},{"lineNumber":455,"author":{"gitId":"Py0000"},"content":"* `del 2 4 6 8 10` deletes the 2nd, 4th, 6th, 8th and 10th person in FAST.","lastModifiedDate":"2021-10-22"},{"lineNumber":456,"author":{"gitId":"Py0000"},"content":"* `del 3-5` deletes the 3rd, 4th and 5th person in FAST.","lastModifiedDate":"2021-10-22"},{"lineNumber":457,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":458,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":459,"author":{"gitId":"Cyn7hius"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-10-22"},{"lineNumber":460,"author":{"gitId":"Py0000"},"content":"This CANNOT be undone!","lastModifiedDate":"2021-10-26"},{"lineNumber":461,"author":{"gitId":"Py0000"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":462,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":463,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":464,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":465,"author":{"gitId":"Cyn7hius"},"content":"#### Adding a remark to your client: `rmk`","lastModifiedDate":"2021-10-26"},{"lineNumber":466,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":467,"author":{"gitId":"trash-bin99"},"content":"You can add a remark to an existing client in FAST, or update the current remark if they already have one. \u003cbr\u003e","lastModifiedDate":"2021-10-30"},{"lineNumber":468,"author":{"gitId":"Py0000"},"content":"This is useful for adding additional client notes such as their preferred meeting timing, allowing you to better serve your clients!","lastModifiedDate":"2021-10-26"},{"lineNumber":469,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":470,"author":{"gitId":"trash-bin99"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e :information_source: ","lastModifiedDate":"2021-10-30"},{"lineNumber":471,"author":{"gitId":"trash-bin99"},"content":"Remarks should be used to annotate contacts with longer and more specific things compared to tags,","lastModifiedDate":"2021-10-30"},{"lineNumber":472,"author":{"gitId":"squeakysquak"},"content":"which should mostly be one or two words.\u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":473,"author":{"gitId":"squeakysquak"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":474,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":475,"author":{"gitId":"Py0000"},"content":"**Format**: `rmk INDEX [r/REMARK]`","lastModifiedDate":"2021-10-26"},{"lineNumber":476,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":477,"author":{"gitId":"Py0000"},"content":"* Adds a remark to the client at the specified `INDEX`","lastModifiedDate":"2021-10-26"},{"lineNumber":478,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":479,"author":{"gitId":"Py0000"},"content":"**Parameter**:","lastModifiedDate":"2021-10-26"},{"lineNumber":480,"author":{"gitId":"Py0000"},"content":"* [`INDEX`](#index)","lastModifiedDate":"2021-10-26"},{"lineNumber":481,"author":{"gitId":"Py0000"},"content":"* [`REMARK`](#remark)","lastModifiedDate":"2021-10-26"},{"lineNumber":482,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":483,"author":{"gitId":"Py0000"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: Tip:","lastModifiedDate":"2021-10-26"},{"lineNumber":484,"author":{"gitId":"Py0000"},"content":"To delete a remark, leave the remark parameter `[r/[`REMARK`](#REMARK)]` empty.","lastModifiedDate":"2021-10-26"},{"lineNumber":485,"author":{"gitId":"Py0000"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":486,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":487,"author":{"gitId":"Th-429B"},"content":"**Examples**:","lastModifiedDate":"2021-10-25"},{"lineNumber":488,"author":{"gitId":"squeakysquak"},"content":"* `rmk 1 r/loves to eat pizza` adds a remark `loves to eat pizza` to the first client.","lastModifiedDate":"2021-10-27"},{"lineNumber":489,"author":{"gitId":"squeakysquak"},"content":"![result for `rmk 1 r/loves to eat pizza`](images/remarkResult.png)","lastModifiedDate":"2021-10-27"},{"lineNumber":490,"author":{"gitId":"Cyn7hius"},"content":"* `rmk 1` removes the remark from the first client.\u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":491,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":492,"author":{"gitId":"squeakysquak"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-22"},{"lineNumber":493,"author":{"gitId":"squeakysquak"},"content":"Try to add remarks with specific keywords so that it is easier to [search](#searching-for-clients-find) for them.","lastModifiedDate":"2021-10-22"},{"lineNumber":494,"author":{"gitId":"squeakysquak"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":495,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":496,"author":{"gitId":"trash-bin99"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-10-30"},{"lineNumber":497,"author":{"gitId":"trash-bin99"},"content":"Adding a remark will overwrite any previous remarks that were made for the client!","lastModifiedDate":"2021-10-30"},{"lineNumber":498,"author":{"gitId":"trash-bin99"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-30"},{"lineNumber":499,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":500,"author":{"gitId":"Cyn7hius"},"content":"#### Appointments","lastModifiedDate":"2021-10-26"},{"lineNumber":501,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":502,"author":{"gitId":"Cyn7hius"},"content":"You can also store and keep track of appointments with your clients all within FAST! ","lastModifiedDate":"2021-10-26"},{"lineNumber":503,"author":{"gitId":"Cyn7hius"},"content":"You may save the date, time and venue of an appointment.","lastModifiedDate":"2021-10-26"},{"lineNumber":504,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":505,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":506,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":507,"author":{"gitId":"Cyn7hius"},"content":"##### Adding an appointment: `aa`","lastModifiedDate":"2021-10-26"},{"lineNumber":508,"author":{"gitId":"Th-429B"},"content":"You can add a scheduled appointment with the client. An appointment includes a date, time and venue.","lastModifiedDate":"2021-10-25"},{"lineNumber":509,"author":{"gitId":"Th-429B"},"content":"This allows you to keep track of all your clients\u0027 appointment dates all within the same app.","lastModifiedDate":"2021-10-25"},{"lineNumber":510,"author":{"gitId":"Th-429B"},"content":"You can also [edit](#editing-an-appointment-ea), [delete](#deleting-an-appointment-da), ","lastModifiedDate":"2021-10-25"},{"lineNumber":511,"author":{"gitId":"Py0000"},"content":"[mark as completed](#updating-completed-appointment-ma), or [undo marking of completed appointment](#undo-marking-of-completed-appointment-ua) ","lastModifiedDate":"2021-10-28"},{"lineNumber":512,"author":{"gitId":"Py0000"},"content":"for an appointment.","lastModifiedDate":"2021-10-28"},{"lineNumber":513,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":514,"author":{"gitId":"Py0000"},"content":"**Format**: `aa INDEX d/DATE [t/TIME] [v/VENUE]`","lastModifiedDate":"2021-10-26"},{"lineNumber":515,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":516,"author":{"gitId":"Py0000"},"content":"**Parameter**:","lastModifiedDate":"2021-10-26"},{"lineNumber":517,"author":{"gitId":"Py0000"},"content":"* [`INDEX`](#index)","lastModifiedDate":"2021-10-26"},{"lineNumber":518,"author":{"gitId":"Py0000"},"content":"* [`DATE`](#date)","lastModifiedDate":"2021-10-26"},{"lineNumber":519,"author":{"gitId":"Py0000"},"content":"* [`TIME`](#time)","lastModifiedDate":"2021-10-26"},{"lineNumber":520,"author":{"gitId":"Py0000"},"content":"* [`VENUE`](#venue)","lastModifiedDate":"2021-10-26"},{"lineNumber":521,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":522,"author":{"gitId":"Py0000"},"content":"![Appointment](images/UG-Screenshots/AppointmentUGScreenshot.PNG)","lastModifiedDate":"2021-10-22"},{"lineNumber":523,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":524,"author":{"gitId":"Py0000"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:warning:","lastModifiedDate":"2021-10-26"},{"lineNumber":525,"author":{"gitId":"Py0000"},"content":"The `DATE` of the appointment must at least be specified.","lastModifiedDate":"2021-10-26"},{"lineNumber":526,"author":{"gitId":"Py0000"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":527,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":528,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":529,"author":{"gitId":"Th-429B"},"content":"**Examples**:","lastModifiedDate":"2021-10-25"},{"lineNumber":530,"author":{"gitId":"squeakysquak"},"content":"* `aa 1 d/2022-03-27` adds an appointment with date `27 Mar 2022` to the first client in FAST.","lastModifiedDate":"2021-11-02"},{"lineNumber":531,"author":{"gitId":"squeakysquak"},"content":"![result for `aa 1 d/2022-03-27`](images/appointment.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":532,"author":{"gitId":"squeakysquak"},"content":"* `aa 3 d/2022-03-27 t/18:00` adds an appointment with date `27 Mar 2022` and time `1800hrs` to the third client in FAST.","lastModifiedDate":"2021-11-02"},{"lineNumber":533,"author":{"gitId":"squeakysquak"},"content":"* `find Matthew John` followed by `aa 3 d/2022-03-27 t/18:00 v/Velocity` adds an appointment with date `27 Mar 2022`, ","lastModifiedDate":"2021-11-02"},{"lineNumber":534,"author":{"gitId":"Cyn7hius"},"content":"  time `1800hrs` and venue `Velocity` to the third client in the results of the `find` command.","lastModifiedDate":"2021-10-22"},{"lineNumber":535,"author":{"gitId":"squeakysquak"},"content":"   \u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":536,"author":{"gitId":"squeakysquak"},"content":"   :information_source: This command will not work if the client has already been assigned an appointment. You will have to","lastModifiedDate":"2021-10-22"},{"lineNumber":537,"author":{"gitId":"trash-bin99"},"content":"   use the [edit appointment](#editing-an-appointment-ea) command.\u003cbr\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":538,"author":{"gitId":"squeakysquak"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":539,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":540,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":541,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":542,"author":{"gitId":"Cyn7hius"},"content":"##### Editing an appointment: `ea`","lastModifiedDate":"2021-10-26"},{"lineNumber":543,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":544,"author":{"gitId":"Py0000"},"content":"You can edit a scheduled appointment with your client. ","lastModifiedDate":"2021-10-28"},{"lineNumber":545,"author":{"gitId":"Th-429B"},"content":"This command is useful when your appointment has been rescheduled or has a change in location.","lastModifiedDate":"2021-10-25"},{"lineNumber":546,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":547,"author":{"gitId":"Th-429B"},"content":"**Format**: `ea INDEX [d/DATE] [t/TIME] [v/VENUE]`","lastModifiedDate":"2021-10-25"},{"lineNumber":548,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":549,"author":{"gitId":"Cyn7hius"},"content":"* Edits a scheduled appointment with the client at the specified `INDEX` if the appointment exist.","lastModifiedDate":"2021-10-22"},{"lineNumber":550,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":551,"author":{"gitId":"Py0000"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e :information_source: ","lastModifiedDate":"2021-10-26"},{"lineNumber":552,"author":{"gitId":"Py0000"},"content":"Existing details will be updated with the input data.","lastModifiedDate":"2021-10-26"},{"lineNumber":553,"author":{"gitId":"Py0000"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":554,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":555,"author":{"gitId":"Py0000"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e :exclamation: ","lastModifiedDate":"2021-10-26"},{"lineNumber":556,"author":{"gitId":"Py0000"},"content":"At least **one** of the optional fields must be present.","lastModifiedDate":"2021-10-26"},{"lineNumber":557,"author":{"gitId":"Py0000"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":558,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":559,"author":{"gitId":"Py0000"},"content":"**Parameter**:","lastModifiedDate":"2021-10-26"},{"lineNumber":560,"author":{"gitId":"Py0000"},"content":"* [`INDEX`](#index)","lastModifiedDate":"2021-10-26"},{"lineNumber":561,"author":{"gitId":"Py0000"},"content":"* [`DATE`](#date)","lastModifiedDate":"2021-10-26"},{"lineNumber":562,"author":{"gitId":"Py0000"},"content":"* [`TIME`](#time)","lastModifiedDate":"2021-10-26"},{"lineNumber":563,"author":{"gitId":"Py0000"},"content":"* [`VENUE`](#venue)","lastModifiedDate":"2021-10-26"},{"lineNumber":564,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":565,"author":{"gitId":"Th-429B"},"content":"**Examples**:","lastModifiedDate":"2021-10-25"},{"lineNumber":566,"author":{"gitId":"squeakysquak"},"content":"* `ea 1 d/2022-03-28` edits the appointment date to be `28 Mar 2022` of the first client.","lastModifiedDate":"2021-11-02"},{"lineNumber":567,"author":{"gitId":"squeakysquak"},"content":"![result for `ea 1 d/2022-03-28`](images/editappointmentexample.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":568,"author":{"gitId":"Py0000"},"content":"* `ea 3 v/  t/18:00` edits the appointment time to be `1800hrs` and clears the appointment venue of the third client.","lastModifiedDate":"2021-10-22"},{"lineNumber":569,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":570,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e ","lastModifiedDate":"2021-10-26"},{"lineNumber":571,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":572,"author":{"gitId":"Cyn7hius"},"content":"##### Deleting an appointment: `da`","lastModifiedDate":"2021-10-26"},{"lineNumber":573,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":574,"author":{"gitId":"Py0000"},"content":"You can delete a scheduled appointment with your client. ","lastModifiedDate":"2021-10-28"},{"lineNumber":575,"author":{"gitId":"Th-429B"},"content":"This command should be used when the appointment has been cancelled with a client.","lastModifiedDate":"2021-10-25"},{"lineNumber":576,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":577,"author":{"gitId":"Th-429B"},"content":"**Format**: `da INDEX`","lastModifiedDate":"2021-10-25"},{"lineNumber":578,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":579,"author":{"gitId":"Cyn7hius"},"content":"* Deletes a scheduled appointment with the client at the specified `INDEX` if the appointment exist.","lastModifiedDate":"2021-10-22"},{"lineNumber":580,"author":{"gitId":"Py0000"},"content":"* Existing details will be deleted.","lastModifiedDate":"2021-10-15"},{"lineNumber":581,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":582,"author":{"gitId":"Py0000"},"content":"**Parameter**:","lastModifiedDate":"2021-10-26"},{"lineNumber":583,"author":{"gitId":"Py0000"},"content":"* [`INDEX`](#index)","lastModifiedDate":"2021-10-26"},{"lineNumber":584,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":585,"author":{"gitId":"Th-429B"},"content":"**Examples**:","lastModifiedDate":"2021-10-25"},{"lineNumber":586,"author":{"gitId":"Py0000"},"content":"* `da 1` deletes the appointment of the first client.","lastModifiedDate":"2021-10-22"},{"lineNumber":587,"author":{"gitId":"squeakysquak"},"content":"![result for `da 1`](images/deleteappointmentexample.png)","lastModifiedDate":"2021-10-27"},{"lineNumber":588,"author":{"gitId":"Py0000"},"content":"* `find Ben` followed by `da 3` deletes the appointment the third client in the result of the `find` command.","lastModifiedDate":"2021-10-22"},{"lineNumber":589,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":590,"author":{"gitId":"Py0000"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-10-26"},{"lineNumber":591,"author":{"gitId":"Py0000"},"content":"This CANNOT be undone!","lastModifiedDate":"2021-10-26"},{"lineNumber":592,"author":{"gitId":"Py0000"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":593,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":594,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":595,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":596,"author":{"gitId":"Cyn7hius"},"content":"##### Updating completed appointment: `ma`","lastModifiedDate":"2021-10-26"},{"lineNumber":597,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":598,"author":{"gitId":"Py0000"},"content":"You can mark the appointment with your client as completed.","lastModifiedDate":"2021-10-28"},{"lineNumber":599,"author":{"gitId":"Th-429B"},"content":"This also allows you to keep track of the number of completed appointments with your client.","lastModifiedDate":"2021-10-25"},{"lineNumber":600,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":601,"author":{"gitId":"Py0000"},"content":"![markAppointment](images/UG-Screenshots/MarkAppointmentUGScreenshot.PNG)","lastModifiedDate":"2021-10-22"},{"lineNumber":602,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":603,"author":{"gitId":"Th-429B"},"content":"**Format**: `ma INDEX`","lastModifiedDate":"2021-10-25"},{"lineNumber":604,"author":{"gitId":"Py0000"},"content":"* Update the completed appointment count with the client at the specified `INDEX` if the appointment exist.","lastModifiedDate":"2021-10-26"},{"lineNumber":605,"author":{"gitId":"Py0000"},"content":"* The marked appointment will be deleted!","lastModifiedDate":"2021-10-26"},{"lineNumber":606,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":607,"author":{"gitId":"Py0000"},"content":"**Parameter**:","lastModifiedDate":"2021-10-26"},{"lineNumber":608,"author":{"gitId":"Py0000"},"content":"* [`INDEX`](#index)","lastModifiedDate":"2021-10-26"},{"lineNumber":609,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":610,"author":{"gitId":"Py0000"},"content":"**Examples**:","lastModifiedDate":"2021-10-26"},{"lineNumber":611,"author":{"gitId":"Py0000"},"content":"* `ma 1` updates the completed appointment counter of the first client.","lastModifiedDate":"2021-10-22"},{"lineNumber":612,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":613,"author":{"gitId":"trash-bin99"},"content":"![result for `done 1`](images/appointmentDone.PNG)","lastModifiedDate":"2021-10-26"},{"lineNumber":614,"author":{"gitId":"Py0000"},"content":"* `find Matthew` followed by `ma 3` updates the completed appointment counter of the third client in the result of ","lastModifiedDate":"2021-10-22"},{"lineNumber":615,"author":{"gitId":"Cyn7hius"},"content":"  the `find` command.","lastModifiedDate":"2021-10-22"},{"lineNumber":616,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2020-05-23"},{"lineNumber":617,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":618,"author":{"gitId":"Py0000"},"content":"##### Undo marking of completed appointment: `ua`","lastModifiedDate":"2021-10-28"},{"lineNumber":619,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":620,"author":{"gitId":"trash-bin99"},"content":"You can reduce the appointment count of your client as needed. \u003cbr\u003e","lastModifiedDate":"2021-10-30"},{"lineNumber":621,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":622,"author":{"gitId":"Py0000"},"content":"**Format**: `ua INDEX`","lastModifiedDate":"2021-10-28"},{"lineNumber":623,"author":{"gitId":"trash-bin99"},"content":"* Decreases the completed appointment count of the client at the specified `INDEX` by 1, if no appointment is ","lastModifiedDate":"2021-10-30"},{"lineNumber":624,"author":{"gitId":"trash-bin99"},"content":"  currently scheduled with the client.","lastModifiedDate":"2021-10-30"},{"lineNumber":625,"author":{"gitId":"trash-bin99"},"content":"* The current appointment count has to be greater than 0.","lastModifiedDate":"2021-10-30"},{"lineNumber":626,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":627,"author":{"gitId":"Py0000"},"content":"**Parameter**:","lastModifiedDate":"2021-10-28"},{"lineNumber":628,"author":{"gitId":"Py0000"},"content":"* [`INDEX`](#index)","lastModifiedDate":"2021-10-28"},{"lineNumber":629,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":630,"author":{"gitId":"Py0000"},"content":"**Examples**:","lastModifiedDate":"2021-10-28"},{"lineNumber":631,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":632,"author":{"gitId":"Py0000"},"content":"Before undo:","lastModifiedDate":"2021-10-28"},{"lineNumber":633,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":634,"author":{"gitId":"Py0000"},"content":"![FAST state before `ua 1`](images/UnmarkAppointmentBefore.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":635,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":636,"author":{"gitId":"Py0000"},"content":"* `ua 1` decreases the completed appointment counter of the first client by 1.","lastModifiedDate":"2021-10-28"},{"lineNumber":637,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":638,"author":{"gitId":"Py0000"},"content":"![result for `ua 1`](images/UnmarkAppointmentAfter.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":639,"author":{"gitId":"Py0000"},"content":"* `find Matthew` followed by `ua 3` decreases the completed appointment counter of the third client in the result of","lastModifiedDate":"2021-10-28"},{"lineNumber":640,"author":{"gitId":"Py0000"},"content":"  the `find` command by 1.","lastModifiedDate":"2021-10-28"},{"lineNumber":641,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":642,"author":{"gitId":"Py0000"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-10-26"},{"lineNumber":643,"author":{"gitId":"Py0000"},"content":"This CANNOT be undone!","lastModifiedDate":"2021-10-26"},{"lineNumber":644,"author":{"gitId":"Py0000"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":645,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":646,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":647,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":648,"author":{"gitId":"Cyn7hius"},"content":"#### Tags","lastModifiedDate":"2021-10-26"},{"lineNumber":649,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":650,"author":{"gitId":"Cyn7hius"},"content":"You can use our Tagging system to label and categorise your clients.","lastModifiedDate":"2021-10-26"},{"lineNumber":651,"author":{"gitId":"Th-429B"},"content":"Tags are a quick way for you to organise your contacts, and recall their key characteristics.","lastModifiedDate":"2021-10-25"},{"lineNumber":652,"author":{"gitId":"Th-429B"},"content":"In FAST, we have three main types of tags:","lastModifiedDate":"2021-10-25"},{"lineNumber":653,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":654,"author":{"gitId":"trash-bin99"},"content":"![tagOverview](images/tags_overview.png)","lastModifiedDate":"2021-10-23"},{"lineNumber":655,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":656,"author":{"gitId":"trash-bin99"},"content":"1. Normal tags, which you can customise according to your needs.","lastModifiedDate":"2021-10-23"},{"lineNumber":657,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":658,"author":{"gitId":"trash-bin99"},"content":"    \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-23"},{"lineNumber":659,"author":{"gitId":"trash-bin99"},"content":"    Tags should be used to categorise clients; use short names for normal tags that you may be able to use for other clients as well!","lastModifiedDate":"2021-10-23"},{"lineNumber":660,"author":{"gitId":"trash-bin99"},"content":"    \u003c/div\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":661,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":662,"author":{"gitId":"trash-bin99"},"content":"2. Priority tags, which have fixed names and help you to remember which contacts you need to focus on first.","lastModifiedDate":"2021-10-23"},{"lineNumber":663,"author":{"gitId":"Cyn7hius"},"content":"   ","lastModifiedDate":"2021-11-01"},{"lineNumber":664,"author":{"gitId":"trash-bin99"},"content":"    \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-23"},{"lineNumber":665,"author":{"gitId":"trash-bin99"},"content":"    A client can **only have 1 priority tag** , but they can have other non-priority tags alongside the one priority tag.","lastModifiedDate":"2021-10-23"},{"lineNumber":666,"author":{"gitId":"trash-bin99"},"content":"    \u003c/div\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":667,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":668,"author":{"gitId":"trash-bin99"},"content":"3. Investment plan tags, which help you recall the plans that each contact has bought.","lastModifiedDate":"2021-10-23"},{"lineNumber":669,"author":{"gitId":"squeakysquak"},"content":"    \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-22"},{"lineNumber":670,"author":{"gitId":"trash-bin99"},"content":"    A client can have more than 1 investment plan tag, but they may not have more than 1 of the same investment plan tag.","lastModifiedDate":"2021-10-23"},{"lineNumber":671,"author":{"gitId":"trash-bin99"},"content":"    ","lastModifiedDate":"2021-10-23"},{"lineNumber":672,"author":{"gitId":"trash-bin99"},"content":"    For example, a client may have both Savings and Investment concurrently, but not 2 instances of Savings at the same time. ","lastModifiedDate":"2021-10-23"},{"lineNumber":673,"author":{"gitId":"squeakysquak"},"content":"    \u003c/div\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":674,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":675,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":676,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":677,"author":{"gitId":"Cyn7hius"},"content":"##### Tag Naming Conventions","lastModifiedDate":"2021-10-26"},{"lineNumber":678,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":679,"author":{"gitId":"trash-bin99"},"content":"You can refer to the table below to quickly learn about how to use these three tags.","lastModifiedDate":"2021-10-23"},{"lineNumber":680,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":681,"author":{"gitId":"trash-bin99"},"content":"Tag type|Prefix|Term","lastModifiedDate":"2021-10-23"},{"lineNumber":682,"author":{"gitId":"trash-bin99"},"content":"--------|-------|-----","lastModifiedDate":"2021-10-23"},{"lineNumber":683,"author":{"gitId":"trash-bin99"},"content":"Normal|`No Prefix`| Your preferred tag name, that contains at most 20 alphanumeric characters and no spaces","lastModifiedDate":"2021-10-23"},{"lineNumber":684,"author":{"gitId":"trash-bin99"},"content":"Priority|`pr/`| `low`: Low Priority\u003cbr\u003e`med`:Medium Priority\u003cbr\u003e`high`:High Priority","lastModifiedDate":"2021-10-23"},{"lineNumber":685,"author":{"gitId":"trash-bin99"},"content":"Investment plan|`ip/`| `health`: Health Insurance\u003cbr\u003e`invest`: Investment\u003cbr\u003e`life`: Life Insurance\u003cbr\u003e`motor`: Motor Insurance\u003cbr\u003e`property`: Property Insurance \u003cbr\u003e`save`: Savings \u003cbr\u003e`travel`: Travel Insurance","lastModifiedDate":"2021-10-23"},{"lineNumber":686,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":687,"author":{"gitId":"trash-bin99"},"content":"In general, append the term to the prefix when referring to a priority or investment plan tag.","lastModifiedDate":"2021-10-23"},{"lineNumber":688,"author":{"gitId":"trash-bin99"},"content":"Normal tags do not have prefixes, so simply type in the desired tag name.","lastModifiedDate":"2021-10-23"},{"lineNumber":689,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":690,"author":{"gitId":"trash-bin99"},"content":"More examples of how to use these will be given in the following section.","lastModifiedDate":"2021-10-23"},{"lineNumber":691,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":692,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":693,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":694,"author":{"gitId":"Cyn7hius"},"content":"##### Using tags: `tag`","lastModifiedDate":"2021-11-01"},{"lineNumber":695,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":696,"author":{"gitId":"Cyn7hius"},"content":"You can add or delete the tags of a specified client. ","lastModifiedDate":"2021-10-26"},{"lineNumber":697,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":698,"author":{"gitId":"Th-429B"},"content":"**Format**: `tag INDEX [a/TAG] [d/TAG]`","lastModifiedDate":"2021-10-25"},{"lineNumber":699,"author":{"gitId":"trash-bin99"},"content":"* Use `a/` to add a tag, and `d/` to delete a tag.","lastModifiedDate":"2021-10-23"},{"lineNumber":700,"author":{"gitId":"Cyn7hius"},"content":"* To add Priority or Investment Plan Tags, remember to add their prefixes!","lastModifiedDate":"2021-11-01"},{"lineNumber":701,"author":{"gitId":"trash-bin99"},"content":"* Does not affect any unmentioned tags, unlike `edit`.","lastModifiedDate":"2021-10-23"},{"lineNumber":702,"author":{"gitId":"trash-bin99"},"content":"* Delete operations are performed first before add operations, regardless of their order in the input.","lastModifiedDate":"2021-10-23"},{"lineNumber":703,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":704,"author":{"gitId":"Py0000"},"content":"**Parameter**:","lastModifiedDate":"2021-10-26"},{"lineNumber":705,"author":{"gitId":"Py0000"},"content":"* [`INDEX`](#index)","lastModifiedDate":"2021-10-26"},{"lineNumber":706,"author":{"gitId":"Py0000"},"content":"* [`TAG`](#tag)","lastModifiedDate":"2021-10-26"},{"lineNumber":707,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":708,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":709,"author":{"gitId":"Th-429B"},"content":"**Examples**: ","lastModifiedDate":"2021-10-25"},{"lineNumber":710,"author":{"gitId":"squeakysquak"},"content":"* `tag 1 a/family d/friends` will delete the `friends` tag before adding the `family` tag.","lastModifiedDate":"2021-10-27"},{"lineNumber":711,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":712,"author":{"gitId":"trash-bin99"},"content":"![tagExample1](images/tagExample1.png)","lastModifiedDate":"2021-10-23"},{"lineNumber":713,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":714,"author":{"gitId":"trash-bin99"},"content":"* `tag 1 d/pr/high a/pr/low` will delete the `HighPriority` tag before adding the `LowPriority` tag.","lastModifiedDate":"2021-10-23"},{"lineNumber":715,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":716,"author":{"gitId":"trash-bin99"},"content":"![tagExample2](images/tagExample2.png)","lastModifiedDate":"2021-10-23"},{"lineNumber":717,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":718,"author":{"gitId":"trash-bin99"},"content":"* `tag 1 a/ip/property` will add a `PropertyInsurance` tag to the contact.","lastModifiedDate":"2021-10-23"},{"lineNumber":719,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":720,"author":{"gitId":"trash-bin99"},"content":"![tagExample3](images/tagExample3.png)","lastModifiedDate":"2021-10-23"},{"lineNumber":721,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":722,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":723,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":724,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":725,"author":{"gitId":"Cyn7hius"},"content":"### **Managing your client base**","lastModifiedDate":"2021-10-26"},{"lineNumber":726,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":727,"author":{"gitId":"Cyn7hius"},"content":"In addition to changing individual [client\u0027s](#managing-a-client) details, you can also perform commands which affects your entire client list.","lastModifiedDate":"2021-10-26"},{"lineNumber":728,"author":{"gitId":"Cyn7hius"},"content":"This allows you to easily navigate your client list and improve your efficiency!","lastModifiedDate":"2021-10-26"},{"lineNumber":729,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":730,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":731,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":732,"author":{"gitId":"Cyn7hius"},"content":"#### Listing all clients: `list`","lastModifiedDate":"2021-10-26"},{"lineNumber":733,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":734,"author":{"gitId":"Cyn7hius"},"content":"You can use this command to view your entire client list! This command is especially useful to return","lastModifiedDate":"2021-10-26"},{"lineNumber":735,"author":{"gitId":"Cyn7hius"},"content":"to viewing your full client list after a","lastModifiedDate":"2021-10-26"},{"lineNumber":736,"author":{"gitId":"Cyn7hius"},"content":"[find](#searching-for-clients-find) command has been executed.","lastModifiedDate":"2021-10-26"},{"lineNumber":737,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":738,"author":{"gitId":"Cyn7hius"},"content":"**Format**: `list`","lastModifiedDate":"2021-10-26"},{"lineNumber":739,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":740,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":741,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":742,"author":{"gitId":"Cyn7hius"},"content":"#### Sorting all clients: `sort`","lastModifiedDate":"2021-10-26"},{"lineNumber":743,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":744,"author":{"gitId":"Cyn7hius"},"content":"You can sort all your clients by a given condition, allowing you to keep your clients list orderly and well-organised.","lastModifiedDate":"2021-10-26"},{"lineNumber":745,"author":{"gitId":"Cyn7hius"},"content":"You also can use this command quickly sieve through large client lists.","lastModifiedDate":"2021-10-26"},{"lineNumber":746,"author":{"gitId":"trash-bin99"},"content":"Currently, you can sort by name, [appointment date](#appointments), and [priority tag](#tags).","lastModifiedDate":"2021-10-27"},{"lineNumber":747,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":748,"author":{"gitId":"Cyn7hius"},"content":"**Format**: `sort KEYWORD`","lastModifiedDate":"2021-10-26"},{"lineNumber":749,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":750,"author":{"gitId":"Cyn7hius"},"content":"**Parameter**","lastModifiedDate":"2021-10-27"},{"lineNumber":751,"author":{"gitId":"Cyn7hius"},"content":"* [`KEYWORD`](#keyword)","lastModifiedDate":"2021-10-27"},{"lineNumber":752,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":753,"author":{"gitId":"Cyn7hius"},"content":"**Example**:","lastModifiedDate":"2021-10-26"},{"lineNumber":754,"author":{"gitId":"Cyn7hius"},"content":"* `sort priority` Sorts all existing clients by their priority tag, from the highest priority to the lowest priority.","lastModifiedDate":"2021-10-26"},{"lineNumber":755,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":756,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":757,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":758,"author":{"gitId":"Cyn7hius"},"content":"#### Searching for clients: `find`","lastModifiedDate":"2021-10-26"},{"lineNumber":759,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":760,"author":{"gitId":"trash-bin99"},"content":"You can use this command to find clients by their name, [priority](#tags), [tags](#tags) or","lastModifiedDate":"2021-10-27"},{"lineNumber":761,"author":{"gitId":"trash-bin99"},"content":"[remarks](#adding-a-remark-to-your-client-rmk). This is useful if your have many clients in FAST and wish to quickly find a","lastModifiedDate":"2021-10-26"},{"lineNumber":762,"author":{"gitId":"Cyn7hius"},"content":"specific client. To return to the full client list, you can use the [list](#listing-all-clients-list) command","lastModifiedDate":"2021-10-26"},{"lineNumber":763,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":764,"author":{"gitId":"Cyn7hius"},"content":"**Format 1**: `find QUERY [MORE_QUERIES]` \u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":765,"author":{"gitId":"Cyn7hius"},"content":"**Format 2**: `find pr/PRIORITY [MORE_PRIORITIES]`\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":766,"author":{"gitId":"Cyn7hius"},"content":"**Format 3**: `find t/TAG [MORE TAGS]`\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":767,"author":{"gitId":"Cyn7hius"},"content":"**Format 4**: `find r/REMARK [MORE REMARKS]`\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":768,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":769,"author":{"gitId":"Cyn7hius"},"content":"* The search is case-insensitive. e.g. `hans` will match `Hans`","lastModifiedDate":"2021-10-26"},{"lineNumber":770,"author":{"gitId":"Cyn7hius"},"content":"* The order of the queries does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2021-10-26"},{"lineNumber":771,"author":{"gitId":"Cyn7hius"},"content":"* You can search by name, priority, tags or remarks using the formats shown above.","lastModifiedDate":"2021-10-26"},{"lineNumber":772,"author":{"gitId":"Cyn7hius"},"content":"* Names with words starting with the query will match. e.g. `Han` will match `Solo Hans`.","lastModifiedDate":"2021-10-26"},{"lineNumber":773,"author":{"gitId":"Cyn7hius"},"content":"* Any remarks containing the searched remark will match. e.g. `r/piz` will match `likes pizza`.","lastModifiedDate":"2021-10-26"},{"lineNumber":774,"author":{"gitId":"Cyn7hius"},"content":"* Clients matching at least one search query will be returned (i.e. `OR` search).","lastModifiedDate":"2021-10-26"},{"lineNumber":775,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2021-10-26"},{"lineNumber":776,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":777,"author":{"gitId":"Py0000"},"content":"**Parameters**:","lastModifiedDate":"2021-10-26"},{"lineNumber":778,"author":{"gitId":"Py0000"},"content":"* [`QUERY`](#query)","lastModifiedDate":"2021-10-26"},{"lineNumber":779,"author":{"gitId":"Py0000"},"content":"* [`PRIORITY`](#tag)","lastModifiedDate":"2021-10-26"},{"lineNumber":780,"author":{"gitId":"Py0000"},"content":"* [`TAG`](#tag)","lastModifiedDate":"2021-10-26"},{"lineNumber":781,"author":{"gitId":"Py0000"},"content":"* [`REMARK`](#remark)","lastModifiedDate":"2021-10-26"},{"lineNumber":782,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":783,"author":{"gitId":"Cyn7hius"},"content":"**Examples**:","lastModifiedDate":"2021-10-26"},{"lineNumber":784,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2021-10-26"},{"lineNumber":785,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":786,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":787,"author":{"gitId":"Cyn7hius"},"content":"* `find pr/high med` returns all clients with `HighPriority` and `MediumPriority`.","lastModifiedDate":"2021-10-26"},{"lineNumber":788,"author":{"gitId":"Cyn7hius"},"content":"* `find t/friends enemies` returns all clients tagged with `friends` or `enemies`.","lastModifiedDate":"2021-10-26"},{"lineNumber":789,"author":{"gitId":"Cyn7hius"},"content":"* `find r/good` returns all clients with remarks containing `good`.","lastModifiedDate":"2021-10-26"},{"lineNumber":790,"author":{"gitId":"Cyn7hius"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-26"},{"lineNumber":791,"author":{"gitId":"Cyn7hius"},"content":"When searching for remarks, use more specific queries for better results.","lastModifiedDate":"2021-10-26"},{"lineNumber":792,"author":{"gitId":"Cyn7hius"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":793,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":794,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":795,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":796,"author":{"gitId":"Cyn7hius"},"content":"#### Clearing all entries: `clear`","lastModifiedDate":"2021-10-26"},{"lineNumber":797,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":798,"author":{"gitId":"Cyn7hius"},"content":"You can clear all clients from FAST. This command is useful to remove the default sample data in FAST.","lastModifiedDate":"2021-10-26"},{"lineNumber":799,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":800,"author":{"gitId":"Th-429B"},"content":"**Format**: `clear`","lastModifiedDate":"2021-10-25"},{"lineNumber":801,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":802,"author":{"gitId":"Cyn7hius"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-10-22"},{"lineNumber":803,"author":{"gitId":"Cyn7hius"},"content":"This CANNOT be undone! ","lastModifiedDate":"2021-10-22"},{"lineNumber":804,"author":{"gitId":"Cyn7hius"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":805,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":806,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":807,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":808,"author":{"gitId":"Py0000"},"content":"### **Others**","lastModifiedDate":"2021-10-26"},{"lineNumber":809,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":810,"author":{"gitId":"Cyn7hius"},"content":"#### Viewing help: `help`","lastModifiedDate":"2021-10-26"},{"lineNumber":811,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":812,"author":{"gitId":"Cyn7hius"},"content":"You can use the `help` command to open a new window that contains the command usage, and a quick start guide.","lastModifiedDate":"2021-10-26"},{"lineNumber":813,"author":{"gitId":"Cyn7hius"},"content":"In the help window, you can view all the command usages built-in right into FAST using the dropdown menu.","lastModifiedDate":"2021-10-26"},{"lineNumber":814,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":815,"author":{"gitId":"Cyn7hius"},"content":"![help window](images/helpWindow.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":816,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":817,"author":{"gitId":"trash-bin99"},"content":"**Format**: `help [HELP_TOPIC]`","lastModifiedDate":"2021-10-30"},{"lineNumber":818,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":819,"author":{"gitId":"Py0000"},"content":"**Parameters**:","lastModifiedDate":"2021-10-26"},{"lineNumber":820,"author":{"gitId":"trash-bin99"},"content":"* [`HELP_TOPIC`](#help-topics)","lastModifiedDate":"2021-10-30"},{"lineNumber":821,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":822,"author":{"gitId":"Cyn7hius"},"content":"**Examples**:","lastModifiedDate":"2021-10-26"},{"lineNumber":823,"author":{"gitId":"Cyn7hius"},"content":"* `help` will just open the default help window","lastModifiedDate":"2021-10-26"},{"lineNumber":824,"author":{"gitId":"Cyn7hius"},"content":"* `help add` will open the help window and directly navigate to the `Add` command help page.","lastModifiedDate":"2021-10-26"},{"lineNumber":825,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":826,"author":{"gitId":"Cyn7hius"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-26"},{"lineNumber":827,"author":{"gitId":"Cyn7hius"},"content":"The help window can also be quickly accessed by entering using the F1 key on your keyboard!","lastModifiedDate":"2021-10-26"},{"lineNumber":828,"author":{"gitId":"Cyn7hius"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":829,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":830,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":831,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":832,"author":{"gitId":"Cyn7hius"},"content":"#### Viewing statistics","lastModifiedDate":"2021-10-26"},{"lineNumber":833,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":834,"author":{"gitId":"Cyn7hius"},"content":"You can view FAST\u0027s built-in statistics and see and overview of your client\u0027s data.","lastModifiedDate":"2021-10-26"},{"lineNumber":835,"author":{"gitId":"Cyn7hius"},"content":"To view the statistics, simply click the \"Stats\" menu item on the top bar or press `F2`. You should see a window open","lastModifiedDate":"2021-10-26"},{"lineNumber":836,"author":{"gitId":"Cyn7hius"},"content":"that looks like this:","lastModifiedDate":"2021-10-26"},{"lineNumber":837,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":838,"author":{"gitId":"Cyn7hius"},"content":"![stats window](images/statsWindow.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":839,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":840,"author":{"gitId":"Cyn7hius"},"content":"Currently, FAST supports these statistics:","lastModifiedDate":"2021-10-26"},{"lineNumber":841,"author":{"gitId":"Cyn7hius"},"content":"* Priority Tag Chart: View the breakdown of your client\u0027s priority.","lastModifiedDate":"2021-10-26"},{"lineNumber":842,"author":{"gitId":"Cyn7hius"},"content":"* Insurance Plan Chart: View the distribution of your insurance plans sold.","lastModifiedDate":"2021-10-26"},{"lineNumber":843,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":844,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":845,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":846,"author":{"gitId":"Cyn7hius"},"content":"#### Exiting the program: `exit`","lastModifiedDate":"2021-10-26"},{"lineNumber":847,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":848,"author":{"gitId":"Cyn7hius"},"content":"You can exit the program using this command.","lastModifiedDate":"2021-10-26"},{"lineNumber":849,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":850,"author":{"gitId":"Th-429B"},"content":"**Format**: `exit`","lastModifiedDate":"2021-10-25"},{"lineNumber":851,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":852,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":853,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":854,"author":{"gitId":"Cyn7hius"},"content":"#### Saving the data","lastModifiedDate":"2021-10-26"},{"lineNumber":855,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":856,"author":{"gitId":"Cyn7hius"},"content":"You do not have to worry about saving the data manually! FAST automatically saves your data after any changes are made.","lastModifiedDate":"2021-10-26"},{"lineNumber":857,"author":{"gitId":"Cyn7hius"},"content":"This way, you can focus solely on serving your clients better!","lastModifiedDate":"2021-10-26"},{"lineNumber":858,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":859,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":860,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":861,"author":{"gitId":"Cyn7hius"},"content":"#### Editing the data file","lastModifiedDate":"2021-10-26"},{"lineNumber":862,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":863,"author":{"gitId":"Th-429B"},"content":"FAST data is saved as a JSON file. ","lastModifiedDate":"2021-10-25"},{"lineNumber":864,"author":{"gitId":"Cyn7hius"},"content":"You can find this at `[JAR file location]/data/fast.json`. ","lastModifiedDate":"2021-10-26"},{"lineNumber":865,"author":{"gitId":"Th-429B"},"content":"If you are an advanced user, feel free to update your data directly, by editing that data file.","lastModifiedDate":"2021-10-25"},{"lineNumber":866,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":867,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":868,"author":{"gitId":"trash-bin99"},"content":"**Be extremely careful when making any changes to the data file!**\u003cbr\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":869,"author":{"gitId":"Th-429B"},"content":"If any of your changes to the data file causes FAST to be unable to read the data file, ","lastModifiedDate":"2021-10-25"},{"lineNumber":870,"author":{"gitId":"Th-429B"},"content":"FAST will start with an empty data file on the next run!","lastModifiedDate":"2021-10-25"},{"lineNumber":871,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":872,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":873,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":874,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":875,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":876,"author":{"gitId":"Cyn7hius"},"content":"## **FAQs**","lastModifiedDate":"2021-10-26"},{"lineNumber":877,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":878,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":879,"author":{"gitId":"trash-bin99"},"content":"**A**: Install the app in the other computer and move your previous FAST `data` folder into the new FAST home folder. The `data` folder is shown below. \u003cbr\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":880,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":881,"author":{"gitId":"trash-bin99"},"content":"![moveData](images/moveData.png)","lastModifiedDate":"2021-10-23"},{"lineNumber":882,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":883,"author":{"gitId":"trash-bin99"},"content":"**Q**: How do I save my data?\u003cbr\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":884,"author":{"gitId":"trash-bin99"},"content":"**A**: You do not need to manually save any data, FAST automatically saves all your data for you when you exit the application.\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":885,"author":{"gitId":"trash-bin99"},"content":"**Q**: I edited my data file, and now when I start FAST all my contacts are gone! What happened?\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":886,"author":{"gitId":"trash-bin99"},"content":"**A**: It is likely that some of your changes to your data file caused FAST to be unable to read your data file. Double-check the changes you made, or revert them if necessary. If FAST is able to read the data file after you made the changes, all your saved contacts will appear on the next start.","lastModifiedDate":"2021-10-23"},{"lineNumber":887,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":888,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":889,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":890,"author":{"gitId":"Cyn7hius"},"content":"## **Command summary**","lastModifiedDate":"2021-10-26"},{"lineNumber":891,"author":{"gitId":"Py0000"},"content":"The tables below provides you with a summary for **all** the available commands in FAST. You can use this section to quickly refresh your memory on the different command formats. ","lastModifiedDate":"2021-10-26"},{"lineNumber":892,"author":{"gitId":"Py0000"},"content":"The commands are categorised (based on their purpose) into 5 different categories:","lastModifiedDate":"2021-10-26"},{"lineNumber":893,"author":{"gitId":"trash-bin99"},"content":"* [Contact Management](#contact-management)","lastModifiedDate":"2021-10-27"},{"lineNumber":894,"author":{"gitId":"trash-bin99"},"content":"* [Appointment Management](#appointment-management)","lastModifiedDate":"2021-10-27"},{"lineNumber":895,"author":{"gitId":"trash-bin99"},"content":"* [Tag Management](#tag-management)","lastModifiedDate":"2021-10-27"},{"lineNumber":896,"author":{"gitId":"trash-bin99"},"content":"* [Navigation](#navigation)","lastModifiedDate":"2021-10-27"},{"lineNumber":897,"author":{"gitId":"trash-bin99"},"content":"* [Other Commands](#other-commands)","lastModifiedDate":"2021-10-27"},{"lineNumber":898,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":899,"author":{"gitId":"Th-429B"},"content":"### Contact Management","lastModifiedDate":"2021-10-25"},{"lineNumber":900,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":901,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":902,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":903,"author":{"gitId":"Cyn7hius"},"content":"**Add Contact** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`","lastModifiedDate":"2021-10-18"},{"lineNumber":904,"author":{"gitId":"Cyn7hius"},"content":"**Delete Contact** | `del INDEX`\u003cbr\u003e e.g. `del 3`","lastModifiedDate":"2021-10-18"},{"lineNumber":905,"author":{"gitId":"Cyn7hius"},"content":"**Edit Contact** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.`edit 2 n/James Lee e/jameslee@example.com`","lastModifiedDate":"2021-10-18"},{"lineNumber":906,"author":{"gitId":"Th-429B"},"content":"**Add Remark** | `rmk INDEX [r/REMARK]`","lastModifiedDate":"2021-10-25"},{"lineNumber":907,"author":{"gitId":"squeakysquak"},"content":"**Edit Remark** | `rmk INDEX r/REMARK` OR `rmk INDEX`\u003cbr\u003e e.g. `rmk 1 r/likes dogs`","lastModifiedDate":"2021-10-20"},{"lineNumber":908,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":909,"author":{"gitId":"trash-bin99"},"content":"### Appointment Management","lastModifiedDate":"2021-10-27"},{"lineNumber":910,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":911,"author":{"gitId":"Th-429B"},"content":"Action | Format, Examples","lastModifiedDate":"2021-10-25"},{"lineNumber":912,"author":{"gitId":"Th-429B"},"content":"--------|------------------","lastModifiedDate":"2021-10-25"},{"lineNumber":913,"author":{"gitId":"Th-429B"},"content":"**Add appointment** |`aa INDEX d/DATE [t/TIME] [v/VENUE]`\u003cbr\u003e e.g. `aa 3 d/2021-03-27 t/18:00 v/Clementi Park`\u003cbr\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":914,"author":{"gitId":"Th-429B"},"content":"**Delete Appointment** | `da INDEX`\u003cbr\u003e e.g. `da 1`\u003cbr\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":915,"author":{"gitId":"Th-429B"},"content":"**Edit Appointment** | `ea INDEX [d/DATE] [t/TIME] [v/VENUE]`\u003cbr\u003e e.g. `ea 3 v/Clementi Town d/2021-03-27 t/18:00`\u003cbr\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":916,"author":{"gitId":"Th-429B"},"content":"**Update Completed Appointment** | `ma INDEX`\u003cbr\u003e e.g. `ma 5`","lastModifiedDate":"2021-10-25"},{"lineNumber":917,"author":{"gitId":"Py0000"},"content":"**Undo Marked Appointment** | `ua INDEX` \u003cbr\u003e e.g. `ua 1`","lastModifiedDate":"2021-10-28"},{"lineNumber":918,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":919,"author":{"gitId":"trash-bin99"},"content":"### Tag Management","lastModifiedDate":"2021-10-27"},{"lineNumber":920,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":921,"author":{"gitId":"Th-429B"},"content":"Action | Format, Examples","lastModifiedDate":"2021-10-25"},{"lineNumber":922,"author":{"gitId":"Th-429B"},"content":"--------|------------------","lastModifiedDate":"2021-10-25"},{"lineNumber":923,"author":{"gitId":"Th-429B"},"content":"**Edit Tag** |`tag INDEX a/[TAG] d/[TAG]` \u003cbr\u003e e.g. `tag 1 a/friend d/ip/life`","lastModifiedDate":"2021-10-25"},{"lineNumber":924,"author":{"gitId":"Th-429B"},"content":"**Investment Plan Tag** | Health Insurance: `ip/health`\u003cbr\u003eInvestment: `ip/invest`\u003cbr\u003eLife Insurance: `ip/life`\u003cbr\u003eMotor Insurance: `ip/motor`\u003cbr\u003eProperty Insurance: `ip/property`\u003cbr\u003eSavings: `ip/save`\u003cbr\u003eTravel Insurance: `ip/travel`\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":925,"author":{"gitId":"Th-429B"},"content":"**Priority Tag** | Low Priority: `pr/low`\u003cbr\u003eMedium Priority: `pr/med`\u003cbr\u003eHigh Priority: `pr/high`","lastModifiedDate":"2021-10-25"},{"lineNumber":926,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":927,"author":{"gitId":"Th-429B"},"content":"### Navigation","lastModifiedDate":"2021-10-25"},{"lineNumber":928,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":929,"author":{"gitId":"Th-429B"},"content":"Action | Format, Examples","lastModifiedDate":"2021-10-25"},{"lineNumber":930,"author":{"gitId":"Th-429B"},"content":"--------|------------------","lastModifiedDate":"2021-10-25"},{"lineNumber":931,"author":{"gitId":"squeakysquak"},"content":"**Find** | `find QUERY [MORE_QUERIES]` OR `find pr/PRIORITY [MORE_PRIORITIES]` OR `find t/TAG [MORE TAGS]` OR `find r/REMARK [MORE REMARKS]`\u003cbr\u003e e.g. `find James Jake`","lastModifiedDate":"2021-10-20"},{"lineNumber":932,"author":{"gitId":"Th-429B"},"content":"**Sort** | `sort KEYWORD`","lastModifiedDate":"2021-10-17"},{"lineNumber":933,"author":{"gitId":"-"},"content":"**List** | `list`","lastModifiedDate":"2021-10-25"},{"lineNumber":934,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":935,"author":{"gitId":"trash-bin99"},"content":"### Other Commands","lastModifiedDate":"2021-10-27"},{"lineNumber":936,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":937,"author":{"gitId":"Th-429B"},"content":"Action|Format, Examples","lastModifiedDate":"2021-10-25"},{"lineNumber":938,"author":{"gitId":"Th-429B"},"content":"--------|------------------","lastModifiedDate":"2021-10-25"},{"lineNumber":939,"author":{"gitId":"trash-bin99"},"content":"**Help** | `help [HELP_TOPIC]` \u003cbr\u003e e.g. `help add`","lastModifiedDate":"2021-10-30"},{"lineNumber":940,"author":{"gitId":"Th-429B"},"content":"**Clear** | `clear`","lastModifiedDate":"2021-10-25"},{"lineNumber":941,"author":{"gitId":"Th-429B"},"content":"**Exit** | `exit`","lastModifiedDate":"2021-10-25"},{"lineNumber":942,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":943,"author":{"gitId":"Py0000"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-10-26"},{"lineNumber":944,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":945,"author":{"gitId":"Cyn7hius"},"content":"## **Glossary**","lastModifiedDate":"2021-10-26"},{"lineNumber":946,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":947,"author":{"gitId":"Cyn7hius"},"content":"This section serves to provide a summary of descriptions and definitions of terms used throughout this User Guide. ","lastModifiedDate":"2021-10-26"},{"lineNumber":948,"author":{"gitId":"Cyn7hius"},"content":"Familiarising yourself with this section will make the User Guide easier to read.","lastModifiedDate":"2021-10-26"},{"lineNumber":949,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":950,"author":{"gitId":"Cyn7hius"},"content":"Term | Meaning","lastModifiedDate":"2021-10-26"},{"lineNumber":951,"author":{"gitId":"Cyn7hius"},"content":"--------|------------------","lastModifiedDate":"2021-10-26"},{"lineNumber":952,"author":{"gitId":"Cyn7hius"},"content":"**Graphical User Interface (GUI)** | A GUI allows users to use graphics to interact with a device.","lastModifiedDate":"2021-10-26"},{"lineNumber":953,"author":{"gitId":"Cyn7hius"},"content":"**Command Line Interface (GUI)** | A CLI allows users to use commands in the form of text as input to a device.","lastModifiedDate":"2021-10-26"},{"lineNumber":954,"author":{"gitId":"Cyn7hius"},"content":"**Java** | Java is a runtime environment that allows applications such as FAST to be run on your computer.","lastModifiedDate":"2021-10-26"},{"lineNumber":955,"author":{"gitId":"Cyn7hius"},"content":"**Command** | An instruction typed by a user, to be executed by FAST.","lastModifiedDate":"2021-10-26"},{"lineNumber":956,"author":{"gitId":"Cyn7hius"},"content":"**Parameter** | A section of a command that requires user input to be entered.","lastModifiedDate":"2021-10-26"},{"lineNumber":957,"author":{"gitId":"Cyn7hius"},"content":"**Prefix** | An identifier for a parameter to be entered right before the actual parameter of a command. Prefix\u0027s end with a slash (/).","lastModifiedDate":"2021-10-26"},{"lineNumber":958,"author":{"gitId":"Cyn7hius"},"content":"**Priority** | A label applied to clients, indicating the contact\u0027s value to the user.","lastModifiedDate":"2021-10-26"},{"lineNumber":959,"author":{"gitId":"Cyn7hius"},"content":"**Tag** | A label used to describe clients.","lastModifiedDate":"2021-10-26"},{"lineNumber":960,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"trash-bin99":165,"squeakysquak":44,"Py0000":313,"-":135,"Cyn7hius":220,"Th-429B":83}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"squeakysquak"},"content":"    content: \"FAST\";","lastModifiedDate":"2021-09-28"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"squeakysquak":1,"-":294}},{"path":"docs/diagrams/AppointmentActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"@startuml","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"start","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"title Fast Appointment Activity Diagram","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":":User executes command;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"if () then ([recognised command])","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"    :Parse command;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"    if () then ([is appointment-related])","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"            :Check User Input;","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"            if () then ([all valid])","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"            :Create new appointment with the","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"            corresponding data, time, venue;","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"            :Update Model;","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"            :Save Fast to","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"            fastStateList;","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"            else ([1 invalid])","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"            - Thrown Exception","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"            endif","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"        else ([other command])","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"        - Handled by the corresponding classes","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"        endif","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"else ([other command])","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"  -Throw exception","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"endif","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"- Display result / message","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"stop","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"@enduml","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"Py0000":31}},{"path":"docs/diagrams/AppointmentAddedState.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"@startuml","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"skinparam arrowColor #000000","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"show fields","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"title Adding new Appointment","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"object \"__:Person__\" as normalHuman {","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"object \"__:Appointment__\" as completeAppointment {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"    - date \u003d \"11 Oct 2022\"","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"    - time \u003d \"1000\"","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"    - venue \u003d \"NUS\"","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"object \"__:AppointmentCount__\" as emptyAppointmentCount {","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"    - count \u003d 0","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"normalHuman --\u003e completeAppointment","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"normalHuman --\u003e emptyAppointmentCount","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"@enduml","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"Py0000":27}},{"path":"docs/diagrams/AppointmentAddedState2.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"@startuml","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"skinparam arrowColor #000000","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"show fields","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"title Adding new Appointment","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"object \"__:Person__\" as normalHuman {","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"object \"__:Appointment__\" as completeAppointment {","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"    - date \u003d \"15 May 2022\"","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"    - time \u003d \"1000\"","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"    - venue \u003d \"NUS\"","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"object \"__:AppointmentCount__\" as emptyAppointmentCount {","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"    - count \u003d 0","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"normalHuman --\u003e completeAppointment","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"normalHuman --\u003e emptyAppointmentCount","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"@enduml","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"Py0000":27}},{"path":"docs/diagrams/AppointmentAddedState3.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"@startuml","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"skinparam arrowColor #000000","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"show fields","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"title Adding new Appointment","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"object \"__:Person__\" as normalHuman {","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"object \"__:Appointment__\" as completeAppointment {","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"    - date \u003d \"No Appointment Scheduled Yet\"","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"    - time \u003d \"\"","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"    - venue \u003d \"\"","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"object \"__:AppointmentCount__\" as emptyAppointmentCount {","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"    - count \u003d 1","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"normalHuman --\u003e completeAppointment","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"normalHuman --\u003e emptyAppointmentCount","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"@enduml","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"Py0000":27}},{"path":"docs/diagrams/AppointmentDefaultState.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"@startuml","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"skinparam arrowColor #000000","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"show fields","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"title Default Appointment","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"object \"__:Person__\" as normalHuman {","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"object \"__:Appointment__\" as emptyAppointment {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"    - date \u003d \"No Appointment Scheduled Yet\"","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"    - time \u003d \"\"","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"    - venue \u003d \"\"","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"object \"__:AppointmentCount__\" as emptyAppointmentCount {","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"    - count \u003d 0","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"normalHuman --\u003e emptyAppointment","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"normalHuman --\u003e emptyAppointmentCount","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"@enduml","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"Py0000":29}},{"path":"docs/diagrams/AppointmentSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"@startuml","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"!include style.puml","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"participant \":FastParser\" as FastParser LOGIC_COLOR","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"participant \":AppointmentCommandParser\" as AppointmentCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"participant \"ac:AppointmentCommand\" as AppointmentCommand LOGIC_COLOR","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"end box","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"participant \"a:Appointment\" as Appointment MODEL_COLOR","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"end box","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"[-\u003e LogicManager : execute(\"aa 1 d/2022-10-11 t/10:00 v/NUS\")","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"activate LogicManager","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"LogicManager -\u003e FastParser : parseCommand(\"aa 1 d/2022-10-11 t/10:00 v/NUS\")","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"activate FastParser","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"create AppointmentCommandParser","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"FastParser -\u003e AppointmentCommandParser","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"activate AppointmentCommandParser","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"AppointmentCommandParser --\u003e FastParser","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"deactivate AppointmentCommandParser","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"FastParser -\u003e AppointmentCommandParser : parse(\"1 d/2022-10-11 t/10:00 v/NUS\")","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"activate AppointmentCommandParser","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"create Appointment","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"AppointmentCommandParser -\u003e Appointment : Appointment(\"11 Oct 2022\", \"1000\", \"NUS\")","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"activate Appointment","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"Appointment --\u003e AppointmentCommandParser : a","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"deactivate Appointment","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"create AppointmentCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"AppointmentCommandParser -\u003e AppointmentCommand : AppointmentCommand(1, a)","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"activate AppointmentCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"AppointmentCommand --\u003e AppointmentCommandParser : ac","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"deactivate AppointmentCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"AppointmentCommandParser --\u003e FastParser : ac","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"deactivate AppointmentCommandParser","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"AppointmentCommandParser -[hidden]-\u003e FastParser","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"destroy AppointmentCommandParser","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"FastParser --\u003e LogicManager : ac","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"deactivate FastParser","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"LogicManager -\u003e AppointmentCommand : execute()","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"activate AppointmentCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"AppointmentCommand -\u003e Model : setPerson(PersonToEdit, editedPerson)","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"activate Model","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"Model --\u003e AppointmentCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"deactivate Model","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"create CommandResult","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"AppointmentCommand -\u003e CommandResult : CommandResult(successMsg)","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"activate CommandResult","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"CommandResult --\u003e AppointmentCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"deactivate CommandResult","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"AppointmentCommand --\u003e LogicManager","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"deactivate AppointmentCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"deactivate LogicManager","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"@enduml","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"Py0000":77}},{"path":"docs/diagrams/ArchitectureSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":UI\" as ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Participant \":Storage\" as storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"user -[USER_COLOR]\u003e ui : \"delete 1\"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"activate ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"logic -[LOGIC_COLOR]\u003e model : deletePerson(p)","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"model -[MODEL_COLOR]-\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"deactivate model","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"logic -[LOGIC_COLOR]\u003e storage : saveFast(Fast)","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"storage -[STORAGE_COLOR]\u003e storage : Save to file","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e storage","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"logic --[LOGIC_COLOR]\u003e ui","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"deactivate logic","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ui--[UI_COLOR]\u003e user","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate ui","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":1,"-":37}},{"path":"docs/diagrams/BetterModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"Fast *-right-\u003e \"1\" UniquePersonList","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"Fast *-right-\u003e \"1\" UniqueTagList","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"UniqueTagList -[hidden]down- UniquePersonList","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"UniqueTagList -[hidden]down- UniquePersonList","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"UniqueTagList *-right-\u003e \"*\" Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"UniquePersonList -right-\u003e Person","lastModifiedDate":"2021-07-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"Tag \u003c|-up- InvestmentPlanTag","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"Tag \u003c|-up- PriorityTag","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Person -up-\u003e \"*\" Tag","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"Person *---\u003e \"1\" Name","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"Person *---\u003e \"1\" Phone","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"Person *---\u003e \"1\" Email","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"Person *---\u003e \"   1\" Address","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"Person *---\u003e \"          0...1\" Remark","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"Person *---\u003e \"          0...1\" Appointment","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"Person *---\u003e \"1\" AppointmentCount","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":14,"-":15}},{"path":"docs/diagrams/CommitActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"start","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":":User executes command;","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"if () then ([command commits Fast])","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    :Purge redundant states;","lastModifiedDate":"2020-12-12"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"    :Save Fast to","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"    fastStateList;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"else ([else])","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"endif","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"stop","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":3,"-":12}},{"path":"docs/diagrams/DeleteSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"participant \":FastParser\" as FastParser LOGIC_COLOR","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"[-\u003e LogicManager : execute(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"LogicManager -\u003e FastParser : parseCommand(\"delete 1\")","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"activate FastParser","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"create DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"FastParser -\u003e DeleteCommandParser","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"DeleteCommandParser --\u003e FastParser","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"FastParser -\u003e DeleteCommandParser : parse(\"1\")","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"create DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"DeleteCommandParser -\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e DeleteCommandParser : d","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"DeleteCommandParser --\u003e FastParser : d","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"DeleteCommandParser -[hidden]-\u003e FastParser","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"destroy DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"FastParser --\u003e LogicManager : d","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"deactivate FastParser","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"LogicManager -\u003e DeleteCommand : execute()","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"DeleteCommand -\u003e Model : deletePerson(1)","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"Model --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"create CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"DeleteCommand -\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"activate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"CommandResult --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"deactivate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":10,"-":59}},{"path":"docs/diagrams/LogicClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Logic {","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"    package Parser {","lastModifiedDate":"2021-11-01"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"    Class FastParser","lastModifiedDate":"2021-11-01"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"    Class XYZCommandParser","lastModifiedDate":"2021-11-01"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"    package Command {","lastModifiedDate":"2021-11-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Class CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"    Class XYZCommand","lastModifiedDate":"2021-11-01"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Interface Logic \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"package Model{","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"package Storage{","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"LogicManager .left.|\u003e Logic","lastModifiedDate":"2021-11-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"LogicManager .left.\u003e Command : executes \u003e","lastModifiedDate":"2019-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"LogicManager --\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"LogicManager --\u003e Storage","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"Storage --[hidden] Model","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Command .[hidden]up.\u003e Storage","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Command .right.\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Logic ..\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"LogicManager .down.\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"Command .up.\u003e CommandResult : produces \u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"LogicManager -down-|\u003e FastParser","lastModifiedDate":"2021-11-01"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"FastParser .down.\u003e XYZCommandParser : creates \u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"XYZCommandParser .left.\u003e XYZCommand : creates \u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":12,"-":41}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"Interface ReadOnlyFast \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Interface ReadOnlyUserPrefs \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-05-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface Model \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"Class Fast","lastModifiedDate":"2021-11-01"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"Class ReadOnlyFast","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class Model","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class UniquePersonList","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class Person","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class Address","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class Email","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Class Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Class Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"Class Remark","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"Class Appointment","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"Class AppointmentCount","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"Class InvestmentPlanTag","lastModifiedDate":"2021-11-01"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"Class PriorityTag","lastModifiedDate":"2021-11-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"Fast .up.|\u003e ReadOnlyFast","lastModifiedDate":"2021-11-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Model .right.\u003e ReadOnlyUserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"Model .left.\u003e ReadOnlyFast","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"ModelManager -left-\u003e \"1\" Fast","lastModifiedDate":"2021-11-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"ModelManager -right-\u003e \"1\" UserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"Fast *--\u003e \"1\" UniquePersonList","lastModifiedDate":"2021-11-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"UniquePersonList --\u003e \"~* all\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"Person *--\u003e \"1\"Name","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"Person *--\u003e \"1\"Phone","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"Person *--\u003e \"1\"Email","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"Person *--\u003e \"1\"Address","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"Person *--\u003e \"*\" Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"Person *--\u003e \"  0...1\" Remark","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"Person *--\u003e \"  0...1\" Appointment","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"Person *--\u003e \"1\" AppointmentCount","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Phone -[hidden]right-\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"Address -[hidden]right-\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"Tag \u003c|-down- InvestmentPlanTag","lastModifiedDate":"2021-11-01"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"Tag \u003c|-down- PriorityTag","lastModifiedDate":"2021-11-01"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"ModelManager --\u003e\"~* filtered\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":22,"-":42}},{"path":"docs/diagrams/MultipleDeleteActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"@startuml","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"\u0027https://plantuml.com/activity-diagram-beta","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"title Mutiple Delete Flow","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"start","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":":FAST receives a multiple delete command;","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"if () then ([valid command])","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":":Parses the user input;","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"if () then ([range input])","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":":Check if input is in the valid format;","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":":Extract the indexes to be deleted;","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":":Check if number of indexes is less than 10","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"and less than current number of clients in FAST;","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"if () then ([valid number])","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":":Check for duplicates;","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"if () then ([no duplicates])","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":":Check for invalid index;","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"if () then ([no invalid indexes])","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":":Delete the contacts;","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":":Update Model and Storage;","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"else ([invalid indexes])","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"- Thrown Exception","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"endif","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"else ([duplicates])","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"- Throw Exception","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"endif","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"else ([invalid number])","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"- Throw Exception","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"endif","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"else ([multiple indexes input])","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"endif","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"else ([invalid command])","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"- Throw Exception","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"endif","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":":Displays message;","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"stop","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"@enduml","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"Py0000":39}},{"path":"docs/diagrams/MultipleDeleteSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"@startuml","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"!include style.puml","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"participant \":FastParser\" as FastParser LOGIC_COLOR","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"end box","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"end box","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"[-\u003e LogicManager : execute(\"delete 1-5\")","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"activate LogicManager","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"LogicManager -\u003e FastParser : parseCommand(\"delete 1-5\")","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"activate FastParser","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"create DeleteCommandParser","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"FastParser -\u003e DeleteCommandParser","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"activate DeleteCommandParser","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"DeleteCommandParser --\u003e FastParser","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"FastParser -\u003e DeleteCommandParser : parse(\"1-5\")","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"activate DeleteCommandParser","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"DeleteCommandParser -\u003e DeleteCommandParser : isRangeInput()","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"activate DeleteCommandParser","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"DeleteCommandParser -\u003e DeleteCommandParser : spiltRangeInput()","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"activate DeleteCommandParser","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"DeleteCommandParser --\u003e DeleteCommandParser","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"DeleteCommandParser -\u003e DeleteCommandParser : parseRangeInput()","lastModifiedDate":"2021-11-02"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"activate DeleteCommandParser","lastModifiedDate":"2021-11-02"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"DeleteCommandParser --\u003e DeleteCommandParser","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2021-11-02"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"DeleteCommandParser --\u003e DeleteCommandParser","lastModifiedDate":"2021-11-02"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2021-11-02"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"create DeleteCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"DeleteCommandParser -\u003e DeleteCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"activate DeleteCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"DeleteCommand --\u003e DeleteCommandParser : d","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"deactivate DeleteCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"DeleteCommandParser --\u003e FastParser : d","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"DeleteCommandParser -[hidden]-\u003e FastParser","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"destroy DeleteCommandParser","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"FastParser --\u003e LogicManager : d","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"deactivate FastParser","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"LogicManager -\u003e DeleteCommand : execute()","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"activate DeleteCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"DeleteCommand -\u003e DeleteCommand : isMultipleDelete()","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"activate DeleteCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"DeleteCommand -\u003e DeleteCommand : sortOrder()","lastModifiedDate":"2021-11-02"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"activate DeleteCommand","lastModifiedDate":"2021-11-02"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"DeleteCommand --\u003e DeleteCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"deactivate DeleteCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"DeleteCommand -\u003e DeleteCommand : getInvalidIndex()","lastModifiedDate":"2021-11-02"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"activate DeleteCommand","lastModifiedDate":"2021-11-02"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"DeleteCommand --\u003e DeleteCommand : list","lastModifiedDate":"2021-11-02"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"deactivate DeleteCommand","lastModifiedDate":"2021-11-02"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"DeleteCommand -\u003e DeleteCommand : checkIndex()","lastModifiedDate":"2021-11-02"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"activate DeleteCommand","lastModifiedDate":"2021-11-02"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"DeleteCommand --\u003e DeleteCommand : false","lastModifiedDate":"2021-11-02"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"deactivate DeleteCommand","lastModifiedDate":"2021-11-02"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"DeleteCommand -\u003e DeleteCommand : checkDuplicates()","lastModifiedDate":"2021-11-02"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"activate DeleteCommand","lastModifiedDate":"2021-11-02"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"DeleteCommand --\u003e DeleteCommand : false","lastModifiedDate":"2021-11-02"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"deactivate DeleteCommand","lastModifiedDate":"2021-11-02"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"\u0027loop\u0027 required\u0027","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"loop 5 times","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"    DeleteCommand -\u003e DeleteCommand : executeMultipleDelete()","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"    activate DeleteCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"    DeleteCommand -\u003e Model : deletePerson(i)","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"    activate Model","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"    Model --\u003e DeleteCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"    deactivate Model","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"end","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"create CommandResult","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"DeleteCommand -\u003e CommandResult","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"activate CommandResult","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"CommandResult --\u003e DeleteCommand : result","lastModifiedDate":"2021-11-02"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"deactivate CommandResult","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"DeleteCommand --\u003e DeleteCommand : result","lastModifiedDate":"2021-11-02"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"deactivate DeleteCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"DeleteCommand --\u003e LogicManager : result","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"deactivate DeleteCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"deactivate LogicManager","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"@enduml","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"Py0000":124}},{"path":"docs/diagrams/ParserClasses.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2021-07-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2021-07-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-07-31"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2021-07-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2021-07-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class XYZCommand","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"package \"Parser classes\"{","lastModifiedDate":"2021-07-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Interface Parser \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"Class FastParser","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class XYZCommandParser","lastModifiedDate":"2021-07-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class CliSyntax","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class ParserUtil","lastModifiedDate":"2021-07-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class ArgumentTokenizer","lastModifiedDate":"2021-07-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"HiddenOutside ..\u003e FastParser","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"FastParser .down.\u003e XYZCommandParser: creates \u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e XYZCommand : creates \u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"FastParser ..\u003e Command : returns \u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"XYZCommandParser .up.|\u003e Parser","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentTokenizer","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"ArgumentTokenizer .left.\u003e ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e CliSyntax","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"CliSyntax ..\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ParserUtil","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"ParserUtil .down.\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ArgumentTokenizer .down.\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2021-07-31"}],"authorContributionMap":{"Py0000":4,"-":34}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Storage{","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"package \"UserPrefs Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Interface Storage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"package \"Fast Storage\" #F4F6F6{","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"Interface FastStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"Class JsonFastStorage","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"Class JsonSerializableFast","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"StorageManager .up.|\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"StorageManager -up-\u003e \"1\" FastStorage","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Storage -left-|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"Storage -right-|\u003e FastStorage","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .up.|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"JsonFastStorage .up.|\u003e FastStorage","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"JsonFastStorage ..\u003e JsonSerializableFast","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"JsonSerializableFast --\u003e \"*\" JsonAdaptedPerson","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"JsonAdaptedPerson --\u003e \"*\" JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":9,"-":34}},{"path":"docs/diagrams/UiClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor UI_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package UI \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface Ui \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nUiPart\" as UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class UiManager","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class MainWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class PersonListPanel","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class PersonCard","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class StatusBarFooter","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"Class ItemComponent","lastModifiedDate":"2021-11-01"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"Class StatsWindow","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"Abstract Class StatsWindowData \u003c\u003cAbstract\u003e\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"Class InvestmentPlanData","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"Class PriorityData","lastModifiedDate":"2021-11-01"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"Class TagComponent","lastModifiedDate":"2021-11-01"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"Class UiUtil","lastModifiedDate":"2021-11-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"Class HiddenLogic #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"Model ...\u003e StatsWindowData","lastModifiedDate":"2021-11-01"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"UiManager .left.|\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"UiManager -down-\u003e \"1\" MainWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e  \"1\" CommandBox","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"MainWindow *-down--\u003e \"1\" ResultDisplay","lastModifiedDate":"2021-11-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" PersonListPanel","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" StatusBarFooter","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"MainWindow --\u003e \"0..1\" HelpWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"MainWindow ----\u003e \"1\" StatsWindow","lastModifiedDate":"2021-11-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"PersonListPanel -down-\u003e \"*\" PersonCard","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"MainWindow --|\u003e UiPart","lastModifiedDate":"2021-11-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"ResultDisplay --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"CommandBox --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"PersonListPanel --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"PersonCard ---|\u003e UiPart","lastModifiedDate":"2021-11-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"StatusBarFooter --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"HelpWindow --|\u003e UiPart","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"StatsWindow -|\u003e UiPart","lastModifiedDate":"2021-11-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"PersonCard ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"UiManager -right-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"MainWindow -left-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"PersonListPanel -[hidden]left- HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"HelpWindow -[hidden]left- CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"CommandBox -[hidden]left- ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"ResultDisplay -[hidden]left- StatusBarFooter","lastModifiedDate":"2019-07-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"MainWindow -[hidden]-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"StatsWindowData \u003c|-down- InvestmentPlanData","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"StatsWindowData \u003c|-down- PriorityData","lastModifiedDate":"2021-11-01"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"PersonCard --\u003e TagComponent","lastModifiedDate":"2021-11-01"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"PersonCard --\u003e ItemComponent","lastModifiedDate":"2021-11-01"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"PersonCard .up.\u003e UiUtil","lastModifiedDate":"2021-11-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":21,"-":57}},{"path":"docs/diagrams/UndoRedoState0.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title Initial state","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"    class State1 as \"__ab0:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"    class State2 as \"__ab1:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"    class State3 as \"__ab2:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"hide State2","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"hide State3","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State1","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":4,"-":16}},{"path":"docs/diagrams/UndoRedoState1.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"delete 5\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"    class State1 as \"__ab0:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"    class State2 as \"__ab1:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"    class State3 as \"__ab2:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"hide State3","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":4,"-":18}},{"path":"docs/diagrams/UndoRedoState2.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"add n/David\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"    class State1 as \"__ab0:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"    class State2 as \"__ab1:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"    class State3 as \"__ab2:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":4,"-":16}},{"path":"docs/diagrams/UndoRedoState3.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"undo\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"    class State1 as \"__ab0:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"    class State2 as \"__ab1:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"    class State3 as \"__ab2:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":4,"-":16}},{"path":"docs/diagrams/UndoRedoState4.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"list\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"    class State1 as \"__ab0:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"    class State2 as \"__ab1:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"    class State3 as \"__ab2:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":4,"-":16}},{"path":"docs/diagrams/UndoRedoState5.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"clear\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"    class State1 as \"__ab0:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"    class State2 as \"__ab1:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"    class State3 as \"__ab3:Fast__\"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"note right on link: State ab2 deleted.","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":4,"-":17}},{"path":"docs/diagrams/UndoSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"participant \":FastParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"participant \":VersionedFast\" as VersionedAddressBook MODEL_COLOR","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"[-\u003e LogicManager : execute(undo)","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(undo)","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"activate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"create UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"AddressBookParser -\u003e UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"activate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"UndoCommand --\u003e AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"deactivate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"AddressBookParser --\u003e LogicManager : u","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"deactivate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"LogicManager -\u003e UndoCommand : execute()","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"activate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"UndoCommand -\u003e Model : undoFast()","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Model -\u003e VersionedAddressBook : undo()","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"activate VersionedAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"VersionedAddressBook -\u003e VersionedAddressBook :resetData(ReadOnlyFast)","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"VersionedAddressBook --\u003e Model :","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"deactivate VersionedAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Model --\u003e UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"UndoCommand --\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"deactivate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"UndoCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"destroy UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Py0000":4,"-":49}},{"path":"docs/diagrams/tracing/LogicSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-06-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include ../style.puml","lastModifiedDate":"2019-06-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"Participant \":FastParser\" as abp LOGIC_COLOR","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":EditCommandParser\" as ecp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \"command:EditCommand\" as ec LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"[-\u003e logic : execute","lastModifiedDate":"2019-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"activate logic","lastModifiedDate":"2019-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"logic -\u003e abp ++: parseCommand(commandText)","lastModifiedDate":"2019-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"create ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"abp -\u003e ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"abp -\u003e ecp ++: parse(arguments)","lastModifiedDate":"2019-06-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"create ec","lastModifiedDate":"2019-06-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"ecp -\u003e ec ++: index, editPersonDescriptor","lastModifiedDate":"2019-06-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ec --\u003e ecp --","lastModifiedDate":"2019-06-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"ecp --\u003e abp --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"abp --\u003e logic --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-06-17"}],"authorContributionMap":{"Py0000":1,"-":20}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"title: Financial Advisor Smart Tracker","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103T-T09-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103T-T09-4/tp/actions)","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"[![codecov](https://codecov.io/gh/AY2122S1-CS2103T-T09-4/tp/branch/master/graph/badge.svg?token\u003d8G5QJLU0E0)](https://codecov.io/gh/AY2122S1-CS2103T-T09-4/tp)","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"**Financial Advisor Smart Tracker (FAST) is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"* If you are interested in using FAST, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"* If you are interested about developing FAST, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"Th-429B"},"content":"* Libraries used: ","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"Th-429B"},"content":"  -  [JavaFX](https://openjfx.io/), ","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"Th-429B"},"content":"  -  [Jackson](https://github.com/FasterXML/jackson)","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"Th-429B"},"content":"  -  [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"squeakysquak":6,"-":12,"Th-429B":4}},{"path":"docs/team/calvin.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Cyn7hius"},"content":"---","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"Cyn7hius"},"content":"layout: page","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"Cyn7hius"},"content":"title: Calvin Tan\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"Cyn7hius"},"content":"---","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"Cyn7hius"},"content":"### Project: FAST","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"Cyn7hius"},"content":"FAST (Financial Advisor Smart Tracker) is a desktop address book application targeted at financial advisors, for","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"Cyn7hius"},"content":"them to keep track of their clients as contacts. The user interacts with it using a CLI, and it has a GUI created with","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"Cyn7hius"},"content":"JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"Cyn7hius"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"* **New Feature**: TBA","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"* **Project management**:","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"Cyn7hius"},"content":"    * TBA","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"Cyn7hius"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":"    * TBA","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"Cyn7hius"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"Cyn7hius"},"content":"    * User Guide:","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"Cyn7hius"},"content":"        * TBA","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"Cyn7hius"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"Cyn7hius"},"content":"        * TBA","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"Cyn7hius"},"content":"* **Community**:","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"Cyn7hius"},"content":"    * TBA","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"Cyn7hius"},"content":"* **Tools**:","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"Cyn7hius"},"content":"    * TBA","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"Cyn7hius":34}},{"path":"docs/team/ethan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"---","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"squeakysquak"},"content":"layout: page","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"title: Khor Ethan\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"---","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"### Project: FAST","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"FAST (Financial Advisor Smart Tracker) is a desktop address book application targeted at financial advisors, for","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"them to keep track of their clients as contacts. The user interacts with it using a CLI, and it has a GUI created with","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"* **New Feature**: TBA","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"* **Project management**:","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"    * Updated README and made UI mockup","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"    * TBA","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"    * User Guide:","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"        * TBA","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"        * TBA","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"* **Community**:","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"    * TBA","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"squeakysquak"},"content":"* **Tools**:","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"squeakysquak"},"content":"    * TBA","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"squeakysquak":34}},{"path":"docs/team/peiyuan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"layout: page","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"title: Lim Peiyuan\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"### Introduction","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"I am a software developer for Financial Advisor Smart Tracker (FAST). I was in-charge of the Code Quality of FAST.","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"At the time of developing FAST, I was a Year 2 Computer Science Undergraduate.","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"---","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"### Project Overview: Financial Advisor Smart Tracker (FAST)","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"Financial Advisor Smart Tracker (FAST) is a desktop application targeted at financial advisors, for","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"them to keep track of their clients as contacts. The user interacts with it using a CLI, and it has a GUI created with","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"JavaFX. It is written in Java, and has about 12 kLoC.","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"---","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"### Contributions to FAST","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"#### New Features","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"* **New Feature 1**: `Appointment` feature.","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"  * **What it does**:\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"  The `Appointment` feature allows users to manage their appointment with their clients. ","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"  It allows user to store critical information such as date, time and venue.","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"  It also allows user to track the number of completed appointments with a client.","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"  In the situation where the user accidentally marks an appointment wrongly, he can unmark the appointment.","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"  It is integrated into the `PersonCard`, placed on the right-hand side of each client\u0027s details. ","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"  ","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"  \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"  ","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"  * **Justification**: \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"  Financial Advisors (FA) do not just manage their clients\u0027 contacts, they spend a lot of their time meeting clients to clinch deals.","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"  Thus, it is necessary for them to be able to see the appointment information alongside the client\u0027s details (with the need to switch between apps).","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"  \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"  * **Highlights**: \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"  Designed 5 different sub-features(`add appointment`, `edit appointment`, `delete appointment`, `mark appointment` and `unmark appointment`) ","lastModifiedDate":"2021-11-02"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"  for user to manipulate the `Appointment`. ","lastModifiedDate":"2021-11-02"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"  `add appointment`, `edit appointment` and `delete appointment` was referenced and modified from the existing **AB3** `add`, `edit` and `delete` features.","lastModifiedDate":"2021-11-02"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"  \u003cbr\u003e \u003cbr\u003e `Appointment` and `AppointmentCount` class was designed to allow the `Appointment` feature to function.","lastModifiedDate":"2021-11-02"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"  \u003cbr\u003e \u003cbr\u003e Makes use of parser to check for valid date and time format before formatting them into the desired, more reader-friendly format.","lastModifiedDate":"2021-11-02"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"  ","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"  \u003cbr\u003e ","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"  ","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"  * **Related PR**: [\\#77](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/77), [\\#79](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/79),","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"    [\\#84](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/84), [\\#94](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/94),","lastModifiedDate":"2021-11-02"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"    [\\#99](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/99), [\\#152](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/152)","lastModifiedDate":"2021-11-02"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"#### Enhancement to Existing Features","lastModifiedDate":"2021-11-02"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"* **Enhancements to existing features**:`Multiple Delete` feature.","lastModifiedDate":"2021-11-02"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"  * **What it does**:\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"  The `Multiple Delete` feature allows users to delete up to 10 contacts at one go. ","lastModifiedDate":"2021-11-02"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"  It supports 2 input format to cater for different situations the user may be in.","lastModifiedDate":"2021-11-02"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"  ","lastModifiedDate":"2021-11-02"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"  \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"  * **Justification**: \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"  This feature allows FAST to be faster for users to manage their contact, as they can delete more contacts with one command.","lastModifiedDate":"2021-11-02"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"  ","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"  \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"  * **Highlights**: \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"  This is built upon the `delete` feature. The `delete` feature is spilt into 2 portion for handling single and multiple delete as well as to handle the 2 types of input format. ","lastModifiedDate":"2021-11-02"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"  Checks for multiple indexes are included and checks for dash(-) symbol is added to capture the information required for multiple delete.","lastModifiedDate":"2021-11-02"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"  Implemented duplication detection to prevent user from entering the same indexes.","lastModifiedDate":"2021-11-02"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"  \u003cbr\u003e ","lastModifiedDate":"2021-11-02"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"  * **Related PR**: [\\#127](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/127)","lastModifiedDate":"2021-11-02"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"  ","lastModifiedDate":"2021-11-02"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"#### Code Contribution","lastModifiedDate":"2021-11-02"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003dt09\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dPy0000\u0026tabRepo\u003dAY2122S1-CS2103T-T09-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-02"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"    ","lastModifiedDate":"2021-11-02"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"#### Documentation","lastModifiedDate":"2021-11-02"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"* **User Guide**:","lastModifiedDate":"2021-11-02"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"  * Added documentation for the feature `add appointment` [\\#102](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/102)","lastModifiedDate":"2021-11-02"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"  * Added documentation for the feature `edit appointment` [\\#102](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/102)","lastModifiedDate":"2021-11-02"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"  * Added documentation for the feature `delete appointment` [\\#102](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/102)","lastModifiedDate":"2021-11-02"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"  * Added documentation for the feature `mark appointment` [\\#102](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/102)","lastModifiedDate":"2021-11-02"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"  * Added Command Parameter Section [\\#143](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/143)","lastModifiedDate":"2021-11-02"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"  * Added Purpose of Guide Section [\\#143](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/143)","lastModifiedDate":"2021-11-02"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"  * Added documentation for the feature `unmark appointment` [\\#152](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/152)","lastModifiedDate":"2021-11-02"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"* **Developer Guide**:","lastModifiedDate":"2021-11-02"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"  * Added Use Cases in Developer\u0027s Guide [\\#55](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/55)","lastModifiedDate":"2021-11-02"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"  * Added UC07 to UC10  [\\#102](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/102)","lastModifiedDate":"2021-11-02"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"  * Added implementation of Appointment features [\\#117](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/117), [\\#211](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/211)","lastModifiedDate":"2021-11-02"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"  * Updated existing UML diagrams and description of `Design` Section [\\#137](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/137)","lastModifiedDate":"2021-11-02"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"  * Added Introduction Section [\\#211](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/211)","lastModifiedDate":"2021-11-02"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"  * Added UC11 [\\#211](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/211)","lastModifiedDate":"2021-11-02"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"  * Added Manual Testing Section for `Appointment` features, `add`, `edit`, `delete` and `remark` [\\#211](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/211)","lastModifiedDate":"2021-11-02"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"  * Added implementation fo Multiple Delete [\\#211](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/211)","lastModifiedDate":"2021-11-02"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"#### Community","lastModifiedDate":"2021-11-02"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"* **Community**:","lastModifiedDate":"2021-09-29"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"    * Fixed bug in SampleDataUtils [\\#100](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/100)","lastModifiedDate":"2021-11-02"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"    * Fixed bugs from PED [\\#184](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/184)","lastModifiedDate":"2021-11-02"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"    * Minor shift to UI layout (i.e. position of command box, result display box) [/#99](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/99)","lastModifiedDate":"2021-11-02"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"    * Released JAR v1.3.2","lastModifiedDate":"2021-11-02"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"    * PRs reviewed: [\\#52](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/52), [\\#54](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/54),","lastModifiedDate":"2021-11-02"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"      [\\#63](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/63), [\\#65](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/65),","lastModifiedDate":"2021-11-02"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"      [\\#80](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/80), [\\#95](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/95),","lastModifiedDate":"2021-11-02"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"      [\\#111](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/111), [\\#118](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/118),","lastModifiedDate":"2021-11-02"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"      [\\#125](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/125), [\\#126](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/126),","lastModifiedDate":"2021-11-02"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"      [\\#134](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/134), [\\#139](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/139),","lastModifiedDate":"2021-11-02"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"      [\\#142](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/142), [\\#146](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/146),","lastModifiedDate":"2021-11-02"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"      [\\#208](https://github.com/AY2122S1-CS2103T-T09-4/tp/pull/208)","lastModifiedDate":"2021-11-02"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":131,"author":{"gitId":"Py0000"},"content":"#### Project Management","lastModifiedDate":"2021-11-02"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"* **Project management**:","lastModifiedDate":"2021-11-02"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"    * Added some user stories as issues","lastModifiedDate":"2021-11-02"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"    * Opened and closed some issues ","lastModifiedDate":"2021-11-02"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"Py0000":136}},{"path":"docs/team/tenghon.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"layout: page","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"title: Lau Teng Hon\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"* **New Feature**: Added the ability to sort all contacts.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":"  * What it does: Allows the user to sort the contacts based on several keywords.","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":"  * Justification: This feature allows user to quickly sort the contacts based on tags for example.","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"Th-429B"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"Th-429B"},"content":"* **Project management**:","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"Th-429B"},"content":"  * Created Labels and Milestones for the team *","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"Th-429B"},"content":"  * Created issue trackers for meeting agenda and tasks to do","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"Th-429B"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"Th-429B"},"content":"  * Added custom colors to tags (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"Th-429B"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"Th-429B"},"content":"  * User Guide:","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"Th-429B"},"content":"    * Added documentation for the features `add` and `sort` [\\#72]()","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"    * TBA","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"Th-429B"},"content":"* **Community**:","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"Th-429B"},"content":"  * TBA","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"Th-429B"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"Th-429B"},"content":"* **Tools**:","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"Th-429B"},"content":"  * TBA","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"Th-429B":36}},{"path":"docs/team/wangbin.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"trash-bin99"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"trash-bin99"},"content":"layout: page","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"trash-bin99"},"content":"title: Toh Wang Bin\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"trash-bin99"},"content":"### Project: FAST","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"trash-bin99"},"content":"FAST (Financial Advisor Smart Tracker) is a desktop address book application targeted at financial advisors, for","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"trash-bin99"},"content":"them to keep track of their clients as contacts. The user interacts with it using a CLI, and it has a GUI created with","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":"JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"trash-bin99"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"trash-bin99"},"content":"* **New Feature**: TBA","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"trash-bin99"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"trash-bin99"},"content":"* **Project management**:","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"trash-bin99"},"content":"    * Added user stories as issues in Github","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"trash-bin99"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"trash-bin99"},"content":"    * TBA","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"trash-bin99"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"trash-bin99"},"content":"    * User Guide:","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"trash-bin99"},"content":"        * TBA","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"trash-bin99"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"trash-bin99"},"content":"        * TBA","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"trash-bin99"},"content":"* **Community**:","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"trash-bin99"},"content":"    * TBA","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"trash-bin99"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"trash-bin99"},"content":"* **Tools**:","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"trash-bin99"},"content":"    * TBA","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"trash-bin99":35}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47).","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done.","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"squeakysquak"},"content":"Create a `RemarkCommandParser` class in the `seedu.fast.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2021-10-01"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508).","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"squeakysquak"},"content":"Create a new `Remark` in `seedu.fast.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2021-10-01"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"squeakysquak"},"content":"Simply add the following to [`seedu.fast.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe).","lastModifiedDate":"2021-10-01"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2021-08-01"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9).","lastModifiedDate":"2020-07-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"squeakysquak":6,"-":395}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"The `address` field in `Person` is actually an instance of the `seedu.fast.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"squeakysquak":1,"-":111}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"squeakysquak"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `seedu.fast.logic.Logic`.","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"squeakysquak"},"content":"A quick look at the `seedu.fast.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2021-07-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2021-07-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"squeakysquak":2,"-":299}},{"path":"src/main/java/seedu/fast/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.LogsCenter;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.util.FileUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"squeakysquak":3,"-":61}},{"path":"src/main/java/seedu/fast/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"squeakysquak":1,"-":24}},{"path":"src/main/java/seedu/fast/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.Config;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.LogsCenter;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.Version;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.util.ConfigUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.util.StringUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.Logic;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.LogicManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.util.SampleDataUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.storage.FastStorage;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.storage.JsonFastStorage;","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.storage.Storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.storage.StorageManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.storage.UserPrefsStorage;","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.ui.Ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.ui.UiManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 0, true);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"squeakysquak"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FAST ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-10-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"squeakysquak"},"content":"        FastStorage fastStorage \u003d new JsonFastStorage(userPrefs.getFastFilePath());","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"squeakysquak"},"content":"        storage \u003d new StorageManager(fastStorage, userPrefsStorage);","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"squeakysquak"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s FAST and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":73,"author":{"gitId":"squeakysquak"},"content":"     * The data from the sample FAST will be used instead if {@code storage}\u0027s FAST is not found,","lastModifiedDate":"2021-10-04"},{"lineNumber":74,"author":{"gitId":"squeakysquak"},"content":"     * or an empty FAST will be used instead if errors occur when reading {@code storage}\u0027s FAST.","lastModifiedDate":"2021-10-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"squeakysquak"},"content":"        Optional\u003cReadOnlyFast\u003e fastOptional;","lastModifiedDate":"2021-10-04"},{"lineNumber":78,"author":{"gitId":"squeakysquak"},"content":"        ReadOnlyFast initialData;","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"squeakysquak"},"content":"            fastOptional \u003d storage.readFast();","lastModifiedDate":"2021-10-04"},{"lineNumber":81,"author":{"gitId":"squeakysquak"},"content":"            if (!fastOptional.isPresent()) {","lastModifiedDate":"2021-10-04"},{"lineNumber":82,"author":{"gitId":"squeakysquak"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Fast\");","lastModifiedDate":"2021-10-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"squeakysquak"},"content":"            initialData \u003d fastOptional.orElseGet(SampleDataUtil::getSampleFast);","lastModifiedDate":"2021-10-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"squeakysquak"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Fast\");","lastModifiedDate":"2021-10-04"},{"lineNumber":87,"author":{"gitId":"squeakysquak"},"content":"            initialData \u003d new Fast();","lastModifiedDate":"2021-10-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"squeakysquak"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Fast\");","lastModifiedDate":"2021-10-04"},{"lineNumber":90,"author":{"gitId":"squeakysquak"},"content":"            initialData \u003d new Fast();","lastModifiedDate":"2021-10-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"squeakysquak"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Fast\");","lastModifiedDate":"2021-10-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"squeakysquak"},"content":"        logger.info(\"Starting Fast \" + MainApp.VERSION);","lastModifiedDate":"2021-10-04"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"squeakysquak"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Fast ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-10-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":43,"-":140}},{"path":"src/main/java/seedu/fast/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.core;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":1,"-":62}},{"path":"src/main/java/seedu/fast/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.core;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":1,"-":78}},{"path":"src/main/java/seedu/fast/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.core;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":1,"-":111}},{"path":"src/main/java/seedu/fast/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.core;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_INVALID_HELP_COMMAND_FORMAT \u003d \"Invalid command for help! Opening the \"","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"Cyn7hius"},"content":"        + \"default help window instead.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d clients listed! Use the `list` command to \"","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"        + \"return to the full client view.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"Th-429B"},"content":"    public static final String MESSAGE_INVALID_LENGTH \u003d \"Invalid length! \\n%1$s\";","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":1,"-":11,"Cyn7hius":4,"Th-429B":1}},{"path":"src/main/java/seedu/fast/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.core;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":1,"-":115}},{"path":"src/main/java/seedu/fast/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.core.index;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"public class Index implements Comparable\u003cIndex\u003e {","lastModifiedDate":"2021-10-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-30"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"    public int compareTo(Index o) {","lastModifiedDate":"2021-10-30"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"        return o.zeroBasedIndex - this.zeroBasedIndex;","lastModifiedDate":"2021-10-30"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"squeakysquak":1,"Py0000":7,"-":52}},{"path":"src/main/java/seedu/fast/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.exceptions;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":1,"-":10}},{"path":"src/main/java/seedu/fast/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.exceptions;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":1,"-":20}},{"path":"src/main/java/seedu/fast/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.MainApp;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"squeakysquak":2,"-":40}},{"path":"src/main/java/seedu/fast/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":1,"-":34}},{"path":"src/main/java/seedu/fast/commons/util/Colors.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":" * Container class for colors stored in hex.","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"public class Colors {","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"    public static final String RED \u003d \"-fx-background-color: #ff0000;\";","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"    public static final String BLUE \u003d \"-fx-background-color: #3e7b91;\";","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"    public static final String GREY \u003d \"-fx-background-color: #808080;\";","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"    public static final String YELLOW \u003d \"-fx-background-color: #EDF100;\";","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"    public static final String ORANGE \u003d \"-fx-background-color: #ffa500;\";","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":"    public static final String GREEN \u003d \"-fx-background-color: #07D62C;\";","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":"    public static final String PURPLE \u003d \"-fx-background-color: #800080;\";","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"    public static final String TEAL \u003d \"-fx-background-color: #28EFFF;\";","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"trash-bin99"},"content":"    public static final String LIME \u003d \"-fx-background-color: #a8ff33;\";","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"trash-bin99"},"content":"    public static final String PINK \u003d \"-fx-background-color: #f3a5ff;\";","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"trash-bin99"},"content":"    public static final String CRIMSON \u003d \"-fx-background-color: #df2121;\";","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"trash-bin99"},"content":"    public static final String MAGENTA \u003d \"-fx-background-color: #c33ade;\";","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"trash-bin99"},"content":"    public static final String DARK_BLUE \u003d \"-fx-background-color: #0039E7;\";","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"trash-bin99":7,"Th-429B":15}},{"path":"src/main/java/seedu/fast/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.Config;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"squeakysquak":3,"-":20}},{"path":"src/main/java/seedu/fast/commons/util/DateUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"import java.util.Date;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"/**","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":" * A container for App specific utility functions","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":" */","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"public class DateUtil {","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"    public static final Date MAX_DATE \u003d new Date(Long.MAX_VALUE);","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"Th-429B":11}},{"path":"src/main/java/seedu/fast/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":1,"-":82}},{"path":"src/main/java/seedu/fast/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.LogsCenter;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":3,"-":140}},{"path":"src/main/java/seedu/fast/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"     * Returns true if the {@code sentence} contains the {@code query}.","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"     *   Ignores case, full word match is not required but the word in the","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"     *   {@code sentence} must start with the {@code query}.","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"Ab\") \u003d\u003d true","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"Bc\") \u003d\u003d false","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"     * @param query cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"    public static boolean containsQueryIgnoreCase(String sentence, String query) {","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"        requireNonNull(query);","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"        String preppedWord \u003d query.trim();","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Query parameter cannot be empty\");","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"squeakysquak"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Query parameter should be a single word\");","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"squeakysquak"},"content":"        String preppedWordLowerCase \u003d preppedWord.toLowerCase();","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"squeakysquak"},"content":"        // ignore case","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":40,"author":{"gitId":"squeakysquak"},"content":"        for (String sentenceWord:wordsInPreppedSentence) {","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"squeakysquak"},"content":"            String sentenceWordLowerCase \u003d sentenceWord.toLowerCase();","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"squeakysquak"},"content":"            //ignore case","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"squeakysquak"},"content":"            if (sentenceWordLowerCase.startsWith(preppedWordLowerCase)) {","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"squeakysquak"},"content":"                return true;","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"squeakysquak"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"squeakysquak"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"squeakysquak"},"content":"        return false;","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":23,"-":54}},{"path":"src/main/java/seedu/fast/commons/util/TagUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":" * Container class for commonly used tags to be colored.","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"public class TagUtil {","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"    public static final String FRIENDS \u003d \"FRIENDS\";","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"    public static final String HIGH_PRIORITY \u003d \"HIGHPRIORITY\";","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"    public static final String MEDIUM_PRIORITY \u003d \"MEDIUMPRIORITY\";","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"    public static final String LOW_PRIORITY \u003d \"LOWPRIORITY\";","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"    public static final String HEALTH_INSURANCE \u003d \"HEALTHINSURANCE\";","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"trash-bin99"},"content":"    public static final String LIFE_INSURANCE \u003d \"LIFEINSURANCE\";","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"trash-bin99"},"content":"    public static final String MOTOR_INSURANCE \u003d \"MOTORINSURANCE\";","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"trash-bin99"},"content":"    public static final String PROPERTY_INSURANCE \u003d \"PROPERTYINSURANCE\";","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"    public static final String TRAVEL_INSURANCE \u003d \"TRAVELINSURANCE\";","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"trash-bin99"},"content":"    public static final String INVESTMENT \u003d \"INVESTMENT\";","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"trash-bin99"},"content":"    public static final String SAVINGS \u003d \"SAVINGS\";","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"Th-429B"},"content":"    public static final int NO_PRIORITY \u003d 10;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"Th-429B"},"content":"    public static final int MAX_LENGTH_TAG \u003d 20;","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"trash-bin99":7,"Th-429B":15}},{"path":"src/main/java/seedu/fast/commons/util/sort/SortByAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"package seedu.fast.commons.util.sort;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":" * Custom comparator that compares Person objects by their Appointment date.","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"public class SortByAppointment implements Comparator\u003cPerson\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"    public static final String KEYWORD \u003d \"appointment\";","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"Th-429B"},"content":"    public int compare(Person p1, Person p2) {","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"Th-429B"},"content":"        return p1.getAppointment().convertDate().compareTo(p2.getAppointment().convertDate());","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"Th-429B"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"Th-429B"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"Th-429B"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"Th-429B"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"Th-429B"},"content":"            return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"Th-429B"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"Th-429B"},"content":"        if (other instanceof SortByAppointment) {","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"            return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"Th-429B"},"content":"        return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"Th-429B":33}},{"path":"src/main/java/seedu/fast/commons/util/sort/SortByName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"package seedu.fast.commons.util.sort;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":" * Custom comparator that compares Person objects by their Names.","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"public class SortByName implements Comparator\u003cPerson\u003e {","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"    public static final String KEYWORD \u003d \"name\";","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"Th-429B"},"content":"    public int compare(Person p1, Person p2) {","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"Th-429B"},"content":"        return p1.getName().fullName.compareTo(p2.getName().fullName);","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"Th-429B"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"Th-429B"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"Th-429B"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"Th-429B"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"Th-429B"},"content":"            return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"Th-429B"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"Th-429B"},"content":"        if (other instanceof SortByName) {","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"            return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"Th-429B"},"content":"        return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Th-429B":33}},{"path":"src/main/java/seedu/fast/commons/util/sort/SortByPriority.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"package seedu.fast.commons.util.sort;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":" * Custom comparator that compares Person objects by their Tags.","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"public class SortByPriority implements Comparator\u003cPerson\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"    public static final String KEYWORD \u003d \"priority\";","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"Th-429B"},"content":"    public int compare(Person p1, Person p2) {","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"Th-429B"},"content":"        return p1.getPriority() - p2.getPriority();","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"Th-429B"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"Th-429B"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"Th-429B"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"Th-429B"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"Th-429B"},"content":"            return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"Th-429B"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"Th-429B"},"content":"        if (other instanceof SortByPriority) {","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"            return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"Th-429B"},"content":"        return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"Th-429B":33}},{"path":"src/main/java/seedu/fast/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.GuiSettings;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.CommandResult;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"     * @see seedu.fast.model.Model#getFast()","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"    ReadOnlyFast getFast();","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"squeakysquak"},"content":"    Path getFastFilePath();","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"squeakysquak":10,"-":40}},{"path":"src/main/java/seedu/fast/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.GuiSettings;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.LogsCenter;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.Command;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.CommandResult;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.FastParser;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.storage.Storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"    private final FastParser fastParser;","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"squeakysquak"},"content":"        fastParser \u003d new FastParser();","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"squeakysquak"},"content":"        Command command \u003d fastParser.parseCommand(commandText);","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"squeakysquak"},"content":"            storage.saveFast(model.getFast());","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":58,"author":{"gitId":"squeakysquak"},"content":"    public ReadOnlyFast getFast() {","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"squeakysquak"},"content":"        return model.getFast();","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"squeakysquak"},"content":"    public Path getFastFilePath() {","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"squeakysquak"},"content":"        return model.getFastFilePath();","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"squeakysquak":20,"-":61}},{"path":"src/main/java/seedu/fast/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"Cyn7hius"},"content":" * Adds a person to FAST.","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a client to FAST. \\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":"            + \"Parameters: \\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"Cyn7hius"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"Cyn7hius"},"content":"            + \"Example: \\n\" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in FAST\";","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":9,"-":52,"Cyn7hius":6}},{"path":"src/main/java/seedu/fast/logic/commands/AppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT_TIME;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT_VENUE;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import java.util.List;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":" * Adds/Changes the appointment with an existing person in the FAST.","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"public class AppointmentCommand extends Command {","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"    public static final String COMMAND_WORD \u003d \"aa\";","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add appointment with the client identified\"","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"Cyn7hius"},"content":"            + \" by the index number used in the last client listing.\\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"Cyn7hius"},"content":"            + \"Parameters (to add an appointment): \\nINDEX (must be a positive integer), \"","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"            + PREFIX_APPOINTMENT + \"DATE (must be yyyy-mm-dd), \"","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"Cyn7hius"},"content":"            + \"[\" + PREFIX_APPOINTMENT_TIME + \"TIME] (must be hh:mm (24-hour format)), \"","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"            + \"[\" + PREFIX_APPOINTMENT_VENUE + \"VENUE] (maximum 20 characters long).\" + \"\\n\\n\"","lastModifiedDate":"2021-10-30"},{"lineNumber":31,"author":{"gitId":"Cyn7hius"},"content":"            + \"Examples: \\n\" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"            + PREFIX_APPOINTMENT + \"2021-10-25 \"","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"            + PREFIX_APPOINTMENT_TIME + \"22:15 \"","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"            + PREFIX_APPOINTMENT_VENUE + \"Orchard Central\" + \"\\n\"","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"            + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"            + PREFIX_APPOINTMENT + \"2021-10-25 \"","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"            + PREFIX_APPOINTMENT_TIME + \"19:00 \\n\"","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"Cyn7hius"},"content":"            + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"            + PREFIX_APPOINTMENT + \"2021-10-25 \"","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"            + PREFIX_APPOINTMENT_VENUE + \"Ion \\n\"","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"            + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"            + PREFIX_APPOINTMENT + \"2021-10-25 \\n\\n\";","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_ADD_APPOINTMENT_SUCCESS \u003d \"Added appointment with %1$s: %2$s %3$s %4$s\";","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_ADD_APPOINTMENT_FAILURE \u003d \"The appointment already exists! \"","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"            + \"Use the edit command to change details, or delete it and add it again!\";","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"    private final Index index;","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"    private final Appointment appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"     * Construct for an {@code AppointmentCommand}","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"     * @param index index of the person in the filtered person list to add appointment","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"     * @param appointment appointment scheduled with the person","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"    public AppointmentCommand(Index index, Appointment appointment) {","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"        requireAllNonNull(index, appointment);","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-05"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-05"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-05"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-05"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-10-05"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"                personToEdit.getAddress(), personToEdit.getRemark(), personToEdit.getTags(), appointment,","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"                personToEdit.getCount());","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"        if (!personToEdit.getAppointment().getDate().equalsIgnoreCase(Appointment.NO_APPOINTMENT)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(MESSAGE_ADD_APPOINTMENT_FAILURE);","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-05"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"     * Generates a command execution success message when appointment has been added successfully.","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2021-10-05"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"    private String generateSuccessMessage(Person editedPerson) {","lastModifiedDate":"2021-10-14"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"        return String.format(MESSAGE_ADD_APPOINTMENT_SUCCESS, editedPerson.getName().fullName,","lastModifiedDate":"2021-10-14"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"                editedPerson.getAppointment().getDate(),","lastModifiedDate":"2021-10-14"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"                editedPerson.getAppointment().getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"                editedPerson.getAppointment().getVenue());","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-05"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-05"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-05"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"            return true;","lastModifiedDate":"2021-10-05"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-05"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"        if (!(other instanceof AppointmentCommand)) {","lastModifiedDate":"2021-10-05"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"            return false;","lastModifiedDate":"2021-10-05"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"        // state check","lastModifiedDate":"2021-10-05"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand e \u003d (AppointmentCommand) other;","lastModifiedDate":"2021-10-05"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-05"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"                \u0026\u0026 appointment.equals(e.appointment);","lastModifiedDate":"2021-10-05"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Py0000":109,"Cyn7hius":8}},{"path":"src/main/java/seedu/fast/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"Cyn7hius"},"content":" * Clears FAST.","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"Cyn7hius"},"content":"            + \": Clears the content of FAST (Deletes all your data!) This command CANNOT be undone!\\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"FAST has been cleared!\";","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"        model.setFast(new Fast());","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":4,"-":17,"Cyn7hius":5}},{"path":"src/main/java/seedu/fast/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":3,"-":17}},{"path":"src/main/java/seedu/fast/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":1,"-":70}},{"path":"src/main/java/seedu/fast/logic/commands/DeleteAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import java.util.List;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"public class DeleteAppointmentCommand extends Command {","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"    public static final String COMMAND_WORD \u003d \"da\";","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"Cyn7hius"},"content":"            + \": Deletes appointment with the client identified\"","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":"            + \" by the index number used in the last client listing.\\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"Cyn7hius"},"content":"            + \"Parameters: \\nINDEX (must be a positive integer)\\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"            + \"Example: \\n\" + COMMAND_WORD + \" 1 \";","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted appointment with %1$s\";","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_FAILED \u003d \"No appointment with %1$s yet!\";","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"    private final Index index;","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"    private final Appointment appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"     * Construct for an {@code DeleteAppointmentCommand}","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"     * @param index       index of the person in the filtered person list to delete the appointment","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"     * @param appointment appointment scheduled with the person","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"    public DeleteAppointmentCommand(Index index, Appointment appointment) {","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"                personToEdit.getAddress(), personToEdit.getRemark(), personToEdit.getTags(), appointment,","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"                personToEdit.getCount());","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"        String name \u003d personToEdit.getName().fullName;","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"        if (personToEdit.getAppointment().equals(appointment)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(String.format(MESSAGE_DELETE_APPOINTMENT_FAILED, name));","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, name));","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"            return true;","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"        if (!(other instanceof DeleteAppointmentCommand)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"            return false;","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"        // state check","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"        DeleteAppointmentCommand e \u003d (DeleteAppointmentCommand) other;","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"                \u0026\u0026 appointment.equals(e.appointment);","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":83,"Cyn7hius":3}},{"path":"src/main/java/seedu/fast/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-30"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.LogsCenter;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"import seedu.fast.storage.JsonFastStorage;","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"Cyn7hius"},"content":" * Deletes a person identified using it\u0027s displayed index from FAST.","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"    public static final String COMMAND_WORD \u003d \"del\";","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"    public static final int MULTIPLE_DELETE_LIMIT \u003d 10;","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"Cyn7hius"},"content":"        + \": Deletes the client identified by the index number(s) used in the displayed client list.\\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"Cyn7hius"},"content":"        + \"Parameters: \\nINDEX... (must be a positive integer)\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"Cyn7hius"},"content":"        + \" OR \\nINDEX-INDEX (a range of index).\\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"Cyn7hius"},"content":"        + \"Examples: \\n\" + COMMAND_WORD + \" 1\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"Cyn7hius"},"content":"        + COMMAND_WORD + \" 5 10 15\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"Cyn7hius"},"content":"        + COMMAND_WORD + \" 5-10\";","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_SINGLE_DELETE_SUCCESS \u003d \"Deleted client: %1$s\";","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_MULTIPLE_DELETE_SUCCESS \u003d \"Successfully deleted %1$s contacts from \"","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"Cyn7hius"},"content":"        + \"your client list.\";","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_MULTIPLE_DELETE_FAILED_DUPLICATES \u003d \"Cannot delete the same client twice! \"","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"        + \"(Cannot have duplicated index!)\";","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_MULTIPLE_DELETE_FAILED_WITHIN_LIMIT \u003d \"The position/number of clients \"","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"Cyn7hius"},"content":"        + \"you want to delete cannot be more than the number of clients you currently have!\";","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_MULTIPLE_DELETE_FAILED_EXCEED_LIMIT \u003d \"You cannot delete more than \"","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"Cyn7hius"},"content":"        + MULTIPLE_DELETE_LIMIT + \" clients at one time!\";","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_MULTIPLE_DELETE_INVALID_INDEX_DETECTED \u003d \"Unable to execute command!\\n\"","lastModifiedDate":"2021-10-30"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"            + \"One or more invalid index detected at: %1$s\\n\" + MESSAGE_MULTIPLE_DELETE_FAILED_WITHIN_LIMIT;","lastModifiedDate":"2021-10-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonFastStorage.class);","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"    private final Index[] indexArray;","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"     * Constructor for {@code DeleteCommand}","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"     * @param indexArray Array of indexes of the contacts to be deleted.","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"    public DeleteCommand(Index[] indexArray) {","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"        this.indexArray \u003d indexArray;","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"        if (indexArray.length \u003e MULTIPLE_DELETE_LIMIT) {","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"            logger.info(\"Input contains more than 10 indexes.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(MESSAGE_MULTIPLE_DELETE_FAILED_EXCEED_LIMIT);","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"        if (indexArray.length \u003e lastShownList.size()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"            executeInvalidIndexScenario();","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"        if (isSingleDelete()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"            return executeSingleDelete(lastShownList, model);","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"        if (isMultipleDelete()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"            return executeMultipleDelete(lastShownList, model);","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"        // should never reach here","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"        throw new CommandException(Messages.MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"    private boolean isSingleDelete() {","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"        return indexArray.length \u003d\u003d 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"    private boolean isMultipleDelete() {","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"        return indexArray.length \u003e 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"    private void checkDuplicates(Index[] array) throws CommandException {","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"        Set\u003cInteger\u003e set \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"        for (Index index : array) {","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"            if (!set.add(index.getZeroBased())) {","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"                throw new CommandException(MESSAGE_MULTIPLE_DELETE_FAILED_DUPLICATES);","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"    private void sortOrder() {","lastModifiedDate":"2021-10-30"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"        Arrays.sort(indexArray, Index::compareTo);","lastModifiedDate":"2021-10-30"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"    private ArrayList\u003cIndex\u003e getInvalidIndex(List\u003cPerson\u003e lastShownList) {","lastModifiedDate":"2021-10-30"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"        ArrayList\u003cIndex\u003e outOfBoundIndexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-30"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"        for (Index index : indexArray) {","lastModifiedDate":"2021-10-30"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"            if (index.getOneBased() \u003e lastShownList.size()) {","lastModifiedDate":"2021-10-30"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"                outOfBoundIndexArray.add(index);","lastModifiedDate":"2021-10-30"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"            }","lastModifiedDate":"2021-10-30"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-30"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"        return outOfBoundIndexArray;","lastModifiedDate":"2021-10-30"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"    private String getInvalidIndexMessage(ArrayList\u003cIndex\u003e arrayList) {","lastModifiedDate":"2021-10-30"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"        String msg \u003d \"\";","lastModifiedDate":"2021-10-30"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"        for (Index index : arrayList) {","lastModifiedDate":"2021-10-30"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"            msg \u003d msg + index.getOneBased() + \" \";","lastModifiedDate":"2021-10-30"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-30"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"        return msg.trim().replace(\" \", \", \");","lastModifiedDate":"2021-10-30"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"    private void checkIndex(ArrayList\u003cIndex\u003e indexArrayList, String message) throws CommandException {","lastModifiedDate":"2021-10-30"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"        if (indexArrayList.size() \u003e 0) {","lastModifiedDate":"2021-10-30"},{"lineNumber":131,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(message);","lastModifiedDate":"2021-10-30"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-30"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"    private void checkIndex(Index index, List\u003cPerson\u003e lastShownList, String message) throws CommandException {","lastModifiedDate":"2021-10-21"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"        if (index.getOneBased() \u003e lastShownList.size()) {","lastModifiedDate":"2021-10-30"},{"lineNumber":137,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(message);","lastModifiedDate":"2021-10-21"},{"lineNumber":138,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":140,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":141,"author":{"gitId":"Py0000"},"content":"    private void executeInvalidIndexScenario() throws CommandException {","lastModifiedDate":"2021-10-21"},{"lineNumber":142,"author":{"gitId":"Py0000"},"content":"        if (isSingleDelete()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":143,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-21"},{"lineNumber":144,"author":{"gitId":"Py0000"},"content":"        } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":145,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(MESSAGE_MULTIPLE_DELETE_FAILED_WITHIN_LIMIT);","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":149,"author":{"gitId":"Py0000"},"content":"    private CommandResult executeSingleDelete(List\u003cPerson\u003e lastShownList, Model model) throws CommandException {","lastModifiedDate":"2021-10-21"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"        Index targetIndex \u003d indexArray[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"        checkIndex(targetIndex, lastShownList, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-21"},{"lineNumber":153,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":154,"author":{"gitId":"Py0000"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"Py0000"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2021-10-21"},{"lineNumber":156,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":157,"author":{"gitId":"Py0000"},"content":"        return new CommandResult(String.format(MESSAGE_SINGLE_DELETE_SUCCESS, personToDelete));","lastModifiedDate":"2021-10-21"},{"lineNumber":158,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":159,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":160,"author":{"gitId":"Py0000"},"content":"    private CommandResult executeMultipleDelete(List\u003cPerson\u003e lastShownList, Model model) throws CommandException {","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"Py0000"},"content":"        sortOrder();","lastModifiedDate":"2021-11-02"},{"lineNumber":162,"author":{"gitId":"Py0000"},"content":"        ArrayList\u003cIndex\u003e invalidIndexList \u003d getInvalidIndex(lastShownList);","lastModifiedDate":"2021-10-30"},{"lineNumber":163,"author":{"gitId":"Py0000"},"content":"        String invalidIndexString \u003d getInvalidIndexMessage(invalidIndexList);","lastModifiedDate":"2021-10-30"},{"lineNumber":164,"author":{"gitId":"Py0000"},"content":"        String errorMsg \u003d String.format(MESSAGE_MULTIPLE_DELETE_INVALID_INDEX_DETECTED, invalidIndexString);","lastModifiedDate":"2021-10-30"},{"lineNumber":165,"author":{"gitId":"Py0000"},"content":"        checkIndex(invalidIndexList, errorMsg);","lastModifiedDate":"2021-10-30"},{"lineNumber":166,"author":{"gitId":"Py0000"},"content":"        checkDuplicates(indexArray);","lastModifiedDate":"2021-10-21"},{"lineNumber":167,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":168,"author":{"gitId":"Py0000"},"content":"        Index targetIndex;","lastModifiedDate":"2021-10-21"},{"lineNumber":169,"author":{"gitId":"Py0000"},"content":"        for (int i \u003d 0; i \u003c indexArray.length; i++) {","lastModifiedDate":"2021-10-21"},{"lineNumber":170,"author":{"gitId":"Py0000"},"content":"            targetIndex \u003d indexArray[i];","lastModifiedDate":"2021-10-30"},{"lineNumber":171,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":172,"author":{"gitId":"Py0000"},"content":"            Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-21"},{"lineNumber":173,"author":{"gitId":"Py0000"},"content":"            model.deletePerson(personToDelete);","lastModifiedDate":"2021-10-21"},{"lineNumber":174,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":175,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":176,"author":{"gitId":"Py0000"},"content":"        return new CommandResult(String.format(MESSAGE_MULTIPLE_DELETE_SUCCESS, indexArray.length));","lastModifiedDate":"2021-10-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":178,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":183,"author":{"gitId":"Py0000"},"content":"            \u0026\u0026 Arrays.equals(indexArray, ((DeleteCommand) other).indexArray)); // state check","lastModifiedDate":"2021-10-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":7,"Py0000":135,"-":29,"Cyn7hius":14}},{"path":"src/main/java/seedu/fast/logic/commands/EditAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT_TIME;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT_VENUE;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import java.util.List;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"public class EditAppointmentCommand extends Command {","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"    public static final String COMMAND_WORD \u003d \"ea\";","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits appointment with the client identified\"","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"Cyn7hius"},"content":"            + \" by the index number used in the last client listing.\\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"Cyn7hius"},"content":"            + \"Parameters: \\nINDEX (must be a positive integer), \"","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"            + \"[\" + PREFIX_APPOINTMENT + \"DATE] (must be yyyy-mm-dd), \"","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"            + \"[\" + PREFIX_APPOINTMENT_TIME + \"TIME] (must be hh:mm (24-hour format), \u0027leave blank\u0027 to remove it), \"","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"            + \"[\" + PREFIX_APPOINTMENT_VENUE + \"VENUE] (maximum 20 characters long), \u0027leave blank\u0027 to remove it.\"","lastModifiedDate":"2021-10-30"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"            + \"\\n\\nExamples: \\n\" + \"To edit the entire appointment: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"            + PREFIX_APPOINTMENT + \"2021-10-25 \"","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"            + PREFIX_APPOINTMENT_TIME + \"22:15 \"","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"            + PREFIX_APPOINTMENT_VENUE + \"Orchard Central\" + \"\\n\"","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"            + \"To edit the date: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"            + PREFIX_APPOINTMENT + \"2021-10-25 \"","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"            + \"To edit the time: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"            + PREFIX_APPOINTMENT_TIME + \"18:30 \"","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"            + \"To edit the venue: \" + COMMAND_WORD + \" 1 \" + PREFIX_APPOINTMENT_VENUE + \"Ion \\n\";","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_UPDATE_APPOINTMENT_SUCCESS \u003d \"Updated appointment with %1$s: %2$s %3$s\"","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"            + \" %4$s\";","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_UPDATE_APPOINTMENT_FAILED \u003d \"Unable to edit appointment. \"","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"            + \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_UPDATE_APPOINTMENT_ERROR \u003d \"No Appointment to edit.\";","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"    private final Index index;","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"    private final EditAppointmentDescriptor editAppointmentDescriptor;","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"     * Construct for an {@code EditAppointmentCommand}","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"     * @param index index of the person in the filtered person list to edit the appointment","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"     * @param editAppointmentDescriptor details of appointment to edit with","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"    public EditAppointmentCommand(Index index, EditAppointmentDescriptor editAppointmentDescriptor) {","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"        requireNonNull(editAppointmentDescriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"        this.editAppointmentDescriptor \u003d new EditAppointmentDescriptor(editAppointmentDescriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(String.format(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX));","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"                personToEdit.getAddress(), personToEdit.getRemark(), personToEdit.getTags(),","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"                createEditedAppointment(personToEdit.getAppointment(), editAppointmentDescriptor),","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"                personToEdit.getCount());","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"        if (personToEdit.getAppointment().getDate().equalsIgnoreCase(Appointment.NO_APPOINTMENT)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(MESSAGE_UPDATE_APPOINTMENT_ERROR);","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"     * Creates and returns a {@code Appointment} with the details of {@code appointmentToEdit}","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"     * edited with {@code editAppointmentDescriptor}.","lastModifiedDate":"2021-10-14"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"    private static Appointment createEditedAppointment(Appointment appointmentToEdit,","lastModifiedDate":"2021-10-14"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"            EditAppointmentDescriptor editAppointmentDescriptor) {","lastModifiedDate":"2021-10-14"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"        assert appointmentToEdit !\u003d null;","lastModifiedDate":"2021-10-14"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"        String updatedDate \u003d editAppointmentDescriptor.getDate().orElse(appointmentToEdit.getDate());","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"        String updatedTime \u003d editAppointmentDescriptor.getTime().orElse(appointmentToEdit.getTime());","lastModifiedDate":"2021-10-30"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"        String updatedVenue \u003d editAppointmentDescriptor.getVenue().orElse(appointmentToEdit.getVenue());","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"        return new Appointment(updatedDate, updatedTime, updatedVenue);","lastModifiedDate":"2021-10-14"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"     * Generates the message when an appointment is edited successfully.","lastModifiedDate":"2021-10-14"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"     * @param editedPerson The contact with the new appointment.","lastModifiedDate":"2021-10-14"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"     * @return A string indicating that the appointment has been updated.","lastModifiedDate":"2021-10-14"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"    private String generateSuccessMessage(Person editedPerson) {","lastModifiedDate":"2021-10-14"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"        return String.format(MESSAGE_UPDATE_APPOINTMENT_SUCCESS, editedPerson.getName().fullName,","lastModifiedDate":"2021-10-14"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"                editedPerson.getAppointment().getDate(),","lastModifiedDate":"2021-10-14"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"                editedPerson.getAppointment().getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"                editedPerson.getAppointment().getVenue());","lastModifiedDate":"2021-10-14"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-14"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-14"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"            return true;","lastModifiedDate":"2021-10-14"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-14"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"        if (!(other instanceof EditAppointmentCommand)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"            return false;","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"        // state check","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand e \u003d (EditAppointmentCommand) other;","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"Py0000"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-14"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"                \u0026\u0026 editAppointmentDescriptor.equals(e.editAppointmentDescriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"     * Stores the details to edit the appointment with. Each non-empty field value will replace the","lastModifiedDate":"2021-10-14"},{"lineNumber":137,"author":{"gitId":"Py0000"},"content":"     * corresponding field value of the appointment.","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"    public static class EditAppointmentDescriptor {","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"Py0000"},"content":"        private String date;","lastModifiedDate":"2021-10-14"},{"lineNumber":141,"author":{"gitId":"Py0000"},"content":"        private String time;","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"Py0000"},"content":"        private String venue;","lastModifiedDate":"2021-10-14"},{"lineNumber":143,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":144,"author":{"gitId":"Py0000"},"content":"        /**","lastModifiedDate":"2021-10-14"},{"lineNumber":145,"author":{"gitId":"Py0000"},"content":"         * Construct for an {@code EditAppointmentDescriptor}","lastModifiedDate":"2021-10-14"},{"lineNumber":146,"author":{"gitId":"Py0000"},"content":"         */","lastModifiedDate":"2021-10-14"},{"lineNumber":147,"author":{"gitId":"Py0000"},"content":"        public EditAppointmentDescriptor() {","lastModifiedDate":"2021-10-14"},{"lineNumber":148,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":149,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"        /**","lastModifiedDate":"2021-10-14"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"         * Copy constructor for {@code EditAppointmentDescriptor}.","lastModifiedDate":"2021-10-14"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"         */","lastModifiedDate":"2021-10-14"},{"lineNumber":153,"author":{"gitId":"Py0000"},"content":"        public EditAppointmentDescriptor(EditAppointmentDescriptor toCopy) {","lastModifiedDate":"2021-10-14"},{"lineNumber":154,"author":{"gitId":"Py0000"},"content":"            setDate(toCopy.date);","lastModifiedDate":"2021-10-14"},{"lineNumber":155,"author":{"gitId":"Py0000"},"content":"            setTime(toCopy.time);","lastModifiedDate":"2021-10-14"},{"lineNumber":156,"author":{"gitId":"Py0000"},"content":"            setVenue(toCopy.venue);","lastModifiedDate":"2021-10-14"},{"lineNumber":157,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":158,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":159,"author":{"gitId":"Py0000"},"content":"        /**","lastModifiedDate":"2021-10-14"},{"lineNumber":160,"author":{"gitId":"Py0000"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-10-14"},{"lineNumber":161,"author":{"gitId":"Py0000"},"content":"         */","lastModifiedDate":"2021-10-14"},{"lineNumber":162,"author":{"gitId":"Py0000"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-10-14"},{"lineNumber":163,"author":{"gitId":"Py0000"},"content":"            return CollectionUtil.isAnyNonNull(date, time, venue);","lastModifiedDate":"2021-10-14"},{"lineNumber":164,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":165,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":166,"author":{"gitId":"Py0000"},"content":"        /**","lastModifiedDate":"2021-10-14"},{"lineNumber":167,"author":{"gitId":"Py0000"},"content":"         * Sets the date to the input date.","lastModifiedDate":"2021-10-14"},{"lineNumber":168,"author":{"gitId":"Py0000"},"content":"         */","lastModifiedDate":"2021-10-14"},{"lineNumber":169,"author":{"gitId":"Py0000"},"content":"        public void setDate(String date) {","lastModifiedDate":"2021-10-14"},{"lineNumber":170,"author":{"gitId":"Py0000"},"content":"            this.date \u003d date;","lastModifiedDate":"2021-10-14"},{"lineNumber":171,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":172,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":173,"author":{"gitId":"Py0000"},"content":"        /**","lastModifiedDate":"2021-10-14"},{"lineNumber":174,"author":{"gitId":"Py0000"},"content":"         * Returns an Optional describing the date if it is present.","lastModifiedDate":"2021-10-14"},{"lineNumber":175,"author":{"gitId":"Py0000"},"content":"         * Otherwise, returns an empty Optional.","lastModifiedDate":"2021-10-14"},{"lineNumber":176,"author":{"gitId":"Py0000"},"content":"         *","lastModifiedDate":"2021-10-14"},{"lineNumber":177,"author":{"gitId":"Py0000"},"content":"         * @return an Optional containing the date if it is present, or an empty Optional if it is not present.","lastModifiedDate":"2021-10-14"},{"lineNumber":178,"author":{"gitId":"Py0000"},"content":"         */","lastModifiedDate":"2021-10-14"},{"lineNumber":179,"author":{"gitId":"Py0000"},"content":"        public Optional\u003cString\u003e getDate() {","lastModifiedDate":"2021-10-14"},{"lineNumber":180,"author":{"gitId":"Py0000"},"content":"            return Optional.ofNullable(date);","lastModifiedDate":"2021-10-14"},{"lineNumber":181,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":182,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":183,"author":{"gitId":"Py0000"},"content":"        /**","lastModifiedDate":"2021-10-14"},{"lineNumber":184,"author":{"gitId":"Py0000"},"content":"         * Sets the time to the input time.","lastModifiedDate":"2021-10-14"},{"lineNumber":185,"author":{"gitId":"Py0000"},"content":"         */","lastModifiedDate":"2021-10-14"},{"lineNumber":186,"author":{"gitId":"Py0000"},"content":"        public void setTime(String time) {","lastModifiedDate":"2021-10-14"},{"lineNumber":187,"author":{"gitId":"Py0000"},"content":"            this.time \u003d time;","lastModifiedDate":"2021-10-14"},{"lineNumber":188,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":189,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":190,"author":{"gitId":"Py0000"},"content":"        /**","lastModifiedDate":"2021-10-14"},{"lineNumber":191,"author":{"gitId":"Py0000"},"content":"         * Returns an Optional describing the time if it is present.","lastModifiedDate":"2021-10-14"},{"lineNumber":192,"author":{"gitId":"Py0000"},"content":"         * Otherwise, returns an empty Optional.","lastModifiedDate":"2021-10-14"},{"lineNumber":193,"author":{"gitId":"Py0000"},"content":"         *","lastModifiedDate":"2021-10-14"},{"lineNumber":194,"author":{"gitId":"Py0000"},"content":"         * @return an Optional containing the time if it is present, or an empty Optional if it is not present.","lastModifiedDate":"2021-10-14"},{"lineNumber":195,"author":{"gitId":"Py0000"},"content":"         */","lastModifiedDate":"2021-10-14"},{"lineNumber":196,"author":{"gitId":"Py0000"},"content":"        public Optional\u003cString\u003e getTime() {","lastModifiedDate":"2021-10-14"},{"lineNumber":197,"author":{"gitId":"Py0000"},"content":"            return Optional.ofNullable(time);","lastModifiedDate":"2021-10-14"},{"lineNumber":198,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":199,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":200,"author":{"gitId":"Py0000"},"content":"        /**","lastModifiedDate":"2021-10-14"},{"lineNumber":201,"author":{"gitId":"Py0000"},"content":"         * Sets the venue to the input venue.","lastModifiedDate":"2021-10-14"},{"lineNumber":202,"author":{"gitId":"Py0000"},"content":"         */","lastModifiedDate":"2021-10-14"},{"lineNumber":203,"author":{"gitId":"Py0000"},"content":"        public void setVenue(String venue) {","lastModifiedDate":"2021-10-14"},{"lineNumber":204,"author":{"gitId":"Py0000"},"content":"            this.venue \u003d venue;","lastModifiedDate":"2021-10-14"},{"lineNumber":205,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":206,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":207,"author":{"gitId":"Py0000"},"content":"        /**","lastModifiedDate":"2021-10-14"},{"lineNumber":208,"author":{"gitId":"Py0000"},"content":"         * Returns an Optional describing the venue if it is present.","lastModifiedDate":"2021-10-14"},{"lineNumber":209,"author":{"gitId":"Py0000"},"content":"         * Otherwise, returns an empty Optional.","lastModifiedDate":"2021-10-14"},{"lineNumber":210,"author":{"gitId":"Py0000"},"content":"         *","lastModifiedDate":"2021-10-14"},{"lineNumber":211,"author":{"gitId":"Py0000"},"content":"         * @return an Optional containing the venue if it is present, or an empty Optional if it is not present.","lastModifiedDate":"2021-10-14"},{"lineNumber":212,"author":{"gitId":"Py0000"},"content":"         */","lastModifiedDate":"2021-10-14"},{"lineNumber":213,"author":{"gitId":"Py0000"},"content":"        public Optional\u003cString\u003e getVenue() {","lastModifiedDate":"2021-10-14"},{"lineNumber":214,"author":{"gitId":"Py0000"},"content":"            return Optional.ofNullable(venue);","lastModifiedDate":"2021-10-14"},{"lineNumber":215,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":216,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":217,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":218,"author":{"gitId":"Py0000"},"content":"        @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":219,"author":{"gitId":"Py0000"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-10-14"},{"lineNumber":220,"author":{"gitId":"Py0000"},"content":"            // short circuit if same object","lastModifiedDate":"2021-10-14"},{"lineNumber":221,"author":{"gitId":"Py0000"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-14"},{"lineNumber":222,"author":{"gitId":"Py0000"},"content":"                return true;","lastModifiedDate":"2021-10-14"},{"lineNumber":223,"author":{"gitId":"Py0000"},"content":"            }","lastModifiedDate":"2021-10-14"},{"lineNumber":224,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":225,"author":{"gitId":"Py0000"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-10-14"},{"lineNumber":226,"author":{"gitId":"Py0000"},"content":"            if (!(other instanceof EditAppointmentDescriptor)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":227,"author":{"gitId":"Py0000"},"content":"                return false;","lastModifiedDate":"2021-10-14"},{"lineNumber":228,"author":{"gitId":"Py0000"},"content":"            }","lastModifiedDate":"2021-10-14"},{"lineNumber":229,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":230,"author":{"gitId":"Py0000"},"content":"            // state check","lastModifiedDate":"2021-10-14"},{"lineNumber":231,"author":{"gitId":"Py0000"},"content":"            EditAppointmentDescriptor e \u003d (EditAppointmentDescriptor) other;","lastModifiedDate":"2021-10-14"},{"lineNumber":232,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":233,"author":{"gitId":"Py0000"},"content":"            return getDate().equals(e.getDate())","lastModifiedDate":"2021-10-14"},{"lineNumber":234,"author":{"gitId":"Py0000"},"content":"                    \u0026\u0026 getTime().equals(e.getTime())","lastModifiedDate":"2021-10-14"},{"lineNumber":235,"author":{"gitId":"Py0000"},"content":"                    \u0026\u0026 getVenue().equals(e.getVenue());","lastModifiedDate":"2021-10-14"},{"lineNumber":236,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":237,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":238,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":239,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":240,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":237,"Cyn7hius":3}},{"path":"src/main/java/seedu/fast/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Address;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.AppointmentCount;","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Email;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Remark;","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"Cyn7hius"},"content":" * Edits the details of an existing person in FAST.","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"            + \"Existing values will be overwritten by the input values.\\n\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"Cyn7hius"},"content":"            + \"Parameters: \\nINDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"Cyn7hius"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"Cyn7hius"},"content":"            + \"Example: \\n\" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in FAST.\";","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Remark updatedRemark \u003d personToEdit.getRemark();","lastModifiedDate":"2021-09-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2021-09-13"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"        Appointment updatedAppointment \u003d personToEdit.getAppointment();","lastModifiedDate":"2021-10-05"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"        AppointmentCount updatedCount \u003d personToEdit.getCount();","lastModifiedDate":"2021-10-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark, updatedTags,","lastModifiedDate":"2021-10-05"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"                updatedAppointment, updatedCount);","lastModifiedDate":"2021-10-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":144,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":195,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":196,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":197,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":204,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":205,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":206,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":233,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"squeakysquak":19,"Py0000":6,"-":202,"Cyn7hius":6}},{"path":"src/main/java/seedu/fast/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"Cyn7hius"},"content":"            + \": Exits FAST and closes the window \\n\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"            + \"Example: \\n\" + COMMAND_WORD;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting FAST as requested ...\";","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"squeakysquak":2,"-":15,"Cyn7hius":4}},{"path":"src/main/java/seedu/fast/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_PRIORITY_TAG;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.NameContainsQueriesPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.PriorityPredicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.RemarkContainsKeywordPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.TagMatchesKeywordPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.PriorityTag;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"Cyn7hius"},"content":" * Finds and lists all persons in FAST whose name contains any of the argument keywords.","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"    public static final String TAG_PREFIX \u003d \"t/\";","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"    public static final String REMARK_PREFIX \u003d \"r/\";","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"Cyn7hius"},"content":"            + \": Finds all client whose names contain any of \"","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"            + \"the specified keywords (case-insensitive) or priority tags, \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"            + \"tags or remarks and displays them as a list with index numbers.\\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"            + \"Parameters: \\nQUERY [MORE_QUERIES]...\\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"trash-bin99"},"content":"            + \" OR \\n\" + PREFIX_PRIORITY_TAG","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"squeakysquak"},"content":"            + \"PRIORITY [MORE_PRIORITIES]...\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"squeakysquak"},"content":"            + \" OR \\n\" + FindCommand.TAG_PREFIX","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"squeakysquak"},"content":"            + \"TAG [MORE_TAGS]...\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"squeakysquak"},"content":"            + \" OR \\n\" + FindCommand.REMARK_PREFIX","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"squeakysquak"},"content":"            + \"REMARK [MORE_REMARKS]...\\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"Cyn7hius"},"content":"            + \"Examples: \\n\" + COMMAND_WORD + \" alice bob charlie\\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"Cyn7hius"},"content":"            + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"trash-bin99"},"content":"            + PREFIX_PRIORITY_TAG","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"squeakysquak"},"content":"            + PriorityTag.LowPriority.TERM + \" \" + PriorityTag.MediumPriority.TERM + \"\\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"squeakysquak"},"content":"            + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"squeakysquak"},"content":"            + FindCommand.TAG_PREFIX + \"friends\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"squeakysquak"},"content":"            + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"squeakysquak"},"content":"            + FindCommand.REMARK_PREFIX + \"aardvark\\n\";","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"squeakysquak"},"content":"    private final Predicate\u003cPerson\u003e predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":50,"author":{"gitId":"squeakysquak"},"content":"    public FindCommand(NameContainsQueriesPredicate predicate) {","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":54,"author":{"gitId":"squeakysquak"},"content":"    public FindCommand(PriorityPredicate predicate) {","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"squeakysquak"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"squeakysquak"},"content":"    public FindCommand(TagMatchesKeywordPredicate predicate) {","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"squeakysquak"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"squeakysquak"},"content":"    public FindCommand(RemarkContainsKeywordPredicate predicate) {","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"squeakysquak"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"squeakysquak":42,"trash-bin99":3,"-":30,"Cyn7hius":5}},{"path":"src/main/java/seedu/fast/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"        + \"Parameters: \\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"        + \"help [COMMAND]\\n\\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"Cyn7hius"},"content":"        + \"Example: \\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"        + COMMAND_WORD + \"\\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"Cyn7hius"},"content":"        + COMMAND_WORD + \" add\" + \"\\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"        + COMMAND_WORD + \" Add\";","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window\";","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":"    private String command;","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"Cyn7hius"},"content":"    public HelpCommand(String command) {","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"Cyn7hius"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"Cyn7hius"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"Cyn7hius"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"Cyn7hius"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"Cyn7hius"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"Cyn7hius"},"content":"            return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"Cyn7hius"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"        if (!(other instanceof HelpCommand)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"Cyn7hius"},"content":"            return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"Cyn7hius"},"content":"        // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"Cyn7hius"},"content":"        HelpCommand e \u003d (HelpCommand) other;","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"Cyn7hius"},"content":"        return e.command.equals(((HelpCommand) other).command);","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":2,"-":15,"Cyn7hius":32}},{"path":"src/main/java/seedu/fast/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"Cyn7hius"},"content":" * Lists all persons in FAST to the user.","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"Cyn7hius"},"content":"        + \": Displays all your clients saved in FAST. This command can be used to return to the whole client \"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"        + \"list after a \u0027find\u0027 or \u0027sort\u0027. \\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"Cyn7hius"},"content":"        + \"Example: \\n\" + COMMAND_WORD;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all clients\";","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":3,"-":18,"Cyn7hius":6}},{"path":"src/main/java/seedu/fast/logic/commands/MarkAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import java.util.List;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"public class MarkAppointmentCommand extends Command {","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"    public static final String COMMAND_WORD \u003d \"ma\";","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":"            + \": Marks an appointment with the client identified as completed\"","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"Cyn7hius"},"content":"            + \" by the index number used in the last client listing.\\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":"            + \"Parameters: \\nINDEX (must be a positive integer)\\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"Cyn7hius"},"content":"            + \"Example: \\n\" + COMMAND_WORD + \" 1 \";","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_MARK_APPOINTMENT_SUCCESS \u003d \"Completed an appointment with \"","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"            + \"%1$s %2$s %3$s %4$s\";","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_MARK_APPOINTMENT_FAILURE \u003d \"No appointment exists!\";","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"    private final Index index;","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"    private final Appointment appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"     * Construct for an {@code MarkAppointmentCommand}","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"     * @param index index of the person in the filtered person list to mark the appointment as completed","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"     * @param appointment the existing appointment that has been completed","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"    public MarkAppointmentCommand(Index index, Appointment appointment) {","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"        requireAllNonNull(index, appointment);","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"        // No appointment -\u003e no reason to be able to mark it as completed.","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"        if (personToEdit.getAppointment().getDate().equalsIgnoreCase(Appointment.NO_APPOINTMENT)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(MESSAGE_MARK_APPOINTMENT_FAILURE);","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"                personToEdit.getAddress(), personToEdit.getRemark(), personToEdit.getTags(), appointment,","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"                personToEdit.getCount().incrementAppointmentCount());","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"        return new CommandResult(generateSuccessMessage(personToEdit));","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"     * Generates a command execution success message when the appointment is marked as completed successfully.","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"        return String.format(MESSAGE_MARK_APPOINTMENT_SUCCESS, personToEdit.getName().fullName,","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"                personToEdit.getAppointment().getDate(),","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"                personToEdit.getAppointment().getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"                personToEdit.getAppointment().getVenue());","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"            return true;","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"        if (!(other instanceof MarkAppointmentCommand)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"            return false;","lastModifiedDate":"2021-10-14"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"        // state check","lastModifiedDate":"2021-10-14"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"        MarkAppointmentCommand e \u003d (MarkAppointmentCommand) other;","lastModifiedDate":"2021-10-14"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"                \u0026\u0026 appointment.equals(e.appointment);","lastModifiedDate":"2021-10-14"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":96,"Cyn7hius":4}},{"path":"src/main/java/seedu/fast/logic/commands/RemarkCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Remark;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"Cyn7hius"},"content":" * Changes the remark of an existing person in FAST.","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"    public static final String COMMAND_WORD \u003d \"rmk\";","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":"            + \": Edits the remark of the client identified \"","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"Cyn7hius"},"content":"            + \"by the index number used in the last client listing. \"","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"Cyn7hius"},"content":"            + \"Existing remark will be overwritten by the input.\\n\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"Cyn7hius"},"content":"            + \"Parameters: \\nINDEX (must be a postive integer) \"","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"Th-429B"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"Th-429B"},"content":"            + \"[Remark] cannot exceed 45 characters \\n\\n\"","lastModifiedDate":"2021-10-31"},{"lineNumber":28,"author":{"gitId":"Cyn7hius"},"content":"            + \"Example: \\n\" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Client: %1$s\";","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Client: %1$s\";","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Remark remark;","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"     * Construct for a {@code RemarkCommand}","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @param index index of the person in the filtered person list to edit the remark","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @param remark remark of the person to be updated to","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, Remark remark) {","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-09-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-09-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-09-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-09-13"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags(), personToEdit.getAppointment(),","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"                personToEdit.getCount());","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-09-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2021-09-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-09-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-09-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2021-09-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2021-09-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2021-09-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2021-09-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2021-09-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-09-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2021-09-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-09-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2021-09-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2021-09-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2021-09-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2021-09-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return index.equals(e.index) \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2021-09-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"squeakysquak":9,"Py0000":4,"-":73,"Cyn7hius":8,"Th-429B":2}},{"path":"src/main/java/seedu/fast/logic/commands/SortCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"Cyn7hius"},"content":" * Lists all persons in the FAST to the user.","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":"public class SortCommand extends Command {","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"Th-429B"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"            + \": Sorts the client in FAST by the given keyword \\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"Cyn7hius"},"content":"            + \"Keyword: \u0027name\u0027, \u0027appointment\u0027, \u0027priority\u0027 \\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"Th-429B"},"content":"            + \"Example: \" + COMMAND_WORD + \" name\";","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Sorted all clients by %1$s\";","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"Th-429B"},"content":"    private final Comparator\u003cPerson\u003e comparator;","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"Th-429B"},"content":"    private final String keyword;","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"Th-429B"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"     * Constructor for SortCommand","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"     * @param comparator Custom comparator that is used to sort.","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"Th-429B"},"content":"     * @param keyword Identifier of the sort.","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"Th-429B"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"Th-429B"},"content":"    public SortCommand(Comparator\u003cPerson\u003e comparator, String keyword) {","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"Th-429B"},"content":"        this.comparator \u003d comparator;","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"Th-429B"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"Th-429B"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"Th-429B"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"Th-429B"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"Th-429B"},"content":"        model.sortPerson(comparator);","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"Th-429B"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, keyword));","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"Th-429B"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"Th-429B"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"Th-429B"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"Th-429B"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"Th-429B"},"content":"            return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"Th-429B"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"Th-429B"},"content":"        if (!(other instanceof SortCommand)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"Th-429B"},"content":"            return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"Th-429B"},"content":"        // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"Th-429B"},"content":"        SortCommand e \u003d (SortCommand) other;","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"Th-429B"},"content":"        return comparator.equals(e.comparator) \u0026\u0026 keyword.equals(e.keyword);","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Th-429B":56,"Cyn7hius":5}},{"path":"src/main/java/seedu/fast/logic/commands/TagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"trash-bin99"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"trash-bin99"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"trash-bin99"},"content":"import java.util.List;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"trash-bin99"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"trash-bin99"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.commons.core.LogsCenter;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.storage.JsonFastStorage;","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"trash-bin99"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"trash-bin99"},"content":" * Edits the tag(s) of an existing person in FAST.","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"trash-bin99"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"trash-bin99"},"content":"public class TagCommand extends Command {","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"trash-bin99"},"content":"    public static final String COMMAND_WORD \u003d \"tag\";","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"trash-bin99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"Cyn7hius"},"content":"            + \": Adds to or deletes the tag(s) of the client identified \"","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"Cyn7hius"},"content":"            + \"by the index number used in the last client listing. \"","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"trash-bin99"},"content":"            + \"Existing tags will not be overwritten by the input.\\n\\n\"","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"trash-bin99"},"content":"            + \"Parameters: \\nINDEX (must be a postive integer) \"","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"trash-bin99"},"content":"            + \"a/[TAGNAME]\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"trash-bin99"},"content":"            + \"d/[TAGNAME]\\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"trash-bin99"},"content":"            + \"Example: \\n\" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"trash-bin99"},"content":"            + \"a/Friend d/Family\";","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_EDIT_TAG_SUCCESS \u003d \"Edited tags of Client: %1$s\";","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"trash-bin99"},"content":"    public static final String MESSAGE_TAGS_ARE_REPEATED \u003d \"A tag with the name %1$s already exists!\";","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"trash-bin99"},"content":"    public static final String MESSAGE_TAG_DOES_NOT_EXIST \u003d \"The tag %1$s does not exist!\";","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_MULTIPLE_PRIORITY_TAGS \u003d \"Each client can only have one Priority tag!\";","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"trash-bin99"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonFastStorage.class);","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"trash-bin99"},"content":"    private final Index index;","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"trash-bin99"},"content":"    private Set\u003cTag\u003e addTags;","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"trash-bin99"},"content":"    private Set\u003cTag\u003e deleteTags;","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"trash-bin99"},"content":"     * Construct for a {@code RemarkCommand}","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"trash-bin99"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"trash-bin99"},"content":"     * @param index index of the person in the filtered person list to add the tags","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"trash-bin99"},"content":"     * @param addTags Tags of the person to be added","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"trash-bin99"},"content":"     * @param deleteTags Tags of the person to be deleted","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"trash-bin99"},"content":"    public TagCommand(Index index, Set\u003cTag\u003e addTags, Set\u003cTag\u003e deleteTags) {","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"trash-bin99"},"content":"        requireAllNonNull(index, addTags, deleteTags);","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"trash-bin99"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"trash-bin99"},"content":"        this.addTags \u003d addTags;","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"trash-bin99"},"content":"        this.deleteTags \u003d deleteTags;","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"trash-bin99"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"trash-bin99"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"trash-bin99"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"trash-bin99"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"trash-bin99"},"content":"            logger.info(\"Input index is not within range.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"trash-bin99"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-17"},{"lineNumber":68,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"trash-bin99"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"trash-bin99"},"content":"        Set\u003cTag\u003e oldTags \u003d personToEdit.getTags();","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"trash-bin99"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(oldTags);","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"trash-bin99"},"content":"        for (Tag tag: deleteTags) {","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"trash-bin99"},"content":"            if (!newTags.remove(tag)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"trash-bin99"},"content":"                logger.info(\"Tag to be deleted does not exist.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"trash-bin99"},"content":"                throw new CommandException(String.format(MESSAGE_TAG_DOES_NOT_EXIST, tag.tagName));","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"trash-bin99"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"trash-bin99"},"content":"        for (Tag tag: addTags) {","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"trash-bin99"},"content":"            if (!newTags.add(tag)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"trash-bin99"},"content":"                logger.info(\"Tag to be added already exists.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"trash-bin99"},"content":"                throw new CommandException(String.format(MESSAGE_TAGS_ARE_REPEATED, tag.tagName));","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"trash-bin99"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"trash-bin99"},"content":"        //add any additional tag constraint checks here, for priority and investment plan tags","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"trash-bin99"},"content":"        if (TagCommandUtils.hasMultiplePriorityTags(newTags)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"trash-bin99"},"content":"            logger.info(\"Attempted to add more than one priority tag.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"trash-bin99"},"content":"            throw new CommandException(MESSAGE_MULTIPLE_PRIORITY_TAGS);","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"trash-bin99"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-10-17"},{"lineNumber":95,"author":{"gitId":"trash-bin99"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-10-17"},{"lineNumber":96,"author":{"gitId":"trash-bin99"},"content":"                personToEdit.getAddress(), personToEdit.getRemark(), newTags,","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"trash-bin99"},"content":"                personToEdit.getAppointment(), personToEdit.getCount());","lastModifiedDate":"2021-10-17"},{"lineNumber":98,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"trash-bin99"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"trash-bin99"},"content":"        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-17"},{"lineNumber":101,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":102,"author":{"gitId":"trash-bin99"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":103,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":104,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":105,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":106,"author":{"gitId":"trash-bin99"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"trash-bin99"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-10-17"},{"lineNumber":108,"author":{"gitId":"trash-bin99"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2021-10-17"},{"lineNumber":109,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":110,"author":{"gitId":"trash-bin99"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2021-10-17"},{"lineNumber":111,"author":{"gitId":"trash-bin99"},"content":"        return String.format(MESSAGE_EDIT_TAG_SUCCESS, personToEdit);","lastModifiedDate":"2021-10-20"},{"lineNumber":112,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":113,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":114,"author":{"gitId":"trash-bin99"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":115,"author":{"gitId":"trash-bin99"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-17"},{"lineNumber":116,"author":{"gitId":"trash-bin99"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"trash-bin99"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-17"},{"lineNumber":118,"author":{"gitId":"trash-bin99"},"content":"            return true;","lastModifiedDate":"2021-10-17"},{"lineNumber":119,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":120,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":121,"author":{"gitId":"trash-bin99"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":122,"author":{"gitId":"trash-bin99"},"content":"        if (!(other instanceof TagCommand)) {","lastModifiedDate":"2021-10-19"},{"lineNumber":123,"author":{"gitId":"trash-bin99"},"content":"            return false;","lastModifiedDate":"2021-10-17"},{"lineNumber":124,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":125,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":126,"author":{"gitId":"trash-bin99"},"content":"        // state check","lastModifiedDate":"2021-10-17"},{"lineNumber":127,"author":{"gitId":"trash-bin99"},"content":"        TagCommand e \u003d (TagCommand) other;","lastModifiedDate":"2021-10-17"},{"lineNumber":128,"author":{"gitId":"trash-bin99"},"content":"        return index.equals(e.index) \u0026\u0026 addTags.equals(e.addTags) \u0026\u0026 deleteTags.equals(e.deleteTags);","lastModifiedDate":"2021-10-18"},{"lineNumber":129,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":130,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":131,"author":{"gitId":"trash-bin99"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"trash-bin99":127,"Cyn7hius":4}},{"path":"src/main/java/seedu/fast/logic/commands/TagCommandUtils.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"trash-bin99"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"trash-bin99"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"trash-bin99"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.commons.util.TagUtil;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":"public class TagCommandUtils {","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"trash-bin99"},"content":"     * Checks if a given Set of Tags contains multiple Priority tags.","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"trash-bin99"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"     * @param tags The Set of Tags to be checked.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"trash-bin99"},"content":"     * @return A boolean indicating the result.","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"trash-bin99"},"content":"    public static boolean hasMultiplePriorityTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"trash-bin99"},"content":"        requireNonNull(tags);","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"trash-bin99"},"content":"        int numberOfPriorityTags \u003d 0;","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"trash-bin99"},"content":"        for (Tag tag : tags) {","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"trash-bin99"},"content":"            if (tag.getPriority() !\u003d TagUtil.NO_PRIORITY) {","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"trash-bin99"},"content":"                numberOfPriorityTags +\u003d 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"trash-bin99"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"trash-bin99"},"content":"        return numberOfPriorityTags \u003e 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"trash-bin99"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"trash-bin99":29}},{"path":"src/main/java/seedu/fast/logic/commands/UnmarkAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import java.util.List;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.AppointmentCount;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"public class UnmarkAppointmentCommand extends Command {","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"    public static final String COMMAND_WORD \u003d \"ua\";","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"            + \": Undo marking an appointment with the clients specified\"","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"            + \" by the index number used in the last client listing.\\n\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"            + \"Parameters: \\nINDEX (must be a positive integer)\\n\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"            + \"Example: \\n\" + COMMAND_WORD + \" 1 \";","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_UNMARK_APPOINTMENT_SUCCESS \u003d \"Successfully undo marking of appointment with \"","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"            + \"%1$s.\";","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_UNMARK_APPOINTMENT_FAILURE_ZERO \u003d \"You cannot undo marking of appointment \"","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"            + \"if you have not done any appointment!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"    public static final String MESSAGE_UNMARK_APPOINTMENT_FAILURE_EXIST \u003d \"You cannot undo marking of appointment \"","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"            + \"if you have a scheduled appointment with %1$s currently!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"    private final Index index;","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"    private final Appointment appointment;","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"     * Construct for an {@code UnmarkAppointmentCommand}","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"     * @param index index of the person in the filtered person list to mark the appointment as completed","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"     * @param appointment the existing appointment that has been marked completed","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"    public UnmarkAppointmentCommand(Index index, Appointment appointment) {","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"        requireAllNonNull(index, appointment);","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"        // AppointmentCount cannot go below 0.","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"        if (!AppointmentCount.isValidDecrementCount(personToEdit.getCount())) {","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(MESSAGE_UNMARK_APPOINTMENT_FAILURE_ZERO);","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"        // Has an appointment -\u003e means did not accidentally mark an appointment as completed.","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"        if (!(personToEdit.getAppointment().getDate().equalsIgnoreCase(Appointment.NO_APPOINTMENT))) {","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"            throw new CommandException(String.format(MESSAGE_UNMARK_APPOINTMENT_FAILURE_EXIST,","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"                    personToEdit.getName()));","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"                personToEdit.getAddress(), personToEdit.getRemark(), personToEdit.getTags(), appointment,","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"                personToEdit.getCount().decrementAppointmentCount());","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-28"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-28"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"        return new CommandResult(generateSuccessMessage(personToEdit));","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"     * Generates a command execution success message when the appointment is marked as completed successfully.","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"        return String.format(MESSAGE_UNMARK_APPOINTMENT_SUCCESS, personToEdit.getName().fullName);","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"            return true;","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"        if (!(other instanceof UnmarkAppointmentCommand)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"            return false;","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"        // state check","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"        UnmarkAppointmentCommand e \u003d (UnmarkAppointmentCommand) other;","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"                \u0026\u0026 appointment.equals(e.appointment);","lastModifiedDate":"2021-10-28"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"Py0000":107}},{"path":"src/main/java/seedu/fast/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands.exceptions;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"squeakysquak":1,"-":16}},{"path":"src/main/java/seedu/fast/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.AddCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Address;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.AppointmentCount;","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Email;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Remark;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"                        PREFIX_TAG);","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2017-12-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Remark remark \u003d new Remark(\"\");","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        Appointment appointment \u003d new Appointment(Appointment.NO_APPOINTMENT, Appointment.NO_TIME,","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"                Appointment.NO_VENUE);","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"        AppointmentCount count \u003d new AppointmentCount(AppointmentCount.INITIAL_COUNT);","lastModifiedDate":"2021-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"        Person person \u003d new Person(name, phone, email, address, remark, tagList, appointment, count);","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"squeakysquak":16,"Py0000":8,"-":44}},{"path":"src/main/java/seedu/fast/logic/parser/AppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT_TIME;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT_VENUE;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.ParserUtil.parseDateString;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.ParserUtil.parseTimeString;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.AppointmentCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"public class AppointmentCommandParser implements Parser\u003cAppointmentCommand\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"     * Parses the given {@code String} of arguments in the context of the AppointmentCommand","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"     * and returns an AppointmentCommand object for execution.","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"    public AppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"                PREFIX_APPOINTMENT, PREFIX_APPOINTMENT_TIME, PREFIX_APPOINTMENT_VENUE);","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"        Index index;","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"        try {","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"                    AppointmentCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"        String retrievedDate \u003d argMultimap.getValue(PREFIX_APPOINTMENT).orElse(Appointment.NO_APPOINTMENT);","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"        if (retrievedDate.equalsIgnoreCase(Appointment.NO_APPOINTMENT)) {","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"                    AppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"        String parsedDate \u003d parseDateString(retrievedDate);","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"        String retrievedTime \u003d argMultimap.getValue(PREFIX_APPOINTMENT_TIME).orElse(Appointment.NO_TIME);","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        String parsedTime \u003d parseTimeString(retrievedTime);","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"        String retrievedVenue \u003d argMultimap.getValue(PREFIX_APPOINTMENT_VENUE).orElse(Appointment.NO_VENUE);","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"        String parsedVenue \u003d checkVenueLength(retrievedVenue);","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"        return new AppointmentCommand(index, new Appointment(parsedDate, parsedTime, parsedVenue));","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"    private String checkVenueLength(String venue) throws ParseException {","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"        if (!Appointment.isValidVenueFormat(venue)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"                    Appointment.INVALID_VENUE_INPUT));","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"        return venue;","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Py0000":61}},{"path":"src/main/java/seedu/fast/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"squeakysquak":1,"-":59}},{"path":"src/main/java/seedu/fast/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"squeakysquak":1,"-":147}},{"path":"src/main/java/seedu/fast/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"    public static final Prefix PREFIX_APPOINTMENT \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"    public static final Prefix PREFIX_APPOINTMENT_TIME \u003d new Prefix(\"t/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"    public static final Prefix PREFIX_APPOINTMENT_VENUE \u003d new Prefix(\"v/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"trash-bin99"},"content":"    public static final Prefix PREFIX_ADD_TAG \u003d new Prefix(\"a/\");","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"trash-bin99"},"content":"    public static final Prefix PREFIX_DELETE_TAG \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"trash-bin99"},"content":"    public static final Prefix PREFIX_INVESTMENT_PLAN_TAG \u003d new Prefix(\"ip/\");","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"trash-bin99"},"content":"    public static final Prefix PREFIX_PRIORITY_TAG \u003d new Prefix(\"pr/\");","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"squeakysquak":1,"trash-bin99":5,"Py0000":3,"-":14}},{"path":"src/main/java/seedu/fast/logic/parser/DeleteAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"    public DeleteAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"        Index index;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"        try {","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"                    DeleteAppointmentCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"        return new DeleteAppointmentCommand(index,","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"                new Appointment(Appointment.NO_APPOINTMENT, Appointment.NO_TIME, Appointment.NO_VENUE));","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":29}},{"path":"src/main/java/seedu/fast/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.DeleteCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"        Index[] result;","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"        if (isRangeInput(args)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"            String[] rangedIndex \u003d spiltRangeInput(args);","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"            result \u003d parseRangeInput(rangedIndex);","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"        } else {","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"            String[] multipleIndexes \u003d args.trim().split(\" \");","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"            result \u003d checkAndParseArgs(multipleIndexes);","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"        return new DeleteCommand(result);","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"    private Index[] checkAndParseArgs(String[] args) throws ParseException {","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"        Index[] result \u003d new Index[args.length];","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"        for (String indexString : args) {","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            try {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"                Index index \u003d ParserUtil.parseIndex(indexString);","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"                result[count++] \u003d index;","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-01-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"    private boolean isRangeInput(String args) {","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"        String testArgs \u003d args.trim().replace(\" \", \"\");","lastModifiedDate":"2021-10-30"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        return testArgs.length() \u003e\u003d 3 \u0026\u0026 countDash(testArgs) \u003d\u003d 1;","lastModifiedDate":"2021-10-30"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"    // should return a string array of length 2","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"    private String[] spiltRangeInput(String args) {","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"        String[] rangedIndexes \u003d args.trim().split(\"-\");","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"        return rangedIndexes;","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"    private Index[] parseRangeInput(String[] args) throws ParseException {","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"        assert args.length \u003d\u003d 2 : \"Invalid range input\";","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"        Index[] result;","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"        Index startIndex;","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"        Index endIndex;","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"            startIndex \u003d ParserUtil.parseIndex(args[0]);","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"            endIndex \u003d ParserUtil.parseIndex(args[1]);","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"            if (!isValidRange(startIndex, endIndex)) {","lastModifiedDate":"2021-10-30"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"                throw new ParseException(","lastModifiedDate":"2021-10-30"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-30"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"            }","lastModifiedDate":"2021-10-30"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"            result \u003d new Index[endIndex.getOneBased() - startIndex.getOneBased() + 1];","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"        } catch (ParseException | NegativeArraySizeException e) {","lastModifiedDate":"2021-10-30"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), e);","lastModifiedDate":"2021-10-30"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"        for (int i \u003d startIndex.getOneBased(); i \u003c\u003d endIndex.getOneBased(); i++) {","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"            result[count++] \u003d Index.fromOneBased(i);","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"        return result;","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"    private long countDash(String str) {","lastModifiedDate":"2021-10-30"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"        long count \u003d str.chars().filter(c -\u003e c \u003d\u003d \u0027-\u0027).count();","lastModifiedDate":"2021-10-30"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"        return count;","lastModifiedDate":"2021-10-30"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"    private boolean isValidRange(Index start, Index end) {","lastModifiedDate":"2021-10-30"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"        return end.getOneBased() - start.getOneBased() \u003e\u003d 0;","lastModifiedDate":"2021-10-30"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"squeakysquak":5,"Py0000":70,"-":22}},{"path":"src/main/java/seedu/fast/logic/parser/EditAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT_TIME;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT_VENUE;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"public class EditAppointmentCommandParser implements Parser\u003cEditAppointmentCommand\u003e {","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"    public EditAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"                PREFIX_APPOINTMENT, PREFIX_APPOINTMENT_TIME, PREFIX_APPOINTMENT_VENUE);","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"        Index index;","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"        try {","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"                    EditAppointmentCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor editAppointmentDescriptor \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"        if (argMultimap.getValue(PREFIX_APPOINTMENT).isPresent()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"            String date \u003d ParserUtil.parseDateString(argMultimap.getValue(PREFIX_APPOINTMENT).get());","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"            editAppointmentDescriptor.setDate(date);","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"        if (argMultimap.getValue(PREFIX_APPOINTMENT_TIME).isPresent()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"            String time \u003d ParserUtil.parseTimeString(argMultimap.getValue(PREFIX_APPOINTMENT_TIME).get());","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"            editAppointmentDescriptor.setTime(time);","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"        if (argMultimap.getValue(PREFIX_APPOINTMENT_VENUE).isPresent()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"            String venue \u003d argMultimap.getValue(PREFIX_APPOINTMENT_VENUE).get();","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"            if (!Appointment.isValidVenueFormat(venue)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"                        Appointment.INVALID_VENUE_INPUT));","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"            editAppointmentDescriptor.setVenue(venue);","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        if (!editAppointmentDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"            throw new ParseException(EditAppointmentCommand.MESSAGE_UPDATE_APPOINTMENT_FAILED + \"\\n\"","lastModifiedDate":"2021-10-16"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"                    + EditAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-16"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"        return new EditAppointmentCommand(index, editAppointmentDescriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":58}},{"path":"src/main/java/seedu/fast/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.EditCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"squeakysquak":12,"-":70}},{"path":"src/main/java/seedu/fast/logic/parser/FastParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.AddCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.AppointmentCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.Command;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.DeleteCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.EditCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.FindCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.ListCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.MarkAppointmentCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.RemarkCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.logic.commands.SortCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.logic.commands.TagCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.UnmarkAppointmentCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"public class FastParser {","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":77,"author":{"gitId":"Cyn7hius"},"content":"            return new HelpCommandParser().parse(arguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        case RemarkCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return new RemarkCommandParser().parse(arguments);","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"Th-429B"},"content":"        case SortCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"Th-429B"},"content":"            return new SortCommandParser().parse(arguments);","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"        case AppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-05"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"            return new AppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-10-05"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"        case EditAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"            return new EditAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"        case DeleteAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-14"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"            return new DeleteAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-10-14"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"        case MarkAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-14"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"            return new MarkAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-10-14"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"        case UnmarkAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"            return new UnmarkAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"trash-bin99"},"content":"        case TagCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-17"},{"lineNumber":101,"author":{"gitId":"trash-bin99"},"content":"            return new TagCommandParser().parse(arguments);","lastModifiedDate":"2021-10-17"},{"lineNumber":102,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":15,"trash-bin99":4,"Py0000":21,"-":64,"Th-429B":3,"Cyn7hius":1}},{"path":"src/main/java/seedu/fast/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_PRIORITY_TAG;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.FindCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.NameContainsQueriesPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.PriorityPredicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.RemarkContainsKeywordPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.TagMatchesKeywordPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.PriorityTag;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"trash-bin99"},"content":"        if (trimmedArgs.startsWith(PREFIX_PRIORITY_TAG.getPrefix())) {","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"squeakysquak"},"content":"            String tokenizedArgs \u003d trimmedArgs.substring(","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"trash-bin99"},"content":"                    PREFIX_PRIORITY_TAG.getPrefix().length());","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"squeakysquak"},"content":"            String[] tags \u003d tokenizedArgs.split(\"\\\\s+\");","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"squeakysquak"},"content":"            // splits trimmedArgs according to whitespaces","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"squeakysquak"},"content":"            for (String tag : tags) {","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"squeakysquak"},"content":"                if (!isPriority(tag)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"squeakysquak"},"content":"                    throw new ParseException(","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"squeakysquak"},"content":"                            String.format(MESSAGE_INVALID_COMMAND_FORMAT, Tag.MESSAGE_CONSTRAINTS));","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"squeakysquak"},"content":"                }","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"squeakysquak"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"squeakysquak"},"content":"            return new FindCommand(new PriorityPredicate(Arrays.asList(tags)));","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"squeakysquak"},"content":"        } else if (trimmedArgs.startsWith(FindCommand.TAG_PREFIX)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"squeakysquak"},"content":"            String tokenizedArgs \u003d trimmedArgs.substring(","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"squeakysquak"},"content":"                    FindCommand.TAG_PREFIX.length());","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"squeakysquak"},"content":"            String[] tags \u003d tokenizedArgs.split(\"\\\\s+\");","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"squeakysquak"},"content":"            // splits trimmedArgs according to whitespaces","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"squeakysquak"},"content":"            checkForBlanks(tags);","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"squeakysquak"},"content":"            return new FindCommand(new TagMatchesKeywordPredicate(Arrays.asList(tags)));","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"squeakysquak"},"content":"        } else if (trimmedArgs.startsWith(FindCommand.REMARK_PREFIX)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"squeakysquak"},"content":"            String tokenizedArgs \u003d trimmedArgs.substring(","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"squeakysquak"},"content":"                    FindCommand.REMARK_PREFIX.length());","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"squeakysquak"},"content":"            String[] queries \u003d tokenizedArgs.split(\"\\\\s+\");","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"squeakysquak"},"content":"            // splits trimmedArgs according to whitespaces","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"squeakysquak"},"content":"            checkForBlanks(queries);","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"squeakysquak"},"content":"            return new FindCommand(new RemarkContainsKeywordPredicate(Arrays.asList(queries)));","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"squeakysquak"},"content":"        } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"squeakysquak"},"content":"            // splits trimmedArgs according to whitespaces","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"squeakysquak"},"content":"            return new FindCommand(new NameContainsQueriesPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"squeakysquak"},"content":"    private void checkForBlanks(String[] tags) throws ParseException {","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"squeakysquak"},"content":"        for (String tag : tags) {","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"squeakysquak"},"content":"            if (isBlank(tag)) {","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"squeakysquak"},"content":"                throw new ParseException(","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"squeakysquak"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"squeakysquak"},"content":"            }","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"squeakysquak"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"squeakysquak"},"content":"    private static boolean isPriority(String tag) {","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"squeakysquak"},"content":"        return PriorityTag.LowPriority.TERM.equals(tag)","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"squeakysquak"},"content":"                || PriorityTag.MediumPriority.TERM.equals(tag)","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"squeakysquak"},"content":"                || PriorityTag.HighPriority.TERM.equals(tag);","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"squeakysquak"},"content":"    private static boolean isBlank(String string) {","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"squeakysquak"},"content":"        return string.trim().equals(\"\");","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"squeakysquak":60,"trash-bin99":3,"-":25}},{"path":"src/main/java/seedu/fast/logic/parser/HelpCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Cyn7hius"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"Cyn7hius"},"content":"public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"Cyn7hius"},"content":"     * Parses the given {@code String} of arguments in the context of the HelpCommand","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"Cyn7hius"},"content":"     * and returns a HelpCommand object for execution.","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"Cyn7hius"},"content":"    public HelpCommand parse(String args) {","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"Cyn7hius"},"content":"        // since the execution of the help command is delayed, we can just pass the original arg here","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"        // and parse it later when the HelpWindow is called","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"        return new HelpCommand(args);","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"Cyn7hius":18}},{"path":"src/main/java/seedu/fast/logic/parser/MarkAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.MarkAppointmentCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"public class MarkAppointmentCommandParser implements Parser\u003cMarkAppointmentCommand\u003e {","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"    public MarkAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"        Index index;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"        try {","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"                    MarkAppointmentCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"        return new MarkAppointmentCommand(index,","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"                new Appointment(Appointment.NO_APPOINTMENT, Appointment.NO_TIME, Appointment.NO_VENUE));","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":29}},{"path":"src/main/java/seedu/fast/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.Command;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"squeakysquak":3,"-":13}},{"path":"src/main/java/seedu/fast/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Cyn7hius"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_HELP_COMMAND_FORMAT;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_INVESTMENT_PLAN_TAG;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_PRIORITY_TAG;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.util.StringUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.parser.exceptions.HelpParseException;","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Address;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Email;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.tag.InvestmentPlanTag;","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.tag.PriorityTag;","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"Cyn7hius"},"content":"    public static final String[] COMMAND_LIST \u003d new String[]{\"Quick Start\", \"Add\", \"Appointment\",","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"Cyn7hius"},"content":"        \"Edit Appointment\", \"Delete Appointment\", \"Mark Appointment\", \"Clear\", \"Delete\",","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"Cyn7hius"},"content":"        \"Edit\", \"Find\", \"List\", \"Help\", \"Remark\", \"Sort\", \"Statistics\", \"Tag\", \"Investment Plan Tag\",","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"        \"Priority Tag\", \"Misc\"};","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":48,"author":{"gitId":"Cyn7hius"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"squeakysquak"},"content":"        trimmedName \u003d capitalise(trimmedName);","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":75,"author":{"gitId":"squeakysquak"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"squeakysquak"},"content":"     * Takes in a {@code String trimmedName} and capitalises each letter","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"squeakysquak"},"content":"     * after a whitespace.","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"squeakysquak"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"squeakysquak"},"content":"     * @param trimmedName","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"squeakysquak"},"content":"     * @return trimmedName with capitalised words.","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"squeakysquak"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"squeakysquak"},"content":"    private static String capitalise(String trimmedName) {","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"squeakysquak"},"content":"        char[] chars \u003d trimmedName.toLowerCase().toCharArray();","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"squeakysquak"},"content":"        if (Character.isLetter(chars[0])) {","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"squeakysquak"},"content":"            chars[0] \u003d Character.toUpperCase(chars[0]);","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"squeakysquak"},"content":"            //Capitalise first letter","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"squeakysquak"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"squeakysquak"},"content":"        for (int i \u003d 1; i \u003c chars.length - 1; i++) {","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"squeakysquak"},"content":"            char current \u003d chars[i];","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"squeakysquak"},"content":"            char next \u003d chars[i + 1];","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"squeakysquak"},"content":"            if (Character.isWhitespace(current) \u0026\u0026 Character.isLetter(next)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"squeakysquak"},"content":"                chars[i + 1] \u003d Character.toUpperCase(next);","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"squeakysquak"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"squeakysquak"},"content":"            //Capitalise any letter after a whitespace","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"squeakysquak"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"squeakysquak"},"content":"        trimmedName \u003d String.valueOf(chars);","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"squeakysquak"},"content":"        return trimmedName;","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"trash-bin99"},"content":"        if (!Tag.isValidTagTerm(trimmedTag)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"trash-bin99"},"content":"        if (Tag.isSpecialTag(trimmedTag)) {","lastModifiedDate":"2021-10-30"},{"lineNumber":158,"author":{"gitId":"trash-bin99"},"content":"            throw new ParseException(Tag.MESSAGE_SPECIAL_TAG_ENTERED);","lastModifiedDate":"2021-10-30"},{"lineNumber":159,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-30"},{"lineNumber":160,"author":{"gitId":"trash-bin99"},"content":"        return Tag.createTag(trimmedTag);","lastModifiedDate":"2021-10-06"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":174,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":175,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":176,"author":{"gitId":"trash-bin99"},"content":"     * Parses {@code String tagName} and returns the corresponding priority tag name.","lastModifiedDate":"2021-10-06"},{"lineNumber":177,"author":{"gitId":"trash-bin99"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":178,"author":{"gitId":"trash-bin99"},"content":"     * Input will always be a valid priority tag command, as validated by Tag::createTag","lastModifiedDate":"2021-10-19"},{"lineNumber":179,"author":{"gitId":"trash-bin99"},"content":"     * @param tagName The tag term to be parsed.","lastModifiedDate":"2021-10-19"},{"lineNumber":180,"author":{"gitId":"trash-bin99"},"content":"     * @return The corresponding tag name.","lastModifiedDate":"2021-10-19"},{"lineNumber":181,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":182,"author":{"gitId":"trash-bin99"},"content":"    public static String parsePriorityTag(String tagName) {","lastModifiedDate":"2021-10-06"},{"lineNumber":183,"author":{"gitId":"trash-bin99"},"content":"        String tagTerm \u003d tagName.replace(PREFIX_PRIORITY_TAG.getPrefix(), \"\");","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"trash-bin99"},"content":"        switch (tagTerm) {","lastModifiedDate":"2021-10-26"},{"lineNumber":185,"author":{"gitId":"trash-bin99"},"content":"        case PriorityTag.LowPriority.TERM:","lastModifiedDate":"2021-10-26"},{"lineNumber":186,"author":{"gitId":"trash-bin99"},"content":"            return PriorityTag.LowPriority.NAME;","lastModifiedDate":"2021-10-06"},{"lineNumber":187,"author":{"gitId":"trash-bin99"},"content":"        case PriorityTag.MediumPriority.TERM:","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"trash-bin99"},"content":"            return PriorityTag.MediumPriority.NAME;","lastModifiedDate":"2021-10-06"},{"lineNumber":189,"author":{"gitId":"trash-bin99"},"content":"        default:","lastModifiedDate":"2021-10-06"},{"lineNumber":190,"author":{"gitId":"trash-bin99"},"content":"            return PriorityTag.HighPriority.NAME;","lastModifiedDate":"2021-10-06"},{"lineNumber":191,"author":{"gitId":"trash-bin99"},"content":"        //It is guaranteed that the default case will always be a high priority tag instance.","lastModifiedDate":"2021-10-06"},{"lineNumber":192,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":193,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":194,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":195,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":196,"author":{"gitId":"Cyn7hius"},"content":"     * Parses {@code String command} and returns the corresponding help command.","lastModifiedDate":"2021-10-12"},{"lineNumber":197,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":198,"author":{"gitId":"Cyn7hius"},"content":"    public static String matchArgs(String command) {","lastModifiedDate":"2021-10-12"},{"lineNumber":199,"author":{"gitId":"Cyn7hius"},"content":"        for (String s : COMMAND_LIST) {","lastModifiedDate":"2021-10-12"},{"lineNumber":200,"author":{"gitId":"Cyn7hius"},"content":"            if (s.equals(command)) {","lastModifiedDate":"2021-10-12"},{"lineNumber":201,"author":{"gitId":"Cyn7hius"},"content":"                return s;","lastModifiedDate":"2021-10-12"},{"lineNumber":202,"author":{"gitId":"Cyn7hius"},"content":"            }","lastModifiedDate":"2021-10-12"},{"lineNumber":203,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":204,"author":{"gitId":"Cyn7hius"},"content":"        return \"\";","lastModifiedDate":"2021-10-12"},{"lineNumber":205,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":206,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":207,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":208,"author":{"gitId":"Cyn7hius"},"content":"     * Extracts the arguments from a help command.","lastModifiedDate":"2021-10-12"},{"lineNumber":209,"author":{"gitId":"Cyn7hius"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":210,"author":{"gitId":"Cyn7hius"},"content":"     * @param commandText The input text.","lastModifiedDate":"2021-10-12"},{"lineNumber":211,"author":{"gitId":"Cyn7hius"},"content":"     * @return The args of the help command, or \"\" if there is no or invalid args.","lastModifiedDate":"2021-10-12"},{"lineNumber":212,"author":{"gitId":"Cyn7hius"},"content":"     * @throws HelpParseException if help is not followed by a valid arg","lastModifiedDate":"2021-10-12"},{"lineNumber":213,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":214,"author":{"gitId":"Cyn7hius"},"content":"    public static String parseHelp(String commandText) throws HelpParseException {","lastModifiedDate":"2021-10-12"},{"lineNumber":215,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":216,"author":{"gitId":"Cyn7hius"},"content":"        // if there are no args","lastModifiedDate":"2021-10-12"},{"lineNumber":217,"author":{"gitId":"Cyn7hius"},"content":"        if (commandText.split(\" \").length \u003d\u003d 1) {","lastModifiedDate":"2021-10-12"},{"lineNumber":218,"author":{"gitId":"Cyn7hius"},"content":"            return \"\";","lastModifiedDate":"2021-10-12"},{"lineNumber":219,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":220,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":221,"author":{"gitId":"Cyn7hius"},"content":"        String arg \u003d commandText.substring(HelpCommand.COMMAND_WORD.length());","lastModifiedDate":"2021-10-12"},{"lineNumber":222,"author":{"gitId":"Cyn7hius"},"content":"        String trimmedArgs \u003d arg.trim();","lastModifiedDate":"2021-10-12"},{"lineNumber":223,"author":{"gitId":"Cyn7hius"},"content":"        String capitalisedArg \u003d ParserUtil.capitaliseFirstLetters(trimmedArgs);","lastModifiedDate":"2021-10-12"},{"lineNumber":224,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":225,"author":{"gitId":"Cyn7hius"},"content":"        if (!ParserUtil.matchArgs(capitalisedArg).equals(\"\")) {","lastModifiedDate":"2021-10-12"},{"lineNumber":226,"author":{"gitId":"Cyn7hius"},"content":"            return capitalisedArg;","lastModifiedDate":"2021-10-12"},{"lineNumber":227,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":228,"author":{"gitId":"Cyn7hius"},"content":"        } else { // if the arg does not match a given command, throw exception","lastModifiedDate":"2021-10-12"},{"lineNumber":229,"author":{"gitId":"Cyn7hius"},"content":"            throw new HelpParseException(","lastModifiedDate":"2021-10-12"},{"lineNumber":230,"author":{"gitId":"Cyn7hius"},"content":"                String.format(MESSAGE_INVALID_HELP_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-12"},{"lineNumber":231,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":232,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":233,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":234,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":235,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":236,"author":{"gitId":"Cyn7hius"},"content":"     * Capitalise the start of each word in the args","lastModifiedDate":"2021-10-12"},{"lineNumber":237,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":238,"author":{"gitId":"Cyn7hius"},"content":"    public static String capitaliseFirstLetters(String inputString) {","lastModifiedDate":"2021-10-12"},{"lineNumber":239,"author":{"gitId":"Cyn7hius"},"content":"        String[] words \u003d inputString.split(\" \");","lastModifiedDate":"2021-10-12"},{"lineNumber":240,"author":{"gitId":"Cyn7hius"},"content":"        StringBuilder capitalisedWordsBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-10-12"},{"lineNumber":241,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":242,"author":{"gitId":"Cyn7hius"},"content":"        for (String s : words) {","lastModifiedDate":"2021-10-12"},{"lineNumber":243,"author":{"gitId":"Cyn7hius"},"content":"            // Capitalises the first letter of the word","lastModifiedDate":"2021-10-12"},{"lineNumber":244,"author":{"gitId":"Cyn7hius"},"content":"            capitalisedWordsBuilder.append(s.substring(0, 1).toUpperCase()).append(s.substring(1));","lastModifiedDate":"2021-10-12"},{"lineNumber":245,"author":{"gitId":"Cyn7hius"},"content":"            capitalisedWordsBuilder.append(\" \");","lastModifiedDate":"2021-10-12"},{"lineNumber":246,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":247,"author":{"gitId":"Cyn7hius"},"content":"        return capitalisedWordsBuilder.toString().trim();","lastModifiedDate":"2021-10-12"},{"lineNumber":248,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":249,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":250,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":251,"author":{"gitId":"Py0000"},"content":"     * Checks if the retrieved date from user input is valid.","lastModifiedDate":"2021-10-14"},{"lineNumber":252,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":253,"author":{"gitId":"Py0000"},"content":"     * A valid date input is of the format yyyy-mm-dd.","lastModifiedDate":"2021-10-14"},{"lineNumber":254,"author":{"gitId":"Py0000"},"content":"     * `mm` is a 2-digit number in the range 01-12, which represents a calendar month.","lastModifiedDate":"2021-10-14"},{"lineNumber":255,"author":{"gitId":"Py0000"},"content":"     * `dd` is a 2-digit number in the range of 01-31, depending on the number of days in the calendar month.","lastModifiedDate":"2021-10-14"},{"lineNumber":256,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":257,"author":{"gitId":"Py0000"},"content":"     * If the retrieved date is valid, returns the date in `dd MMM yyyy` format.","lastModifiedDate":"2021-10-14"},{"lineNumber":258,"author":{"gitId":"Py0000"},"content":"     * Otherwise, it means that the user did not enter the correct input. A ParseException will be thrown.","lastModifiedDate":"2021-10-14"},{"lineNumber":259,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":260,"author":{"gitId":"Py0000"},"content":"     * @param date Date String retrieved from user input","lastModifiedDate":"2021-10-14"},{"lineNumber":261,"author":{"gitId":"Py0000"},"content":"     * @return A String representing the date in the specified format if it is valid (for add/update)","lastModifiedDate":"2021-10-14"},{"lineNumber":262,"author":{"gitId":"Py0000"},"content":"     * @throws ParseException Thrown when the date retrieved is invalid","lastModifiedDate":"2021-10-14"},{"lineNumber":263,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":264,"author":{"gitId":"Py0000"},"content":"    public static String parseDateString(String date) throws ParseException {","lastModifiedDate":"2021-10-14"},{"lineNumber":265,"author":{"gitId":"Py0000"},"content":"        try {","lastModifiedDate":"2021-10-14"},{"lineNumber":266,"author":{"gitId":"Py0000"},"content":"            checkDate(date);","lastModifiedDate":"2021-10-30"},{"lineNumber":267,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":268,"author":{"gitId":"Py0000"},"content":"            // converts the date to the specified format","lastModifiedDate":"2021-10-14"},{"lineNumber":269,"author":{"gitId":"Py0000"},"content":"            date \u003d LocalDate.parse(date).format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));","lastModifiedDate":"2021-10-14"},{"lineNumber":270,"author":{"gitId":"Py0000"},"content":"        } catch (DateTimeParseException dtpe) {","lastModifiedDate":"2021-10-14"},{"lineNumber":271,"author":{"gitId":"Py0000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-14"},{"lineNumber":272,"author":{"gitId":"Py0000"},"content":"                    Appointment.INVALID_DATE_INPUT), dtpe);","lastModifiedDate":"2021-10-14"},{"lineNumber":273,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":274,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":275,"author":{"gitId":"Py0000"},"content":"        return date.trim();","lastModifiedDate":"2021-10-14"},{"lineNumber":276,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":277,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":278,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":279,"author":{"gitId":"Py0000"},"content":"     * Checks if the date input has already passed.","lastModifiedDate":"2021-10-30"},{"lineNumber":280,"author":{"gitId":"Py0000"},"content":"     * If date input is in the past, date is invalid, throws an error.","lastModifiedDate":"2021-10-30"},{"lineNumber":281,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-30"},{"lineNumber":282,"author":{"gitId":"Py0000"},"content":"     * @param date Input date string.","lastModifiedDate":"2021-10-30"},{"lineNumber":283,"author":{"gitId":"Py0000"},"content":"     * @throws ParseException Date input has passed.","lastModifiedDate":"2021-10-30"},{"lineNumber":284,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":285,"author":{"gitId":"Py0000"},"content":"    private static void checkDate(String date) throws ParseException {","lastModifiedDate":"2021-10-30"},{"lineNumber":286,"author":{"gitId":"Py0000"},"content":"        LocalDate localDate \u003d LocalDate.parse(date);","lastModifiedDate":"2021-10-30"},{"lineNumber":287,"author":{"gitId":"Py0000"},"content":"        LocalDate now \u003d LocalDate.now();","lastModifiedDate":"2021-10-30"},{"lineNumber":288,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":289,"author":{"gitId":"Py0000"},"content":"        if (localDate.isBefore(now)) {","lastModifiedDate":"2021-10-30"},{"lineNumber":290,"author":{"gitId":"Py0000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-30"},{"lineNumber":291,"author":{"gitId":"Py0000"},"content":"                    Appointment.PREVIOUS_DATE_INPUT));","lastModifiedDate":"2021-10-30"},{"lineNumber":292,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-30"},{"lineNumber":293,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":294,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":295,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":296,"author":{"gitId":"Py0000"},"content":"     * Checks if the retrieved time from user input is valid.","lastModifiedDate":"2021-10-14"},{"lineNumber":297,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":298,"author":{"gitId":"Py0000"},"content":"     * A valid time input is of the format hh:mm (in 24-hour format).","lastModifiedDate":"2021-10-14"},{"lineNumber":299,"author":{"gitId":"Py0000"},"content":"     * `hh` is a 2-digit number in the range 00-23, which represents the hour in the 24-hour format.","lastModifiedDate":"2021-10-14"},{"lineNumber":300,"author":{"gitId":"Py0000"},"content":"     * `mm` is a 2-digit number in the range of 00-59, which represents the minute in the 24-hour format.","lastModifiedDate":"2021-10-14"},{"lineNumber":301,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":302,"author":{"gitId":"Py0000"},"content":"     * If the retrieved time is valid, returns the time in `HHmm` format.","lastModifiedDate":"2021-10-14"},{"lineNumber":303,"author":{"gitId":"Py0000"},"content":"     * Otherwise, it means that the user did not enter the correct input. A ParseException will be thrown.","lastModifiedDate":"2021-10-14"},{"lineNumber":304,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":305,"author":{"gitId":"Py0000"},"content":"     * @param time Time String retrieved from user input","lastModifiedDate":"2021-10-14"},{"lineNumber":306,"author":{"gitId":"Py0000"},"content":"     * @return A String representing the time in the specified format if it is valid.","lastModifiedDate":"2021-10-14"},{"lineNumber":307,"author":{"gitId":"Py0000"},"content":"     * @throws ParseException Thrown when the date retrieved is invalid","lastModifiedDate":"2021-10-14"},{"lineNumber":308,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":309,"author":{"gitId":"Py0000"},"content":"    public static String parseTimeString(String time) throws ParseException {","lastModifiedDate":"2021-10-14"},{"lineNumber":310,"author":{"gitId":"Py0000"},"content":"        String validationPattern \u003d \"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$\";","lastModifiedDate":"2021-10-14"},{"lineNumber":311,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":312,"author":{"gitId":"Py0000"},"content":"        if (!time.equals(Appointment.NO_TIME)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":313,"author":{"gitId":"Py0000"},"content":"            // checks that time only contains HH:mm and nothing else","lastModifiedDate":"2021-10-14"},{"lineNumber":314,"author":{"gitId":"Py0000"},"content":"            if (!time.matches(validationPattern)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":315,"author":{"gitId":"Py0000"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-14"},{"lineNumber":316,"author":{"gitId":"Py0000"},"content":"                        Appointment.INVALID_TIME_INPUT));","lastModifiedDate":"2021-10-14"},{"lineNumber":317,"author":{"gitId":"Py0000"},"content":"            }","lastModifiedDate":"2021-10-14"},{"lineNumber":318,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":319,"author":{"gitId":"Py0000"},"content":"            // converts the time to the specified format","lastModifiedDate":"2021-10-14"},{"lineNumber":320,"author":{"gitId":"Py0000"},"content":"            time \u003d LocalTime.parse(time).format(DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-10-14"},{"lineNumber":321,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":322,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":323,"author":{"gitId":"Py0000"},"content":"        return time.trim();","lastModifiedDate":"2021-10-14"},{"lineNumber":324,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":325,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":326,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":327,"author":{"gitId":"trash-bin99"},"content":"     * Parses {@code String tagName} and returns the corresponding investment plan tag name.","lastModifiedDate":"2021-10-19"},{"lineNumber":328,"author":{"gitId":"trash-bin99"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":329,"author":{"gitId":"trash-bin99"},"content":"     * Input will always be a valid investment plan tag command, as validated by Tag::createTag","lastModifiedDate":"2021-10-19"},{"lineNumber":330,"author":{"gitId":"trash-bin99"},"content":"     * @param tagName The tag term to be parsed.","lastModifiedDate":"2021-10-19"},{"lineNumber":331,"author":{"gitId":"trash-bin99"},"content":"     * @return The corresponding tag name.","lastModifiedDate":"2021-10-19"},{"lineNumber":332,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":333,"author":{"gitId":"trash-bin99"},"content":"    public static String parseInvestmentPlanTag(String tagName) {","lastModifiedDate":"2021-10-18"},{"lineNumber":334,"author":{"gitId":"trash-bin99"},"content":"        String tagTerm \u003d tagName.replace(PREFIX_INVESTMENT_PLAN_TAG.getPrefix(), \"\");","lastModifiedDate":"2021-10-26"},{"lineNumber":335,"author":{"gitId":"trash-bin99"},"content":"        switch (tagTerm) {","lastModifiedDate":"2021-10-26"},{"lineNumber":336,"author":{"gitId":"trash-bin99"},"content":"        case InvestmentPlanTag.LifeInsurance.TERM:","lastModifiedDate":"2021-10-26"},{"lineNumber":337,"author":{"gitId":"trash-bin99"},"content":"            return InvestmentPlanTag.LifeInsurance.NAME;","lastModifiedDate":"2021-10-19"},{"lineNumber":338,"author":{"gitId":"trash-bin99"},"content":"        case InvestmentPlanTag.MotorInsurance.TERM:","lastModifiedDate":"2021-10-26"},{"lineNumber":339,"author":{"gitId":"trash-bin99"},"content":"            return InvestmentPlanTag.MotorInsurance.NAME;","lastModifiedDate":"2021-10-19"},{"lineNumber":340,"author":{"gitId":"trash-bin99"},"content":"        case InvestmentPlanTag.HealthInsurance.TERM:","lastModifiedDate":"2021-10-26"},{"lineNumber":341,"author":{"gitId":"trash-bin99"},"content":"            return InvestmentPlanTag.HealthInsurance.NAME;","lastModifiedDate":"2021-10-19"},{"lineNumber":342,"author":{"gitId":"trash-bin99"},"content":"        case InvestmentPlanTag.TravelInsurance.TERM:","lastModifiedDate":"2021-10-26"},{"lineNumber":343,"author":{"gitId":"trash-bin99"},"content":"            return InvestmentPlanTag.TravelInsurance.NAME;","lastModifiedDate":"2021-10-19"},{"lineNumber":344,"author":{"gitId":"trash-bin99"},"content":"        case InvestmentPlanTag.PropertyInsurance.TERM:","lastModifiedDate":"2021-10-26"},{"lineNumber":345,"author":{"gitId":"trash-bin99"},"content":"            return InvestmentPlanTag.PropertyInsurance.NAME;","lastModifiedDate":"2021-10-19"},{"lineNumber":346,"author":{"gitId":"trash-bin99"},"content":"        case InvestmentPlanTag.Investment.TERM:","lastModifiedDate":"2021-10-26"},{"lineNumber":347,"author":{"gitId":"trash-bin99"},"content":"            return InvestmentPlanTag.Investment.NAME;","lastModifiedDate":"2021-10-19"},{"lineNumber":348,"author":{"gitId":"trash-bin99"},"content":"        default:","lastModifiedDate":"2021-10-19"},{"lineNumber":349,"author":{"gitId":"trash-bin99"},"content":"            return InvestmentPlanTag.Savings.NAME;","lastModifiedDate":"2021-10-19"},{"lineNumber":350,"author":{"gitId":"trash-bin99"},"content":"            //it is guaranteed that the default case will always be an savings investment plan tag.","lastModifiedDate":"2021-10-19"},{"lineNumber":351,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":352,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":353,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"squeakysquak":35,"trash-bin99":57,"Py0000":82,"-":113,"Cyn7hius":64,"Th-429B":2}},{"path":"src/main/java/seedu/fast/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"squeakysquak":1,"-":38}},{"path":"src/main/java/seedu/fast/logic/parser/RemarkCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_LENGTH;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.RemarkCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Remark;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMARK);","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"        if (!Remark.isValidRemark(remark)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_LENGTH,","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"Th-429B"},"content":"                    RemarkCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new RemarkCommand(index, new Remark(remark));","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"squeakysquak":8,"Py0000":1,"-":21,"Th-429B":5}},{"path":"src/main/java/seedu/fast/logic/parser/SortCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.sort.SortByAppointment;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.sort.SortByName;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.sort.SortByPriority;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.logic.commands.SortCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"/**","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":" * Parses input arguments and creates a new SortCommand object","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":" */","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"Th-429B"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"Th-429B"},"content":"     * Parses the given {@code String} of arguments in the context of the SortCommand","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"Th-429B"},"content":"     * and returns a SortCommand object for execution.","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"Th-429B"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"Th-429B"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"Th-429B"},"content":"    public SortCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"Th-429B"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"Th-429B"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"Th-429B"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"Th-429B"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"        switch (trimmedArgs) {","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"        case SortByName.KEYWORD:","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"Th-429B"},"content":"            return new SortCommand(new SortByName(), SortByName.KEYWORD);","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"Th-429B"},"content":"        case SortByAppointment.KEYWORD:","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"Th-429B"},"content":"            return new SortCommand(new SortByAppointment(), SortByAppointment.KEYWORD);","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"Th-429B"},"content":"        case SortByPriority.KEYWORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"Th-429B"},"content":"            return new SortCommand(new SortByPriority(), SortByPriority.KEYWORD);","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"Th-429B"},"content":"        default:","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"Th-429B"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"Th-429B"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"Th-429B":47}},{"path":"src/main/java/seedu/fast/logic/parser/TagCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"trash-bin99"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"trash-bin99"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_ADD_TAG;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_DELETE_TAG;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"trash-bin99"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"trash-bin99"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.logic.commands.TagCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"trash-bin99"},"content":"public class TagCommandParser implements Parser\u003cTagCommand\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"trash-bin99"},"content":"     * Parses the given {@code String} of arguments in the context of the TagCommand","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"trash-bin99"},"content":"     * and returns a TagCommand object for execution.","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"trash-bin99"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"trash-bin99"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"trash-bin99"},"content":"    public TagCommand parse(String arg) throws ParseException {","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"trash-bin99"},"content":"        requireNonNull(arg);","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"trash-bin99"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(arg, PREFIX_ADD_TAG, PREFIX_DELETE_TAG);","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"trash-bin99"},"content":"        Index index;","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"trash-bin99"},"content":"        try {","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"trash-bin99"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"trash-bin99"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"trash-bin99"},"content":"            String errorMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"trash-bin99"},"content":"            throw new ParseException(errorMessage, ive);","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"trash-bin99"},"content":"        Set\u003cTag\u003e addTags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"trash-bin99"},"content":"        Set\u003cTag\u003e deleteTags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"trash-bin99"},"content":"        try {","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"trash-bin99"},"content":"            if (argMultimap.getValue(PREFIX_ADD_TAG).isPresent()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"trash-bin99"},"content":"                for (String str: argMultimap.getAllValues(PREFIX_ADD_TAG)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"trash-bin99"},"content":"                    checkIfSpecialTag(str);","lastModifiedDate":"2021-10-30"},{"lineNumber":44,"author":{"gitId":"trash-bin99"},"content":"                    addTags.add(Tag.createTag(str));","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"trash-bin99"},"content":"                }","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"trash-bin99"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"trash-bin99"},"content":"            if (argMultimap.getValue(PREFIX_DELETE_TAG).isPresent()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"trash-bin99"},"content":"                for (String str: argMultimap.getAllValues(PREFIX_DELETE_TAG)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"trash-bin99"},"content":"                    checkIfSpecialTag(str);","lastModifiedDate":"2021-10-30"},{"lineNumber":51,"author":{"gitId":"trash-bin99"},"content":"                    deleteTags.add(Tag.createTag(str));","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"trash-bin99"},"content":"                }","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"trash-bin99"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"trash-bin99"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"trash-bin99"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"trash-bin99"},"content":"        return new TagCommand(index, addTags, deleteTags);","lastModifiedDate":"2021-10-30"},{"lineNumber":59,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":60,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":61,"author":{"gitId":"trash-bin99"},"content":"    private static void checkIfSpecialTag(String tagName) throws ParseException {","lastModifiedDate":"2021-10-30"},{"lineNumber":62,"author":{"gitId":"trash-bin99"},"content":"        if (Tag.isSpecialTag(tagName)) {","lastModifiedDate":"2021-10-30"},{"lineNumber":63,"author":{"gitId":"trash-bin99"},"content":"            throw new ParseException(Tag.MESSAGE_SPECIAL_TAG_ENTERED);","lastModifiedDate":"2021-10-30"},{"lineNumber":64,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-30"},{"lineNumber":65,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":66,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"trash-bin99"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"trash-bin99":67}},{"path":"src/main/java/seedu/fast/logic/parser/UnmarkAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.UnmarkAppointmentCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"public class UnmarkAppointmentCommandParser implements Parser\u003cUnmarkAppointmentCommand\u003e {","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"    public UnmarkAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"        Index index;","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"                    UnmarkAppointmentCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"        return new UnmarkAppointmentCommand(index,","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"                new Appointment(Appointment.NO_APPOINTMENT, Appointment.NO_TIME, Appointment.NO_VENUE));","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"Py0000":28}},{"path":"src/main/java/seedu/fast/logic/parser/exceptions/HelpParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Cyn7hius"},"content":"package seedu.fast.logic.parser.exceptions;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"Cyn7hius"},"content":"/**","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"Cyn7hius"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"Cyn7hius"},"content":" */","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"Cyn7hius"},"content":"public class HelpParseException extends IllegalValueException {","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"Cyn7hius"},"content":"    public HelpParseException(String message) {","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"Cyn7hius"},"content":"        super(message);","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"Cyn7hius":13}},{"path":"src/main/java/seedu/fast/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser.exceptions;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"squeakysquak":2,"-":15}},{"path":"src/main/java/seedu/fast/model/Fast.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"Cyn7hius"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"Cyn7hius"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.person.PriorityPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.person.TagMatchesKeywordPredicate;","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.UniquePersonList;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.tag.InvestmentPlanTag;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.tag.PriorityTag;","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.ui.StatsWindowData.InvestmentPlanData;","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.ui.StatsWindowData.PriorityData;","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":" * Wraps all data at the FAST level","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"public class Fast implements ReadOnlyFast {","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":28,"author":{"gitId":"Cyn7hius"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"Cyn7hius"},"content":"    {","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":40,"author":{"gitId":"Cyn7hius"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.getPersonList());","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"Cyn7hius"},"content":"    public Fast() {","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"squeakysquak"},"content":"    public Fast(ReadOnlyFast toBeCopied) {","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":67,"author":{"gitId":"squeakysquak"},"content":"    public void resetData(ReadOnlyFast newData) {","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"Th-429B"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":111,"author":{"gitId":"Th-429B"},"content":"     * Sorts the list of persons by the given comparator","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"Th-429B"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":113,"author":{"gitId":"Th-429B"},"content":"    public void sortPersons(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"Th-429B"},"content":"        requireNonNull(comparator);","lastModifiedDate":"2021-10-15"},{"lineNumber":115,"author":{"gitId":"Th-429B"},"content":"        persons.sortPersons(comparator);","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":117,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":118,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":119,"author":{"gitId":"Cyn7hius"},"content":"     * Returns the number of persons tagged with the respective PriorityTag.","lastModifiedDate":"2021-10-18"},{"lineNumber":120,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"Cyn7hius"},"content":"    public int getPriorityCount(String term) {","lastModifiedDate":"2021-10-19"},{"lineNumber":122,"author":{"gitId":"Cyn7hius"},"content":"        String[] priority \u003d {term};","lastModifiedDate":"2021-10-19"},{"lineNumber":123,"author":{"gitId":"Cyn7hius"},"content":"        PriorityPredicate predicate \u003d new PriorityPredicate(Arrays.asList(priority));","lastModifiedDate":"2021-10-19"},{"lineNumber":124,"author":{"gitId":"Cyn7hius"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2021-10-19"},{"lineNumber":125,"author":{"gitId":"Cyn7hius"},"content":"        return filteredPersons.size();","lastModifiedDate":"2021-10-18"},{"lineNumber":126,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":127,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"Cyn7hius"},"content":"     * Returns the PriorityData containing all the priority data.","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"Cyn7hius"},"content":"    public PriorityData getPriorityData() {","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"Cyn7hius"},"content":"        return new PriorityData(getHighPriorityCount(), getMediumPriorityCount(), getLowPriorityCount());","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"Cyn7hius"},"content":"    public int getHighPriorityCount() {","lastModifiedDate":"2021-10-19"},{"lineNumber":136,"author":{"gitId":"Cyn7hius"},"content":"        return getPriorityCount(PriorityTag.HighPriority.TERM);","lastModifiedDate":"2021-10-19"},{"lineNumber":137,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":138,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":139,"author":{"gitId":"Cyn7hius"},"content":"    public int getMediumPriorityCount() {","lastModifiedDate":"2021-10-18"},{"lineNumber":140,"author":{"gitId":"Cyn7hius"},"content":"        return getPriorityCount(PriorityTag.MediumPriority.TERM);","lastModifiedDate":"2021-10-19"},{"lineNumber":141,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":142,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":143,"author":{"gitId":"Cyn7hius"},"content":"    public int getLowPriorityCount() {","lastModifiedDate":"2021-10-18"},{"lineNumber":144,"author":{"gitId":"Cyn7hius"},"content":"        return getPriorityCount(PriorityTag.LowPriority.TERM);","lastModifiedDate":"2021-10-19"},{"lineNumber":145,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":146,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":147,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"Cyn7hius"},"content":"     * Returns the number of persons tagged with the respective PriorityTag.","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"Cyn7hius"},"content":"    public int getInvestmentPlanCount(String term) {","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"Cyn7hius"},"content":"        String[] investmentPlan \u003d {term};","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"Cyn7hius"},"content":"        TagMatchesKeywordPredicate predicate \u003d new TagMatchesKeywordPredicate(Arrays.asList(investmentPlan));","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"Cyn7hius"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"Cyn7hius"},"content":"        return filteredPersons.size();","lastModifiedDate":"2021-10-24"},{"lineNumber":155,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":158,"author":{"gitId":"Cyn7hius"},"content":"     * Returns the InvestmentPlanData containing all the investment plan data.","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":160,"author":{"gitId":"Cyn7hius"},"content":"    public InvestmentPlanData getInvestmentPlanData() {","lastModifiedDate":"2021-10-25"},{"lineNumber":161,"author":{"gitId":"Cyn7hius"},"content":"        return new InvestmentPlanData(getLifeInsuranceCount(), getMotorInsuranceCount(),","lastModifiedDate":"2021-10-25"},{"lineNumber":162,"author":{"gitId":"Cyn7hius"},"content":"            getTravelInsuranceCount(), getHealthInsuranceCount(), getPropertyInsuranceCount(), getInvestmentCount(),","lastModifiedDate":"2021-10-25"},{"lineNumber":163,"author":{"gitId":"Cyn7hius"},"content":"            getSavingsCount());","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":165,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":166,"author":{"gitId":"Cyn7hius"},"content":"    public int getLifeInsuranceCount() {","lastModifiedDate":"2021-10-24"},{"lineNumber":167,"author":{"gitId":"Cyn7hius"},"content":"        return getInvestmentPlanCount(InvestmentPlanTag.LifeInsurance.NAME);","lastModifiedDate":"2021-10-24"},{"lineNumber":168,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":169,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":170,"author":{"gitId":"Cyn7hius"},"content":"    public int getMotorInsuranceCount() {","lastModifiedDate":"2021-10-24"},{"lineNumber":171,"author":{"gitId":"Cyn7hius"},"content":"        return getInvestmentPlanCount(InvestmentPlanTag.MotorInsurance.NAME);","lastModifiedDate":"2021-10-24"},{"lineNumber":172,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":173,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":174,"author":{"gitId":"Cyn7hius"},"content":"    public int getHealthInsuranceCount() {","lastModifiedDate":"2021-10-24"},{"lineNumber":175,"author":{"gitId":"Cyn7hius"},"content":"        return getInvestmentPlanCount(InvestmentPlanTag.HealthInsurance.NAME);","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":178,"author":{"gitId":"Cyn7hius"},"content":"    public int getTravelInsuranceCount() {","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"Cyn7hius"},"content":"        return getInvestmentPlanCount(InvestmentPlanTag.TravelInsurance.NAME);","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"Cyn7hius"},"content":"    public int getPropertyInsuranceCount() {","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"Cyn7hius"},"content":"        return getInvestmentPlanCount(InvestmentPlanTag.PropertyInsurance.NAME);","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"Cyn7hius"},"content":"    public int getInvestmentCount() {","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"Cyn7hius"},"content":"        return getInvestmentPlanCount(InvestmentPlanTag.Investment.NAME);","lastModifiedDate":"2021-10-24"},{"lineNumber":188,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":189,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":190,"author":{"gitId":"Cyn7hius"},"content":"    public int getSavingsCount() {","lastModifiedDate":"2021-10-24"},{"lineNumber":191,"author":{"gitId":"Cyn7hius"},"content":"        return getInvestmentPlanCount(InvestmentPlanTag.Savings.NAME);","lastModifiedDate":"2021-10-24"},{"lineNumber":192,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":193,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":194,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"Cyn7hius"},"content":"        return persons.asUnmodifiableObservableList().size() + \" clients\";","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":211,"author":{"gitId":"squeakysquak"},"content":"            || (other instanceof Fast // instanceof handles nulls","lastModifiedDate":"2021-10-01"},{"lineNumber":212,"author":{"gitId":"squeakysquak"},"content":"            \u0026\u0026 persons.equals(((Fast) other).persons));","lastModifiedDate":"2021-10-01"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":219,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":8,"-":107,"Cyn7hius":95,"Th-429B":9}},{"path":"src/main/java/seedu/fast/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.GuiSettings;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"squeakysquak"},"content":"    Path getFastFilePath();","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"squeakysquak"},"content":"    void setFastFilePath(Path addressBookFilePath);","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"Cyn7hius"},"content":"     * Replaces FAST data with the data in {@code FAST}.","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"squeakysquak"},"content":"    void setFast(ReadOnlyFast fast);","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":53,"author":{"gitId":"Cyn7hius"},"content":"    /** Returns FAST */","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"squeakysquak"},"content":"    ReadOnlyFast getFast();","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":57,"author":{"gitId":"Cyn7hius"},"content":"     * Returns true if a person with the same identity as {@code person} exists in FAST.","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"Cyn7hius"},"content":"     * The person must exist in FAST.","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"Cyn7hius"},"content":"     * {@code person} must not already exist in FAST.","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":75,"author":{"gitId":"Cyn7hius"},"content":"     * {@code target} must exist in FAST.","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"Cyn7hius"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in FAST.","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":88,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":89,"author":{"gitId":"Th-429B"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":90,"author":{"gitId":"Th-429B"},"content":"     * Sorts the list of persons by the given comparator","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"Th-429B"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":92,"author":{"gitId":"Th-429B"},"content":"    void sortPerson(Comparator\u003cPerson\u003e comparator);","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"squeakysquak":7,"-":73,"Th-429B":6,"Cyn7hius":7}},{"path":"src/main/java/seedu/fast/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.GuiSettings;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.LogsCenter;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":" * Represents the in-memory model of the FAST address book data.","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"    private final Fast fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"     * Initializes a ModelManager with the given fast and userPrefs.","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"    public ModelManager(ReadOnlyFast fast, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"        requireAllNonNull(fast, userPrefs);","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"squeakysquak"},"content":"        logger.fine(\"Initializing with FAST address book: \" + fast + \" and user prefs \" + userPrefs);","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"squeakysquak"},"content":"        this.fast \u003d new Fast(fast);","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"squeakysquak"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.fast.getPersonList());","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"squeakysquak"},"content":"        this(new Fast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"squeakysquak"},"content":"    public Path getFastFilePath() {","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"squeakysquak"},"content":"        return userPrefs.getFastFilePath();","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"squeakysquak"},"content":"    public void setFastFilePath(Path fastFilePath) {","lastModifiedDate":"2021-10-04"},{"lineNumber":76,"author":{"gitId":"squeakysquak"},"content":"        requireNonNull(fastFilePath);","lastModifiedDate":"2021-10-04"},{"lineNumber":77,"author":{"gitId":"squeakysquak"},"content":"        userPrefs.setFastFilePath(fastFilePath);","lastModifiedDate":"2021-10-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"squeakysquak"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FAST \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":83,"author":{"gitId":"squeakysquak"},"content":"    public void setFast(ReadOnlyFast fast) {","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"squeakysquak"},"content":"        this.fast.resetData(fast);","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":88,"author":{"gitId":"squeakysquak"},"content":"    public ReadOnlyFast getFast() {","lastModifiedDate":"2021-10-01"},{"lineNumber":89,"author":{"gitId":"squeakysquak"},"content":"        return fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"squeakysquak"},"content":"        return fast.hasPerson(person);","lastModifiedDate":"2021-10-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":100,"author":{"gitId":"squeakysquak"},"content":"        fast.removePerson(target);","lastModifiedDate":"2021-10-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":105,"author":{"gitId":"squeakysquak"},"content":"        fast.addPerson(person);","lastModifiedDate":"2021-10-01"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":113,"author":{"gitId":"squeakysquak"},"content":"        fast.setPerson(target, editedPerson);","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":116,"author":{"gitId":"Th-429B"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":117,"author":{"gitId":"Th-429B"},"content":"    public void sortPerson(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"Th-429B"},"content":"        requireNonNull(comparator);","lastModifiedDate":"2021-10-15"},{"lineNumber":119,"author":{"gitId":"Th-429B"},"content":"        fast.sortPersons(comparator);","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"Th-429B"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":127,"author":{"gitId":"squeakysquak"},"content":"     * {@code versionedFast}","lastModifiedDate":"2021-10-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":154,"author":{"gitId":"squeakysquak"},"content":"        return fast.equals(other.fast)","lastModifiedDate":"2021-10-01"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);","lastModifiedDate":"2019-01-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":30,"-":123,"Th-429B":6}},{"path":"src/main/java/seedu/fast/model/ReadOnlyFast.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"Cyn7hius"},"content":" * Unmodifiable view of FAST","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"public interface ReadOnlyFast {","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":3,"-":13,"Cyn7hius":1}},{"path":"src/main/java/seedu/fast/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.GuiSettings;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"    Path getFastFilePath();","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"squeakysquak":3,"-":13}},{"path":"src/main/java/seedu/fast/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.GuiSettings;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"    private Path fastFilePath \u003d Paths.get(\"data\" , \"fast.json\");","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"squeakysquak"},"content":"        setFastFilePath(newUserPrefs.getFastFilePath());","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"squeakysquak"},"content":"    public Path getFastFilePath() {","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"squeakysquak"},"content":"        return fastFilePath;","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"squeakysquak"},"content":"    public void setFastFilePath(Path fastFilePath) {","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"squeakysquak"},"content":"        requireNonNull(fastFilePath);","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"squeakysquak"},"content":"        this.fastFilePath \u003d fastFilePath;","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"squeakysquak"},"content":"                \u0026\u0026 fastFilePath.equals(o.fastFilePath);","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"squeakysquak"},"content":"        return Objects.hash(guiSettings, fastFilePath);","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"squeakysquak"},"content":"        sb.append(\"\\nLocal data file location : \" + fastFilePath);","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":12,"-":75}},{"path":"src/main/java/seedu/fast/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank. \"","lastModifiedDate":"2021-10-31"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"            + \"But it has a limit of 100 characters.\";","lastModifiedDate":"2021-10-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"Th-429B"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].{0,99}\";","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":2,"-":52,"Th-429B":3}},{"path":"src/main/java/seedu/fast/model/person/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"import java.util.Date;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.DateUtil;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":" * Represents an appointment with the Person in the address book.","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":" * Guarantees: immutable; is always valid.","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"public class Appointment {","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"    public static final String NO_APPOINTMENT \u003d \"No Appointment Scheduled Yet\";","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"    public static final String NO_TIME \u003d \"\";","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"    public static final String NO_VENUE \u003d \"\";","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"    public static final String INVALID_DATE_INPUT \u003d \"Date field must be yyyy-mm-dd, \"","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"            + \"with valid calendar year, month and days\";","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"    public static final String PREVIOUS_DATE_INPUT \u003d \"You cannot schedule your appointment on a date/time that \"","lastModifiedDate":"2021-10-30"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"            + \"has already passed!\";","lastModifiedDate":"2021-10-30"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"    public static final String INVALID_TIME_INPUT \u003d \"Time field must be hh:mm, \"","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"            + \"in 24-hour format, with valid hour and minute\";","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"    public static final String INVALID_VENUE_INPUT \u003d \"Venue field must not be greater than 20 characters, \"","lastModifiedDate":"2021-10-30"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"            + \"including blanks, whitespaces and symbols\";","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"    private String date;","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"    private String time;","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"    private String venue;","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"     * Constructs an {@code Appointment}.","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"     * @param date A valid date (dd MMM yyyy).","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"     * @param time A valid time (hhmm).","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"     * @param venue A venue (less than 30 characters).","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"    public Appointment(String date, String time, String venue) {","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        checkArgument(isValidDateFormat(date), INVALID_DATE_INPUT);","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"        checkArgument(isValidTimeFormat(time), INVALID_TIME_INPUT);","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"        checkArgument(isValidVenueFormat(time), INVALID_VENUE_INPUT);","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"        this.venue \u003d venue;","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"Th-429B"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"Th-429B"},"content":"     * Converts the date from a String to a Date object.","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"Th-429B"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"Th-429B"},"content":"     * @return Date object from the string.","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"Th-429B"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"Th-429B"},"content":"    public Date convertDate() {","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"Th-429B"},"content":"        Date temp \u003d DateUtil.MAX_DATE;","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"Th-429B"},"content":"        if (date.equals(NO_APPOINTMENT)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"Th-429B"},"content":"            return temp;","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"Th-429B"},"content":"        if (time.equals(NO_TIME)) {","lastModifiedDate":"2021-10-30"},{"lineNumber":64,"author":{"gitId":"Th-429B"},"content":"            try {","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"Th-429B"},"content":"                temp \u003d new SimpleDateFormat(\"dd MMM yyyy\").parse(date);","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"Th-429B"},"content":"            } catch (ParseException e) {","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"Th-429B"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"Th-429B"},"content":"            }","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"Th-429B"},"content":"        } else {","lastModifiedDate":"2021-10-30"},{"lineNumber":70,"author":{"gitId":"Th-429B"},"content":"            try {","lastModifiedDate":"2021-10-30"},{"lineNumber":71,"author":{"gitId":"Th-429B"},"content":"                String source \u003d date + \" \" + time;","lastModifiedDate":"2021-10-30"},{"lineNumber":72,"author":{"gitId":"Th-429B"},"content":"                temp \u003d new SimpleDateFormat(\"dd MMM yyyy HHmm\").parse(source);","lastModifiedDate":"2021-10-30"},{"lineNumber":73,"author":{"gitId":"Th-429B"},"content":"            } catch (ParseException e) {","lastModifiedDate":"2021-10-30"},{"lineNumber":74,"author":{"gitId":"Th-429B"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-10-30"},{"lineNumber":75,"author":{"gitId":"Th-429B"},"content":"            }","lastModifiedDate":"2021-10-30"},{"lineNumber":76,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-30"},{"lineNumber":77,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":78,"author":{"gitId":"Th-429B"},"content":"        return temp;","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"     * Returns a string in the format \u0027dd MMM yyyy\u0027 of the appointment.","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"     * @return A string representing the date of the appointment.","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"    public String getDate() {","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"        return this.date;","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"     * Returns a string in the format \u0027HHmm\u0027hrs of the appointment.","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"     * @return A string representing the formatted time of the appointment.","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"    public String getTimeFormatted() {","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"        if (this.time.equals(NO_TIME)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"            return \"\";","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"        return this.time + \"hrs\";","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"     * Returns a string in the format \u0027HHmm\u0027 of the appointment.","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"     * @return A string representing the time of the appointment.","lastModifiedDate":"2021-10-15"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"    public String getTime() {","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"        return this.time;","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"     * Returns a string representing the venue of the appointment.","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"     * @return A string representing the venue of the appointment.","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"    public String getVenue() {","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"        return this.venue;","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"     * Check if the input date follows the format (dd MMM yyyy).","lastModifiedDate":"2021-10-15"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-15"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"     * @param test The input date string.","lastModifiedDate":"2021-10-15"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"     * @return A boolean indicating if the date follows the format.","lastModifiedDate":"2021-10-15"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"    public static boolean isValidDateFormat(String test) {","lastModifiedDate":"2021-10-15"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"        if (test.equalsIgnoreCase(NO_APPOINTMENT)) {","lastModifiedDate":"2021-10-15"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"            return true;","lastModifiedDate":"2021-10-15"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":131,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"        try {","lastModifiedDate":"2021-10-15"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"            SimpleDateFormat sdf \u003d new SimpleDateFormat();","lastModifiedDate":"2021-10-15"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"            sdf.applyPattern(\"dd MMM yyyy\");","lastModifiedDate":"2021-10-15"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"            sdf.setLenient(false);","lastModifiedDate":"2021-10-15"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"            sdf.parse(test);","lastModifiedDate":"2021-10-15"},{"lineNumber":137,"author":{"gitId":"Py0000"},"content":"            return true;","lastModifiedDate":"2021-10-15"},{"lineNumber":138,"author":{"gitId":"Py0000"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-10-15"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"            return false;","lastModifiedDate":"2021-10-15"},{"lineNumber":140,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":141,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":142,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":143,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":144,"author":{"gitId":"Py0000"},"content":"     * Check if the input time follows the format (HHmm).","lastModifiedDate":"2021-10-15"},{"lineNumber":145,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-15"},{"lineNumber":146,"author":{"gitId":"Py0000"},"content":"     * @param test The input time string.","lastModifiedDate":"2021-10-15"},{"lineNumber":147,"author":{"gitId":"Py0000"},"content":"     * @return A boolean indicating if the time follows the format.","lastModifiedDate":"2021-10-15"},{"lineNumber":148,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":149,"author":{"gitId":"Py0000"},"content":"    public static boolean isValidTimeFormat(String test) {","lastModifiedDate":"2021-10-15"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"        if (test.equalsIgnoreCase(NO_TIME)) {","lastModifiedDate":"2021-10-15"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"            return true;","lastModifiedDate":"2021-10-15"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":153,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":154,"author":{"gitId":"Py0000"},"content":"        String validationPattern \u003d \"^([0-1]?[0-9]|2[0-3])[0-5][0-9]$\";","lastModifiedDate":"2021-10-15"},{"lineNumber":155,"author":{"gitId":"Py0000"},"content":"        return test.matches(validationPattern);","lastModifiedDate":"2021-10-15"},{"lineNumber":156,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":157,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":158,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":159,"author":{"gitId":"Py0000"},"content":"     * Check if the input venue is at most 20 characters.","lastModifiedDate":"2021-10-30"},{"lineNumber":160,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-15"},{"lineNumber":161,"author":{"gitId":"Py0000"},"content":"     * @param test The input venue string.","lastModifiedDate":"2021-10-15"},{"lineNumber":162,"author":{"gitId":"Py0000"},"content":"     * @return A boolean indicating if the venue follows the format.","lastModifiedDate":"2021-10-15"},{"lineNumber":163,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":164,"author":{"gitId":"Py0000"},"content":"    public static boolean isValidVenueFormat(String test) {","lastModifiedDate":"2021-10-15"},{"lineNumber":165,"author":{"gitId":"Py0000"},"content":"        return test.length() \u003c\u003d 20;","lastModifiedDate":"2021-10-30"},{"lineNumber":166,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":167,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":168,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":169,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":170,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":171,"author":{"gitId":"Py0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-05"},{"lineNumber":172,"author":{"gitId":"Py0000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-05"},{"lineNumber":173,"author":{"gitId":"Py0000"},"content":"            return true;","lastModifiedDate":"2021-10-05"},{"lineNumber":174,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":175,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":176,"author":{"gitId":"Py0000"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2021-10-05"},{"lineNumber":177,"author":{"gitId":"Py0000"},"content":"            return false;","lastModifiedDate":"2021-10-05"},{"lineNumber":178,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":179,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":180,"author":{"gitId":"Py0000"},"content":"        Appointment otherAppt \u003d (Appointment) other;","lastModifiedDate":"2021-10-05"},{"lineNumber":181,"author":{"gitId":"Py0000"},"content":"        return otherAppt.getDate().equals(getDate())","lastModifiedDate":"2021-10-10"},{"lineNumber":182,"author":{"gitId":"Py0000"},"content":"                \u0026\u0026 otherAppt.getTimeFormatted().equals(getTimeFormatted())","lastModifiedDate":"2021-10-15"},{"lineNumber":183,"author":{"gitId":"Py0000"},"content":"                \u0026\u0026 otherAppt.getVenue().equals(getVenue());","lastModifiedDate":"2021-10-10"},{"lineNumber":184,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":185,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":186,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":187,"author":{"gitId":"Py0000"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-05"},{"lineNumber":188,"author":{"gitId":"Py0000"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-10-05"},{"lineNumber":189,"author":{"gitId":"Py0000"},"content":"        return Objects.hash(date, time, venue);","lastModifiedDate":"2021-10-10"},{"lineNumber":190,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":191,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":192,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":193,"author":{"gitId":"Py0000"},"content":"    public String toString() {","lastModifiedDate":"2021-10-05"},{"lineNumber":194,"author":{"gitId":"Py0000"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-10-05"},{"lineNumber":195,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":196,"author":{"gitId":"Py0000"},"content":"        builder.append(\"Appointment: \")","lastModifiedDate":"2021-10-05"},{"lineNumber":197,"author":{"gitId":"Py0000"},"content":"                .append(this.getDate())","lastModifiedDate":"2021-10-10"},{"lineNumber":198,"author":{"gitId":"Py0000"},"content":"                .append(\" \")","lastModifiedDate":"2021-10-10"},{"lineNumber":199,"author":{"gitId":"Py0000"},"content":"                .append(this.getTimeFormatted())","lastModifiedDate":"2021-10-15"},{"lineNumber":200,"author":{"gitId":"Py0000"},"content":"                .append(\" \")","lastModifiedDate":"2021-10-10"},{"lineNumber":201,"author":{"gitId":"Py0000"},"content":"                .append(this.getVenue());","lastModifiedDate":"2021-10-10"},{"lineNumber":202,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":203,"author":{"gitId":"Py0000"},"content":"        return builder.toString();","lastModifiedDate":"2021-10-05"},{"lineNumber":204,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":205,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Py0000":172,"Th-429B":33}},{"path":"src/main/java/seedu/fast/model/person/AppointmentCount.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"/**","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":" * Keeps track of the number of appointment the user have with a client.","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":" */","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"public class AppointmentCount {","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"    public static final String INVALID_COUNT_INPUT \u003d \"Your Appointment Count cannot be less than 0!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"    public static final String INITIAL_COUNT \u003d \"0\";","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"    private int count;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"     * Constructor for {@Code AppointmentCount}","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"     * @param count A String representing the number of appointment with a contact.","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"    public AppointmentCount(String count) {","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"        requireNonNull(count);","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"        checkArgument(isValidCount(count), INVALID_COUNT_INPUT);","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"        this.count \u003d Integer.parseInt(count);","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"     * Increases the appointment count by 1.","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"     * @return The updated AppointmentCount","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"    public AppointmentCount incrementAppointmentCount() {","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"        count++;","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"        return this;","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"     * Decreases the appointment count by 1.","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"     * @return The updated AppointmentCount","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"    public AppointmentCount decrementAppointmentCount() {","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"        count--;","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"        return this;","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"     * Checks if the input count is a non-negative integer.","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"     * @param test The input count string.","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"     * @return A boolean indicating if the count is valid.","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"    public static boolean isValidCount(String test) {","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"        try {","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"            int n \u003d Integer.parseInt(test);","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"            return n \u003e\u003d 0;","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"            return false;","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"     * Checks if the Appointment count is can be decremented.","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"     * @param test The current Appointment Count.","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"     * @return A boolean indicating if the current Appointment Count can be decremented.","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"    public static boolean isValidDecrementCount(AppointmentCount test) {","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"        return (test.count \u003e\u003d 1);","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"    public String toString() {","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"        return String.valueOf(count);","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"                || (other instanceof AppointmentCount // instanceof handles nulls","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"                \u0026\u0026 count \u003d\u003d ((AppointmentCount) other).count); // state check","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"        return count;","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":87}},{"path":"src/main/java/seedu/fast/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":2,"-":69}},{"path":"src/main/java/seedu/fast/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"            \"Names should only contain alphanumeric characters and spaces, \"","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"                    + \"be no longer than 50 characters, and should not be blank\";","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"    public static final int CHAR_LIMIT \u003d 50;","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"squeakysquak"},"content":"        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d CHAR_LIMIT;","lastModifiedDate":"2021-11-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":6,"-":55}},{"path":"src/main/java/seedu/fast/model/person/NameContainsQueriesPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.util.StringUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":" * Tests that a {@code Person}\u0027s {@code Name} contains any of the queries given.","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"public class NameContainsQueriesPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"    public NameContainsQueriesPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsQueryIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"                || (other instanceof NameContainsQueriesPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"                \u0026\u0026 keywords.equals(((NameContainsQueriesPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"squeakysquak":8,"-":23}},{"path":"src/main/java/seedu/fast/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.TagUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Remark remark;","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"    private final Appointment appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"    private AppointmentCount count;","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Remark remark, Set\u003cTag\u003e tags,","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"                  Appointment appointment, AppointmentCount count) {","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        this.count \u003d count;","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public Remark getRemark() {","lastModifiedDate":"2021-09-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return remark;","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"    public Appointment getAppointment() {","lastModifiedDate":"2021-10-05"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"        return appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"    public AppointmentCount getCount() {","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"        return count;","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"Th-429B"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"Th-429B"},"content":"     * Returns the highest priority of all the tags in person.","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"Th-429B"},"content":"     * @return the highest priority","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"Th-429B"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"Th-429B"},"content":"    public int getPriority() {","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"Th-429B"},"content":"        int temp \u003d TagUtil.NO_PRIORITY;","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"Th-429B"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"Th-429B"},"content":"            return temp;","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"Th-429B"},"content":"        Iterator\u003cTag\u003e itr \u003d tags.iterator();","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"Th-429B"},"content":"        while (itr.hasNext()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"Th-429B"},"content":"            int prio \u003d itr.next().getPriority();","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"Th-429B"},"content":"            if (prio \u003c temp) {","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"Th-429B"},"content":"                temp \u003d prio;","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"Th-429B"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"Th-429B"},"content":"        return temp;","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":148,"author":{"gitId":"Cyn7hius"},"content":"                .append(\"; \\nPhone: \")","lastModifiedDate":"2021-11-01"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":150,"author":{"gitId":"Cyn7hius"},"content":"                .append(\"; \\nEmail: \")","lastModifiedDate":"2021-11-01"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":152,"author":{"gitId":"Cyn7hius"},"content":"                .append(\"; \\nAddress: \")","lastModifiedDate":"2021-11-01"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                .append(getAddress())","lastModifiedDate":"2021-09-13"},{"lineNumber":154,"author":{"gitId":"Cyn7hius"},"content":"                .append(\"; \\nRemark: \")","lastModifiedDate":"2021-11-01"},{"lineNumber":155,"author":{"gitId":"Py0000"},"content":"                .append(getRemark())","lastModifiedDate":"2021-10-05"},{"lineNumber":156,"author":{"gitId":"Cyn7hius"},"content":"                .append(\"; \\n\")","lastModifiedDate":"2021-11-01"},{"lineNumber":157,"author":{"gitId":"Py0000"},"content":"                .append(getAppointment());","lastModifiedDate":"2021-10-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":161,"author":{"gitId":"Cyn7hius"},"content":"            builder.append(\"; \\nTags: \");","lastModifiedDate":"2021-11-01"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":3,"Py0000":16,"-":121,"Th-429B":21,"Cyn7hius":6}},{"path":"src/main/java/seedu/fast/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":"            \"Phone numbers should only contain numbers, \"","lastModifiedDate":"2021-10-31"},{"lineNumber":15,"author":{"gitId":"Th-429B"},"content":"                    + \"and it should be at least 3 digits long, and at most 20 digits long\";","lastModifiedDate":"2021-10-31"},{"lineNumber":16,"author":{"gitId":"Th-429B"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,20}\";","lastModifiedDate":"2021-10-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":2,"-":49,"Th-429B":3}},{"path":"src/main/java/seedu/fast/model/person/PriorityPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import java.util.List;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.PriorityTag;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":" * Tests that a {@code Person}\u0027s {@code PriorityTag} matches any of the priorities given.","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"public class PriorityPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"    public final List\u003cString\u003e tags;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"    public PriorityPredicate(List\u003cString\u003e tags) {","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"        this.tags \u003d tags;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"     * Tests to see if a Person has the PriorityTags that are being searched for.","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"     * @param person The Person being tested.","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"     * @return true if person contains the desired tags, false otherwise.","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"        Set\u003cTag\u003e personsTags \u003d person.getTags();","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"        for (String predicateTag:tags) {","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"            String predicateTagName \u003d getTagName(predicateTag);","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"            for (Tag personsTag:personsTags) {","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"                if (personsTag.tagName.equals(predicateTagName)) {","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"                    return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"squeakysquak"},"content":"                } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"squeakysquak"},"content":"                    continue;","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"squeakysquak"},"content":"                }","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"squeakysquak"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"squeakysquak"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"squeakysquak"},"content":"        return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"squeakysquak"},"content":"    private static String getTagName(String tag) {","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"squeakysquak"},"content":"        switch(tag) {","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"squeakysquak"},"content":"        case PriorityTag.LowPriority.TERM:","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"squeakysquak"},"content":"            return PriorityTag.LowPriority.NAME;","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"squeakysquak"},"content":"        case PriorityTag.MediumPriority.TERM:","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"squeakysquak"},"content":"            return PriorityTag.MediumPriority.NAME;","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"squeakysquak"},"content":"        case PriorityTag.HighPriority.TERM:","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"squeakysquak"},"content":"            return PriorityTag.HighPriority.NAME;","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"squeakysquak"},"content":"        default:","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"squeakysquak"},"content":"            return \"\";","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"squeakysquak"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"squeakysquak"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"squeakysquak"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"squeakysquak"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"squeakysquak"},"content":"                || (other instanceof PriorityPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"squeakysquak"},"content":"                \u0026\u0026 tags.equals(((PriorityPredicate) other).tags)); // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"squeakysquak"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"squeakysquak":60}},{"path":"src/main/java/seedu/fast/model/person/Remark.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s remark in the address book.","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":" *  Guarantees: immutable; is always valid","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Remark {","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"    public static final int MAX_LENGTH_REMARK \u003d 45;","lastModifiedDate":"2021-10-31"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Remarks have a character limit of 45 characters.\";","lastModifiedDate":"2021-10-31"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code Remark}.","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param remark A valid remark.","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Remark(String remark) {","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        requireNonNull(remark);","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.value \u003d remark;","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"Th-429B"},"content":"    public static boolean isValidRemark(String test) {","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"        return test.length() \u003c\u003d MAX_LENGTH_REMARK;","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof Remark // instanceof handles nulls","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Remark) other).value)); // state check","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"squeakysquak":1,"-":40,"Th-429B":6}},{"path":"src/main/java/seedu/fast/model/person/RemarkContainsKeywordPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import java.util.List;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":" * Tests that a {@code Person}\u0027s {@code Remark} contains any of the queries given.","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"public class RemarkContainsKeywordPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"    public final List\u003cString\u003e queries;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"    public RemarkContainsKeywordPredicate(List\u003cString\u003e queries) {","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"        this.queries \u003d queries;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"     * Tests to see if a Person has a remark containing a query.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"     * @param person The Person being tested.","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"     * @return true if person\u0027s remark contains a query, false otherwise.","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"        String personsRemarkLowerCase \u003d person.getRemark().value.toLowerCase();","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"        for (String query:queries) {","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"            String queryLowerCase \u003d query.toLowerCase();","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"            // ignore case","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"            if (personsRemarkLowerCase.contains(queryLowerCase)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"                return true;","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"        return false;","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"squeakysquak"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"squeakysquak"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"squeakysquak"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"squeakysquak"},"content":"                || (other instanceof RemarkContainsKeywordPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"squeakysquak"},"content":"                \u0026\u0026 queries.equals(((RemarkContainsKeywordPredicate) other).queries)); // state check","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"squeakysquak"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"squeakysquak":40}},{"path":"src/main/java/seedu/fast/model/person/TagMatchesKeywordPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import java.util.List;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":" * Tests that a {@code Person}\u0027s {@code Tag} matches any of the tag names given.","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"public class TagMatchesKeywordPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"    public final List\u003cString\u003e tags;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"    public TagMatchesKeywordPredicate(List\u003cString\u003e tags) {","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"        this.tags \u003d tags;","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"     * Tests to see if a Person has the Tags that are being searched for.","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"     * @param person The Person being tested.","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"     * @return true if person contains the desired tags, false otherwise.","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"        Set\u003cTag\u003e personsTags \u003d person.getTags();","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"        for (String predicateTagName:tags) {","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"            String predicateTagNameLowerCase \u003d predicateTagName.toLowerCase();","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"            for (Tag personsTag:personsTags) {","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"                String personsTagLowerCase \u003d personsTag.tagName.toLowerCase();","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"                // ignore case","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"                if (personsTagLowerCase.equals(predicateTagNameLowerCase)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"squeakysquak"},"content":"                    return true;","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"squeakysquak"},"content":"                } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"squeakysquak"},"content":"                    continue;","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"squeakysquak"},"content":"                }","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"squeakysquak"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"squeakysquak"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"squeakysquak"},"content":"        return false;","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"squeakysquak"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"squeakysquak"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"squeakysquak"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"squeakysquak"},"content":"                || (other instanceof TagMatchesKeywordPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"squeakysquak"},"content":"                \u0026\u0026 tags.equals(((TagMatchesKeywordPredicate) other).tags)); // state check","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"squeakysquak"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"squeakysquak":48}},{"path":"src/main/java/seedu/fast/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"Th-429B"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":102,"author":{"gitId":"Th-429B"},"content":"     * Sorts the persons in the list by the given comparator.","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"Th-429B"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":104,"author":{"gitId":"Th-429B"},"content":"    public void sortPersons(Comparator\u003cPerson\u003e sortBy) {","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"Th-429B"},"content":"        requireNonNull(sortBy);","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"Th-429B"},"content":"        internalList.sort(sortBy);","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":108,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":4,"-":133,"Th-429B":9}},{"path":"src/main/java/seedu/fast/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person.exceptions;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"squeakysquak":1,"-":10}},{"path":"src/main/java/seedu/fast/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person.exceptions;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class PersonNotFoundException extends RuntimeException {}","lastModifiedDate":"2018-08-07"}],"authorContributionMap":{"squeakysquak":1,"-":5}},{"path":"src/main/java/seedu/fast/model/tag/InvestmentPlanTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"trash-bin99"},"content":"package seedu.fast.model.tag;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_INVESTMENT_PLAN_TAG;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"trash-bin99"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"trash-bin99"},"content":" * An InvestmentPlanTag is a subset of a Tag, having a fixed name uneditable by the user.","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"trash-bin99"},"content":" * Guarantees: immutable; name is fixed and valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"public class InvestmentPlanTag extends Tag {","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_USAGE \u003d \"Investment Plan tag: label a client with their Investment plan \"","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"        + \"purchased. \\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"Cyn7hius"},"content":"        + \"The investment plans include insurance plans: \\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"        + \" * Health, Life, Motor, Property and Travel\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"Cyn7hius"},"content":"        + \"as well as Investment plan, and Savings plan.\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"trash-bin99"},"content":"        + \"Similar to tag, to apply an Investment Plan Tag, you have to use Add, Edit, or Tag command.\\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"trash-bin99"},"content":"        + \"Parameters (using Edit): \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"trash-bin99"},"content":"        + \"edit INDEX t/ ip/INVESTMENT_PLAN\\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"trash-bin99"},"content":"        + \"Example: \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"trash-bin99"},"content":"        + \"edit 3 t/ ip/motor\\n\\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"trash-bin99"},"content":"        + \"Parameters (using Tag): \\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"Cyn7hius"},"content":"        + \"tag INDEX a/ ip/INVESTMENT_PLAN d/ ip/INVESTMENT_PLAN\\n\\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"trash-bin99"},"content":"        + \"Example: \\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"Cyn7hius"},"content":"        + \"tag 3 a/ ip/save d/ ip/property\";","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":28,"author":{"gitId":"trash-bin99"},"content":"    public static final String INVESTMENT_PLAN_VALIDATION_REGEX \u003d LifeInsurance.COMMAND + \"|\"","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"trash-bin99"},"content":"        + MotorInsurance.COMMAND + \"|\"","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"trash-bin99"},"content":"        + HealthInsurance.COMMAND + \"|\"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"trash-bin99"},"content":"        + TravelInsurance.COMMAND + \"|\"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"trash-bin99"},"content":"        + PropertyInsurance.COMMAND + \"|\"","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"trash-bin99"},"content":"        + Investment.COMMAND + \"|\"","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"trash-bin99"},"content":"        + Savings.COMMAND;","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"trash-bin99"},"content":"    public static final String[] LOWERCASE_INVESTMENT_PLAN_TAG_NAMES \u003d new String[] {LifeInsurance.NAME.toLowerCase(),","lastModifiedDate":"2021-10-30"},{"lineNumber":37,"author":{"gitId":"trash-bin99"},"content":"            MotorInsurance.NAME.toLowerCase(),","lastModifiedDate":"2021-10-30"},{"lineNumber":38,"author":{"gitId":"trash-bin99"},"content":"            HealthInsurance.NAME.toLowerCase(),","lastModifiedDate":"2021-10-30"},{"lineNumber":39,"author":{"gitId":"trash-bin99"},"content":"            TravelInsurance.NAME.toLowerCase(),","lastModifiedDate":"2021-10-30"},{"lineNumber":40,"author":{"gitId":"trash-bin99"},"content":"            PropertyInsurance.NAME.toLowerCase(),","lastModifiedDate":"2021-10-30"},{"lineNumber":41,"author":{"gitId":"trash-bin99"},"content":"            Investment.NAME.toLowerCase(),","lastModifiedDate":"2021-10-30"},{"lineNumber":42,"author":{"gitId":"trash-bin99"},"content":"            Savings.NAME.toLowerCase()};","lastModifiedDate":"2021-10-30"},{"lineNumber":43,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":44,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":45,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"trash-bin99"},"content":"     * Constructs a {@code PriorityTag}.","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"Cyn7hius"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"trash-bin99"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"trash-bin99"},"content":"    public InvestmentPlanTag(String tagName) {","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"trash-bin99"},"content":"        super(ParserUtil.parseInvestmentPlanTag(tagName));","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"trash-bin99"},"content":"     * Class containing relevant fields for a LifeInsurance Tag.","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"trash-bin99"},"content":"    public static class LifeInsurance {","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"trash-bin99"},"content":"        public static final String NAME \u003d \"LifeInsurance\";","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"trash-bin99"},"content":"        public static final String TERM \u003d \"life\";","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"trash-bin99"},"content":"        public static final String COMMAND \u003d PREFIX_INVESTMENT_PLAN_TAG + TERM;","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"trash-bin99"},"content":"        //prevent instantiation of this class","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"trash-bin99"},"content":"        private LifeInsurance() {","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"trash-bin99"},"content":"     * Class containing relevant fields for a MotorInsurance Tag.","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"trash-bin99"},"content":"    public static class MotorInsurance {","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"trash-bin99"},"content":"        public static final String NAME \u003d \"MotorInsurance\";","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"trash-bin99"},"content":"        public static final String TERM \u003d \"motor\";","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"trash-bin99"},"content":"        public static final String COMMAND \u003d PREFIX_INVESTMENT_PLAN_TAG + TERM;","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"trash-bin99"},"content":"        //prevent instantiation of this class","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"trash-bin99"},"content":"        private MotorInsurance() {","lastModifiedDate":"2021-10-20"},{"lineNumber":81,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":82,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"trash-bin99"},"content":"     * Class containing relevant fields for a HealthInsurance Tag.","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"trash-bin99"},"content":"    public static class HealthInsurance {","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"trash-bin99"},"content":"        public static final String NAME \u003d \"HealthInsurance\";","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"trash-bin99"},"content":"        public static final String TERM \u003d \"health\";","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"trash-bin99"},"content":"        public static final String COMMAND \u003d PREFIX_INVESTMENT_PLAN_TAG + TERM;","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"trash-bin99"},"content":"        //prevent instantiation of this class","lastModifiedDate":"2021-10-20"},{"lineNumber":95,"author":{"gitId":"trash-bin99"},"content":"        private HealthInsurance() {","lastModifiedDate":"2021-10-20"},{"lineNumber":96,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":97,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":99,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":100,"author":{"gitId":"trash-bin99"},"content":"     * Class containing relevant fields for a TravelInsurance Tag.","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"trash-bin99"},"content":"    public static class TravelInsurance {","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"trash-bin99"},"content":"        public static final String NAME \u003d \"TravelInsurance\";","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"trash-bin99"},"content":"        public static final String TERM \u003d \"travel\";","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":107,"author":{"gitId":"trash-bin99"},"content":"        public static final String COMMAND \u003d PREFIX_INVESTMENT_PLAN_TAG + TERM;","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"trash-bin99"},"content":"        //prevent instantiation of this class","lastModifiedDate":"2021-10-20"},{"lineNumber":110,"author":{"gitId":"trash-bin99"},"content":"        private TravelInsurance() {","lastModifiedDate":"2021-10-20"},{"lineNumber":111,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":112,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":115,"author":{"gitId":"trash-bin99"},"content":"     * Class containing relevant fields for a PropertyInsurance Tag.","lastModifiedDate":"2021-10-18"},{"lineNumber":116,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"trash-bin99"},"content":"    public static class PropertyInsurance {","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"trash-bin99"},"content":"        public static final String NAME \u003d \"PropertyInsurance\";","lastModifiedDate":"2021-10-18"},{"lineNumber":119,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":120,"author":{"gitId":"trash-bin99"},"content":"        public static final String TERM \u003d \"property\";","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":122,"author":{"gitId":"trash-bin99"},"content":"        public static final String COMMAND \u003d PREFIX_INVESTMENT_PLAN_TAG + TERM;","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":124,"author":{"gitId":"trash-bin99"},"content":"        //prevent instantiation of this class","lastModifiedDate":"2021-10-20"},{"lineNumber":125,"author":{"gitId":"trash-bin99"},"content":"        private PropertyInsurance() {","lastModifiedDate":"2021-10-20"},{"lineNumber":126,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":127,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":129,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":130,"author":{"gitId":"trash-bin99"},"content":"     * Class containing relevant fields for a Investment Tag.","lastModifiedDate":"2021-10-18"},{"lineNumber":131,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":132,"author":{"gitId":"trash-bin99"},"content":"    public static class Investment {","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"trash-bin99"},"content":"        public static final String NAME \u003d \"Investment\";","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":135,"author":{"gitId":"trash-bin99"},"content":"        public static final String TERM \u003d \"invest\";","lastModifiedDate":"2021-10-18"},{"lineNumber":136,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":137,"author":{"gitId":"trash-bin99"},"content":"        public static final String COMMAND \u003d PREFIX_INVESTMENT_PLAN_TAG + TERM;","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":139,"author":{"gitId":"trash-bin99"},"content":"        //prevent instantiation of this class","lastModifiedDate":"2021-10-20"},{"lineNumber":140,"author":{"gitId":"trash-bin99"},"content":"        private Investment() {","lastModifiedDate":"2021-10-20"},{"lineNumber":141,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":142,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":143,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":144,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":145,"author":{"gitId":"trash-bin99"},"content":"     * Class containing relevant fields for a Savings Tag.","lastModifiedDate":"2021-10-18"},{"lineNumber":146,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":147,"author":{"gitId":"trash-bin99"},"content":"    public static class Savings {","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"trash-bin99"},"content":"        public static final String NAME \u003d \"Savings\";","lastModifiedDate":"2021-10-18"},{"lineNumber":149,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":150,"author":{"gitId":"trash-bin99"},"content":"        public static final String TERM \u003d \"save\";","lastModifiedDate":"2021-10-18"},{"lineNumber":151,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":152,"author":{"gitId":"trash-bin99"},"content":"        public static final String COMMAND \u003d PREFIX_INVESTMENT_PLAN_TAG + TERM;","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":154,"author":{"gitId":"trash-bin99"},"content":"        //prevent instantiation of this class","lastModifiedDate":"2021-10-20"},{"lineNumber":155,"author":{"gitId":"trash-bin99"},"content":"        private Savings() {","lastModifiedDate":"2021-10-20"},{"lineNumber":156,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":157,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":158,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":159,"author":{"gitId":"trash-bin99"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"trash-bin99":150,"Cyn7hius":9}},{"path":"src/main/java/seedu/fast/model/tag/PriorityTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"trash-bin99"},"content":"package seedu.fast.model.tag;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_PRIORITY_TAG;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"trash-bin99"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"trash-bin99"},"content":" * A PriorityTag is a subset of a Tag, having a fixed name uneditable by the user.","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"trash-bin99"},"content":" * Guarantees: immutable; name is fixed and valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"public class PriorityTag extends Tag {","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_USAGE \u003d \"Priority tag: label a client with a priority. \"","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"            + \"The priority can be high, med, or low\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"            + \"Similar to tag, to apply a priority tag, you have to use Add, Edit or Tag command.\\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"            + \"Parameters (using Edit): \\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"Cyn7hius"},"content":"            + \"edit INDEX t/ pr/PRIORITY\\n\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"            + \"Example: \\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"Cyn7hius"},"content":"            + \"edit 1 t/ pr/low\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"trash-bin99"},"content":"            + \"edit 3 t/ pr/high\\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"trash-bin99"},"content":"            + \"Parameters (using Tag): \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"trash-bin99"},"content":"            + \"tag INDEX a/ pr/PRIORITY d/ pr/PRIORITY\\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"trash-bin99"},"content":"            + \"Example: \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"trash-bin99"},"content":"            + \"tag 1 a/ pr/low d/ pr/high\";;","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"trash-bin99"},"content":"    public static final String PRIORITY_VALIDATION_REGEX \u003d LowPriority.COMMAND + \"|\"","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"trash-bin99"},"content":"            + MediumPriority.COMMAND + \"|\"","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"trash-bin99"},"content":"            + HighPriority.COMMAND;","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"trash-bin99"},"content":"    public static final String[] LOWERCASE_PRIORITY_TAG_NAMES \u003d new String[] {LowPriority.NAME.toLowerCase(),","lastModifiedDate":"2021-10-30"},{"lineNumber":32,"author":{"gitId":"trash-bin99"},"content":"            MediumPriority.NAME.toLowerCase(),","lastModifiedDate":"2021-10-30"},{"lineNumber":33,"author":{"gitId":"trash-bin99"},"content":"            HighPriority.NAME.toLowerCase()};","lastModifiedDate":"2021-10-30"},{"lineNumber":34,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":35,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"trash-bin99"},"content":"     * Constructs a {@code PriorityTag}.","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"trash-bin99"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"trash-bin99"},"content":"    public PriorityTag(String tagName) {","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"trash-bin99"},"content":"        super(ParserUtil.parsePriorityTag(tagName));","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"trash-bin99"},"content":"     * Class containing relevant fields for a Low Priority Tag.","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"trash-bin99"},"content":"    public static class LowPriority {","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"trash-bin99"},"content":"        public static final String NAME \u003d \"LowPriority\";","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"trash-bin99"},"content":"        public static final String TERM \u003d \"low\";","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"trash-bin99"},"content":"        public static final String COMMAND \u003d PREFIX_PRIORITY_TAG + TERM;","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"Th-429B"},"content":"        public static final int PRIORITY \u003d 3;","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"trash-bin99"},"content":"        //prevent instantiation of this class","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"trash-bin99"},"content":"        private LowPriority() {","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"trash-bin99"},"content":"     * Class containing relevant fields for a Medium Priority Tag.","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"trash-bin99"},"content":"    public static class MediumPriority {","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"trash-bin99"},"content":"        public static final String NAME \u003d \"MediumPriority\";","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"squeakysquak"},"content":"        public static final String TERM \u003d \"med\";","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"trash-bin99"},"content":"        public static final String COMMAND \u003d PREFIX_PRIORITY_TAG + TERM;","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"Th-429B"},"content":"        public static final int PRIORITY \u003d 2;","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":72,"author":{"gitId":"trash-bin99"},"content":"        //prevent instantiation of this class","lastModifiedDate":"2021-10-20"},{"lineNumber":73,"author":{"gitId":"trash-bin99"},"content":"        private MediumPriority() {","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"trash-bin99"},"content":"     * Class containing relevant fields for a High Priority Tag.","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"trash-bin99"},"content":"    public static class HighPriority {","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"trash-bin99"},"content":"        public static final String NAME \u003d \"HighPriority\";","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"trash-bin99"},"content":"        public static final String TERM \u003d \"high\";","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"trash-bin99"},"content":"        public static final String COMMAND \u003d PREFIX_PRIORITY_TAG + TERM;","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"Th-429B"},"content":"        public static final int PRIORITY \u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":89,"author":{"gitId":"trash-bin99"},"content":"        //prevent instantiation of this class","lastModifiedDate":"2021-10-20"},{"lineNumber":90,"author":{"gitId":"trash-bin99"},"content":"        private HighPriority() {","lastModifiedDate":"2021-10-20"},{"lineNumber":91,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":92,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":93,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":94,"author":{"gitId":"trash-bin99"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"trash-bin99":83,"squeakysquak":1,"Cyn7hius":6,"Th-429B":4}},{"path":"src/main/java/seedu/fast/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.TagUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric \"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"trash-bin99"},"content":"            + \"and not more than 20 characters long,\\nor follow the specified \"","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"            + \"format for a PriorityTag (\\\"pr/\\\" followed by low, med or high)\\nor a InvestmentPlanTag \"","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"trash-bin99"},"content":"            + \"(\\\"ip/\\\" followed by health, invest, life, motor, property, save or travel)\";","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_USAGE \u003d \"tag: label a client with a keyword or term. \\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"trash-bin99"},"content":"        + \"Tags can be applied using the Add,Edit or Tag command.\\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":"        + \"Parameters (using Edit): \\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"Cyn7hius"},"content":"        + \"edit INDEX t/TAG\\n\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":"        + \"Example: \\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"trash-bin99"},"content":"        + \"edit 1 t/High Value Client\\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"trash-bin99"},"content":"        + \"Parameters (using Tag): \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"trash-bin99"},"content":"        + \"tag INDEX a/ADD_TAG d/DELETE_TAG\\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"trash-bin99"},"content":"        + \"Example: \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"trash-bin99"},"content":"        + \"tag 1 a/Low Value Client d/Medium Value Client\";","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":29,"author":{"gitId":"trash-bin99"},"content":"    public static final String MESSAGE_SPECIAL_TAG_ENTERED \u003d \"A special tag may not be added using its name!\\n\"","lastModifiedDate":"2021-10-30"},{"lineNumber":30,"author":{"gitId":"trash-bin99"},"content":"            + \"Please use the special syntax found in the Help window or User Guide!\";","lastModifiedDate":"2021-10-30"},{"lineNumber":31,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"Th-429B"},"content":"    public final int priority;","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":47,"author":{"gitId":"Th-429B"},"content":"        this.priority \u003d setPriority(tagName);","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":51,"author":{"gitId":"trash-bin99"},"content":"     * Checks if the name of a special tag was entered for a normal tag.","lastModifiedDate":"2021-10-30"},{"lineNumber":52,"author":{"gitId":"trash-bin99"},"content":"     *","lastModifiedDate":"2021-10-30"},{"lineNumber":53,"author":{"gitId":"trash-bin99"},"content":"     * @param tagName The tag name.","lastModifiedDate":"2021-10-30"},{"lineNumber":54,"author":{"gitId":"trash-bin99"},"content":"     * @return A boolean depending on the result.","lastModifiedDate":"2021-10-30"},{"lineNumber":55,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":56,"author":{"gitId":"trash-bin99"},"content":"    public static boolean isSpecialTag(String tagName) {","lastModifiedDate":"2021-10-30"},{"lineNumber":57,"author":{"gitId":"trash-bin99"},"content":"        String lowercaseTagName \u003d tagName.toLowerCase();","lastModifiedDate":"2021-10-30"},{"lineNumber":58,"author":{"gitId":"trash-bin99"},"content":"        for (String name: PriorityTag.LOWERCASE_PRIORITY_TAG_NAMES) {","lastModifiedDate":"2021-10-30"},{"lineNumber":59,"author":{"gitId":"trash-bin99"},"content":"            if (name.equals(lowercaseTagName)) {","lastModifiedDate":"2021-10-30"},{"lineNumber":60,"author":{"gitId":"trash-bin99"},"content":"                return true;","lastModifiedDate":"2021-10-30"},{"lineNumber":61,"author":{"gitId":"trash-bin99"},"content":"            }","lastModifiedDate":"2021-10-30"},{"lineNumber":62,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-30"},{"lineNumber":63,"author":{"gitId":"trash-bin99"},"content":"        for (String name: InvestmentPlanTag.LOWERCASE_INVESTMENT_PLAN_TAG_NAMES) {","lastModifiedDate":"2021-10-30"},{"lineNumber":64,"author":{"gitId":"trash-bin99"},"content":"            if (name.equals(lowercaseTagName)) {","lastModifiedDate":"2021-10-30"},{"lineNumber":65,"author":{"gitId":"trash-bin99"},"content":"                return true;","lastModifiedDate":"2021-10-30"},{"lineNumber":66,"author":{"gitId":"trash-bin99"},"content":"            }","lastModifiedDate":"2021-10-30"},{"lineNumber":67,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-30"},{"lineNumber":68,"author":{"gitId":"trash-bin99"},"content":"        return false;","lastModifiedDate":"2021-10-30"},{"lineNumber":69,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":70,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":71,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"Th-429B"},"content":"        return test.matches(VALIDATION_REGEX) \u0026\u0026 isValidTagLength(test);","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"trash-bin99"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"trash-bin99"},"content":"    public static boolean isValidTagTerm(String test) {","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"trash-bin99"},"content":"        boolean isNormalTag \u003d test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"trash-bin99"},"content":"        boolean isPriorityTag \u003d test.matches(PriorityTag.PRIORITY_VALIDATION_REGEX);","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"trash-bin99"},"content":"        boolean isInvestmentPlanTag \u003d test.matches(InvestmentPlanTag.INVESTMENT_PLAN_VALIDATION_REGEX);","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"trash-bin99"},"content":"        boolean isValidLength \u003d isValidTagLength(test);","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"trash-bin99"},"content":"        return (isNormalTag || isPriorityTag || isInvestmentPlanTag) \u0026\u0026 isValidLength;","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"Th-429B"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"Th-429B"},"content":"     * Returns true if a given string has a valid length.","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"Th-429B"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"Th-429B"},"content":"    public static boolean isValidTagLength(String test) {","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"Th-429B"},"content":"        return test.length() \u003c\u003d TagUtil.MAX_LENGTH_TAG;","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":96,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"trash-bin99"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"trash-bin99"},"content":"     * Create either an instance of a Tag or a PriorityTag depending on the input term.","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"trash-bin99"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":100,"author":{"gitId":"trash-bin99"},"content":"    public static Tag createTag(String term) {","lastModifiedDate":"2021-10-06"},{"lineNumber":101,"author":{"gitId":"trash-bin99"},"content":"        boolean hasPriorityTagTerm \u003d term.matches(PriorityTag.PRIORITY_VALIDATION_REGEX);","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"trash-bin99"},"content":"        if (hasPriorityTagTerm) {","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"trash-bin99"},"content":"            return new PriorityTag(term);","lastModifiedDate":"2021-10-06"},{"lineNumber":104,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":105,"author":{"gitId":"trash-bin99"},"content":"        boolean hasInvestmentPlanTerm \u003d term.matches(InvestmentPlanTag.INVESTMENT_PLAN_VALIDATION_REGEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":106,"author":{"gitId":"trash-bin99"},"content":"        if (hasInvestmentPlanTerm) {","lastModifiedDate":"2021-10-19"},{"lineNumber":107,"author":{"gitId":"trash-bin99"},"content":"            return new InvestmentPlanTag(term);","lastModifiedDate":"2021-10-19"},{"lineNumber":108,"author":{"gitId":"trash-bin99"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":109,"author":{"gitId":"trash-bin99"},"content":"        return new Tag(term);","lastModifiedDate":"2021-10-06"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"Th-429B"},"content":"    public static int setPriority(String tagName) {","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"Th-429B"},"content":"        if (tagName.equals(PriorityTag.LowPriority.NAME)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"Th-429B"},"content":"            return PriorityTag.LowPriority.PRIORITY;","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"Th-429B"},"content":"        if (tagName.equals(PriorityTag.MediumPriority.NAME)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"Th-429B"},"content":"            return PriorityTag.MediumPriority.PRIORITY;","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"Th-429B"},"content":"        if (tagName.equals(PriorityTag.HighPriority.NAME)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"Th-429B"},"content":"            return PriorityTag.HighPriority.PRIORITY;","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"Th-429B"},"content":"        return TagUtil.NO_PRIORITY;","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"Th-429B"},"content":"    public int getPriority() {","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"Th-429B"},"content":"        return priority;","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":128,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"squeakysquak":2,"trash-bin99":62,"-":50,"Th-429B":30,"Cyn7hius":4}},{"path":"src/main/java/seedu/fast/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.util;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Address;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.AppointmentCount;","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Email;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Remark;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final Remark EMPTY_REMARK \u003d new Remark(\"\");","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"    public static final Appointment EMPTY_APPOINTMENT \u003d new Appointment(Appointment.NO_APPOINTMENT,","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"            Appointment.NO_TIME, Appointment.NO_VENUE);","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), EMPTY_REMARK,","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"                getTagSet(\"friends\"), EMPTY_APPOINTMENT, new AppointmentCount(\"0\")),","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), EMPTY_REMARK,","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"trash-bin99"},"content":"                getTagSet(\"colleagues\", \"friends\", \"Savings\"), EMPTY_APPOINTMENT, new AppointmentCount(\"0\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"trash-bin99"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"trash-bin99"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), EMPTY_REMARK,","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"trash-bin99"},"content":"                getTagSet(\"neighbours\", \"Investment\"), EMPTY_APPOINTMENT, new AppointmentCount(\"0\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), EMPTY_REMARK,","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"                getTagSet(\"family\"), EMPTY_APPOINTMENT, new AppointmentCount(\"0\")),","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), EMPTY_REMARK,","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"trash-bin99"},"content":"                getTagSet(\"classmates\", \"LifeInsurance\", \"HealthInsurance\"), EMPTY_APPOINTMENT,","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"trash-bin99"},"content":"                new AppointmentCount(\"0\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), EMPTY_REMARK,","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"trash-bin99"},"content":"                getTagSet(\"colleagues\", \"PropertyInsurance\"), EMPTY_APPOINTMENT, new AppointmentCount(\"0\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"trash-bin99"},"content":"            new Person(new Name(\"Stuart Brown\"), new Phone(\"98490328\"), new Email(\"stuartb@example.com\"),","lastModifiedDate":"2021-10-12"},{"lineNumber":50,"author":{"gitId":"trash-bin99"},"content":"                new Address(\"Blk 822 Sembawang Road, #02-13\"), new Remark(\"He likes to eat pizza\"),","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"trash-bin99"},"content":"                getTagSet(\"LowPriority\", \"friends\"),","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"                new Appointment(\"16 Dec 2021\", \"1330\", \"Domino\u0027s Pizza\"),","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"                new AppointmentCount(\"0\")),","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"trash-bin99"},"content":"            new Person(new Name(\"Thomas Lim\"), new Phone(\"98902563\"), new Email(\"thomaslim@example.com\"),","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"trash-bin99"},"content":"                new Address(\"Blk 145 Braddell Street 85, #20-13\"), new Remark(\"He has a lot of money\"),","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"trash-bin99"},"content":"                getTagSet(\"HighPriority\", \"acquaintance\", \"MotorInsurance\"), EMPTY_APPOINTMENT,","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"                new AppointmentCount(\"0\")),","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"trash-bin99"},"content":"            new Person(new Name(\"Wayne Robinson\"), new Phone(\"92378943\"), new Email(\"waynerob@example.com\"),","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"trash-bin99"},"content":"                new Address(\"Blk 412 Bishan Ring Road, #04-13\"), EMPTY_REMARK,","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"trash-bin99"},"content":"                getTagSet(\"MediumPriority\", \"oldfriend\"),","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"                new Appointment(\"09 Sep 2021\", \"1200\", \"Bishan Park\"),","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"trash-bin99"},"content":"                new AppointmentCount(\"0\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"trash-bin99"},"content":"            new Person(new Name(\"Jonathan Low\"), new Phone(\"93576543\"), new Email(\"lowjonathan@example.com\"),","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"trash-bin99"},"content":"                    new Address(\"Blk 212 Pasar Ring Road, #03-11\"), new Remark(\"He lives in the market\"),","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"trash-bin99"},"content":"                    getTagSet(\"LowPriority\", \"TravelInsurance\"),","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"trash-bin99"},"content":"                    EMPTY_APPOINTMENT, new AppointmentCount(\"0\"))","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":71,"author":{"gitId":"squeakysquak"},"content":"    public static ReadOnlyFast getSampleFast() {","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"squeakysquak"},"content":"        Fast sampleAb \u003d new Fast();","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"squeakysquak":12,"trash-bin99":22,"Py0000":10,"-":44}},{"path":"src/main/java/seedu/fast/storage/FastStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":" * Represents a storage for {@link Fast}.","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"public interface FastStorage {","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"    Path getFastFilePath();","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"     * Returns AddressBook data as a {@link ReadOnlyFast}.","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"    Optional\u003cReadOnlyFast\u003e readFast() throws DataConversionException, IOException;","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"     * @see #getFastFilePath()","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"    Optional\u003cReadOnlyFast\u003e readFast(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"squeakysquak"},"content":"     * Saves the given {@link ReadOnlyFast} to the storage.","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"squeakysquak"},"content":"    void saveFast(ReadOnlyFast addressBook) throws IOException;","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"squeakysquak"},"content":"     * @see #saveFast(ReadOnlyFast)","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"squeakysquak"},"content":"    void saveFast(ReadOnlyFast addressBook, Path filePath) throws IOException;","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"squeakysquak":15,"-":31}},{"path":"src/main/java/seedu/fast/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Address;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.AppointmentCount;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Email;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Remark;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"    private final String appointmentDate;","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"    private final String appointmentTime;","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"    private final String appointmentVenue;","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"    private final String appointmentCount;","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"            @JsonProperty(\"remark\") String remark, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"            @JsonProperty(\"appointment date\") String date, @JsonProperty(\"appointment time\") String time,","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"            @JsonProperty(\"appointment venue\") String venue, @JsonProperty(\"appointment count\") String count) {","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"        this.appointmentDate \u003d date;","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"        this.appointmentTime \u003d time;","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"        this.appointmentVenue \u003d venue;","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"        this.appointmentCount \u003d count;","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        remark \u003d source.getRemark().value;","lastModifiedDate":"2021-09-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"        // shows the appointment date if there is one, otherwise shows \"No Appointment Scheduled\"","lastModifiedDate":"2021-10-05"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"        appointmentDate \u003d source.getAppointment().getDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"        appointmentTime \u003d source.getAppointment().getTime();","lastModifiedDate":"2021-10-16"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"        appointmentVenue \u003d source.getAppointment().getVenue();","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"        appointmentCount \u003d source.getCount().toString();","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-05"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"                    Name.class.getSimpleName()));","lastModifiedDate":"2021-10-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-05"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"                    Phone.class.getSimpleName()));","lastModifiedDate":"2021-10-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-05"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"                    Email.class.getSimpleName()));","lastModifiedDate":"2021-10-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-05"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"                    Address.class.getSimpleName()));","lastModifiedDate":"2021-10-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (remark \u003d\u003d null) {","lastModifiedDate":"2021-09-13"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-05"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"                    Remark.class.getSimpleName()));","lastModifiedDate":"2021-10-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":136,"author":{"gitId":"Th-429B"},"content":"        if (!Remark.isValidRemark(remark)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":137,"author":{"gitId":"Th-429B"},"content":"            throw new IllegalValueException(Remark.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-22"},{"lineNumber":138,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"        final Remark modelRemark \u003d new Remark(remark);","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":141,"author":{"gitId":"Py0000"},"content":"        if (appointmentDate \u003d\u003d null) {","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"Py0000"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"Py0000"},"content":"                    Appointment.class.getSimpleName()));","lastModifiedDate":"2021-10-11"},{"lineNumber":144,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":145,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":146,"author":{"gitId":"Py0000"},"content":"        if (!Appointment.isValidDateFormat(appointmentDate)) {","lastModifiedDate":"2021-10-15"},{"lineNumber":147,"author":{"gitId":"Py0000"},"content":"            throw new IllegalValueException(Appointment.INVALID_DATE_INPUT);","lastModifiedDate":"2021-10-15"},{"lineNumber":148,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":149,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"        if (appointmentTime \u003d\u003d null) {","lastModifiedDate":"2021-10-11"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-11"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"                    Appointment.class.getSimpleName()));","lastModifiedDate":"2021-10-11"},{"lineNumber":153,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":154,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":155,"author":{"gitId":"Py0000"},"content":"        if (!Appointment.isValidTimeFormat(appointmentTime)) {","lastModifiedDate":"2021-10-15"},{"lineNumber":156,"author":{"gitId":"Py0000"},"content":"            throw new IllegalValueException(Appointment.INVALID_TIME_INPUT);","lastModifiedDate":"2021-10-15"},{"lineNumber":157,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":158,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":159,"author":{"gitId":"Py0000"},"content":"        if (appointmentVenue \u003d\u003d null) {","lastModifiedDate":"2021-10-11"},{"lineNumber":160,"author":{"gitId":"Py0000"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-05"},{"lineNumber":161,"author":{"gitId":"Py0000"},"content":"                    Appointment.class.getSimpleName()));","lastModifiedDate":"2021-10-05"},{"lineNumber":162,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":163,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":164,"author":{"gitId":"Py0000"},"content":"        if (!Appointment.isValidVenueFormat(appointmentVenue)) {","lastModifiedDate":"2021-10-15"},{"lineNumber":165,"author":{"gitId":"Py0000"},"content":"            throw new IllegalValueException(Appointment.INVALID_VENUE_INPUT);","lastModifiedDate":"2021-10-15"},{"lineNumber":166,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":167,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":168,"author":{"gitId":"Py0000"},"content":"        final Appointment modelAppointment \u003d new Appointment(appointmentDate, appointmentTime,","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"Py0000"},"content":"                appointmentVenue);","lastModifiedDate":"2021-10-11"},{"lineNumber":170,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":171,"author":{"gitId":"Py0000"},"content":"        if (appointmentCount \u003d\u003d null) {","lastModifiedDate":"2021-10-14"},{"lineNumber":172,"author":{"gitId":"Py0000"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-14"},{"lineNumber":173,"author":{"gitId":"Py0000"},"content":"                    AppointmentCount.class.getSimpleName()));","lastModifiedDate":"2021-10-14"},{"lineNumber":174,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":175,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":176,"author":{"gitId":"Py0000"},"content":"        if (!AppointmentCount.isValidCount(appointmentCount)) {","lastModifiedDate":"2021-10-15"},{"lineNumber":177,"author":{"gitId":"Py0000"},"content":"            throw new IllegalValueException(AppointmentCount.INVALID_COUNT_INPUT);","lastModifiedDate":"2021-10-15"},{"lineNumber":178,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":179,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":180,"author":{"gitId":"Py0000"},"content":"        final AppointmentCount apptCount \u003d new AppointmentCount(appointmentCount);","lastModifiedDate":"2021-10-14"},{"lineNumber":181,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":182,"author":{"gitId":"Py0000"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2021-10-14"},{"lineNumber":183,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":184,"author":{"gitId":"Py0000"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelRemark, modelTags,","lastModifiedDate":"2021-10-05"},{"lineNumber":185,"author":{"gitId":"Py0000"},"content":"                modelAppointment, apptCount);","lastModifiedDate":"2021-10-14"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"squeakysquak":9,"Py0000":75,"-":101,"Th-429B":3}},{"path":"src/main/java/seedu/fast/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"squeakysquak":3,"-":45}},{"path":"src/main/java/seedu/fast/storage/JsonFastStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.LogsCenter;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.util.FileUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.util.JsonUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"public class JsonFastStorage implements FastStorage {","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonFastStorage.class);","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"    public JsonFastStorage(Path filePath) {","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"    public Path getFastFilePath() {","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"squeakysquak"},"content":"    public Optional\u003cReadOnlyFast\u003e readFast() throws DataConversionException {","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"squeakysquak"},"content":"        return readFast(filePath);","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"squeakysquak"},"content":"     * Similar to {@link #readFast()}.","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"squeakysquak"},"content":"    public Optional\u003cReadOnlyFast\u003e readFast(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"squeakysquak"},"content":"        Optional\u003cJsonSerializableFast\u003e jsonFast \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-10-04"},{"lineNumber":49,"author":{"gitId":"squeakysquak"},"content":"                filePath, JsonSerializableFast.class);","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"squeakysquak"},"content":"        if (!jsonFast.isPresent()) {","lastModifiedDate":"2021-10-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"squeakysquak"},"content":"            return Optional.of(jsonFast.get().toModelType());","lastModifiedDate":"2021-10-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"squeakysquak"},"content":"    public void saveFast(ReadOnlyFast fast) throws IOException {","lastModifiedDate":"2021-10-04"},{"lineNumber":64,"author":{"gitId":"squeakysquak"},"content":"        saveFast(fast, filePath);","lastModifiedDate":"2021-10-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"squeakysquak"},"content":"     * Similar to {@link #saveFast(ReadOnlyFast)}.","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"squeakysquak"},"content":"    public void saveFast(ReadOnlyFast fast, Path filePath) throws IOException {","lastModifiedDate":"2021-10-04"},{"lineNumber":73,"author":{"gitId":"squeakysquak"},"content":"        requireNonNull(fast);","lastModifiedDate":"2021-10-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"squeakysquak"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableFast(fast), filePath);","lastModifiedDate":"2021-10-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"squeakysquak":25,"-":55}},{"path":"src/main/java/seedu/fast/storage/JsonSerializableFast.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":" * An Immutable FAST address book that is serializable to JSON format.","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"@JsonRootName(value \u003d \"fast\")","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"class JsonSerializableFast {","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"     * Constructs a {@code JsonSerializableFast} with the given persons.","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"    public JsonSerializableFast(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"squeakysquak"},"content":"     * Converts a given {@code ReadOnlyFast} into this class for Jackson use.","lastModifiedDate":"2021-10-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"squeakysquak"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableFast}.","lastModifiedDate":"2021-10-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"squeakysquak"},"content":"    public JsonSerializableFast(ReadOnlyFast source) {","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"squeakysquak"},"content":"     * Converts this FAST into the model\u0027s {@code Fast} object.","lastModifiedDate":"2021-10-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"squeakysquak"},"content":"    public Fast toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"squeakysquak"},"content":"        Fast fast \u003d new Fast();","lastModifiedDate":"2021-10-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"squeakysquak"},"content":"            if (fast.hasPerson(person)) {","lastModifiedDate":"2021-10-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"squeakysquak"},"content":"            fast.addPerson(person);","lastModifiedDate":"2021-10-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"squeakysquak"},"content":"        return fast;","lastModifiedDate":"2021-10-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"squeakysquak":19,"-":41}},{"path":"src/main/java/seedu/fast/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.util.JsonUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"squeakysquak":5,"-":42}},{"path":"src/main/java/seedu/fast/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"public interface Storage extends FastStorage, UserPrefsStorage {","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"    Path getFastFilePath();","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"    Optional\u003cReadOnlyFast\u003e readFast() throws DataConversionException, IOException;","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"    void saveFast(ReadOnlyFast addressBook) throws IOException;","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"squeakysquak":9,"-":23}},{"path":"src/main/java/seedu/fast/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.LogsCenter;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":" * Manages storage of FAST data in local storage.","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"    private FastStorage fastStorage;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"     * Creates a {@code StorageManager} with the given {@code FastStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"    public StorageManager(FastStorage fastStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"        this.fastStorage \u003d fastStorage;","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"squeakysquak"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FAST methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"squeakysquak"},"content":"    public Path getFastFilePath() {","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"squeakysquak"},"content":"        return fastStorage.getFastFilePath();","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"squeakysquak"},"content":"    public Optional\u003cReadOnlyFast\u003e readFast() throws DataConversionException, IOException {","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"squeakysquak"},"content":"        return readFast(fastStorage.getFastFilePath());","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":63,"author":{"gitId":"squeakysquak"},"content":"    public Optional\u003cReadOnlyFast\u003e readFast(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"squeakysquak"},"content":"        return fastStorage.readFast(filePath);","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"squeakysquak"},"content":"    public void saveFast(ReadOnlyFast fast) throws IOException {","lastModifiedDate":"2021-10-04"},{"lineNumber":70,"author":{"gitId":"squeakysquak"},"content":"        saveFast(fast, fastStorage.getFastFilePath());","lastModifiedDate":"2021-10-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"squeakysquak"},"content":"    public void saveFast(ReadOnlyFast fast, Path filePath) throws IOException {","lastModifiedDate":"2021-10-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"squeakysquak"},"content":"        fastStorage.saveFast(fast, filePath);","lastModifiedDate":"2021-10-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":22,"-":57}},{"path":"src/main/java/seedu/fast/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":" * Represents a storage for {@link seedu.fast.model.UserPrefs}.","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"     * Saves the given {@link seedu.fast.model.ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"squeakysquak":6,"-":30}},{"path":"src/main/java/seedu/fast/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.CommandResult;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.parser.exceptions.HelpParseException;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":48,"author":{"gitId":"Cyn7hius"},"content":"        } catch (CommandException | ParseException | HelpParseException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"squeakysquak"},"content":"         * @see seedu.fast.logic.Logic#execute(String)","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"Cyn7hius"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException, HelpParseException;","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"squeakysquak":5,"-":78,"Cyn7hius":3}},{"path":"src/main/java/seedu/fast/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"Cyn7hius"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"Cyn7hius"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"Cyn7hius"},"content":"import javafx.event.EventHandler;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"Cyn7hius"},"content":"import javafx.scene.control.ComboBox;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.LogsCenter;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.AddCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.AppointmentCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.DeleteCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.EditCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.FindCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.ListCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.MarkAppointmentCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.RemarkCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.SortCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.tag.InvestmentPlanTag;","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.tag.PriorityTag;","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2122s1-cs2103t-t09-4.github.io/tp/\";","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"Cyn7hius"},"content":"    public static final String HELP_MESSAGE \u003d \"View our user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"Cyn7hius"},"content":"    public static final String[] COMMAND_LIST \u003d ParserUtil.COMMAND_LIST;","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"Cyn7hius"},"content":"    private static final String QUICK_START_MESSAGE \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"Cyn7hius"},"content":"        \"Here are some of the notations and style we used for all the commands: \\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"Cyn7hius"},"content":"            + \"Words in `UPPER_CASE` are the parameters to be added in by the user.\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"Cyn7hius"},"content":"            + \" * e.g. for `add n/NAME`, you replace `NAME` with your client\u0027s name \"","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"Cyn7hius"},"content":"            + \"such as \\n`add n/John Doe`.\\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"Cyn7hius"},"content":"            + \"Items in square brackets are optional.\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"Cyn7hius"},"content":"            + \" * e.g. `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.\\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"Cyn7hius"},"content":"            + \"Items with `…` after them can be used zero or more times.\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"Cyn7hius"},"content":"            + \" * e.g. `[t/TAG]…` can be `t/friend`, `t/friend t/family` or just left empty.\\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"Cyn7hius"},"content":"            + \"Parameters can be in any order.\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"Cyn7hius"},"content":"            + \" * e.g. for the format: `n/NAME p/PHONE`, `p/PHONE n/NAME` is also accepted.\\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"Cyn7hius"},"content":"            + \"If a parameter is expected only once, but you specified it multiple times, only the \"","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"Cyn7hius"},"content":"            + \"last parameter will be taken.\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"Cyn7hius"},"content":"            + \" * e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.\";","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"Cyn7hius"},"content":"    private static final String ADD_COMMAND_USAGE \u003d AddCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"Cyn7hius"},"content":"    private static final String APPOINTMENT_COMMAND_USAGE \u003d AppointmentCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"Cyn7hius"},"content":"    private static final String CLEAR_COMMAND_USAGE \u003d ClearCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"Cyn7hius"},"content":"    private static final String DELETE_APPOINTMENT_COMMAND_USAGE \u003d DeleteAppointmentCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"Cyn7hius"},"content":"    private static final String DELETE_COMMAND_USAGE \u003d DeleteCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"Cyn7hius"},"content":"    private static final String EDIT_APPOINTMENT_COMMAND_USAGE \u003d EditAppointmentCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"Cyn7hius"},"content":"    private static final String EDIT_COMMAND_USAGE \u003d EditCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"Cyn7hius"},"content":"    private static final String EXIT_COMMAND_USAGE \u003d ExitCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"Cyn7hius"},"content":"    private static final String FIND_COMMAND_USAGE \u003d FindCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"Cyn7hius"},"content":"    private static final String LIST_COMMAND_USAGE \u003d ListCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"Cyn7hius"},"content":"    private static final String HELP_COMMAND_USAGE \u003d HelpCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"Cyn7hius"},"content":"    private static final String MARK_APPOINTMENT_COMMAND_USAGE \u003d MarkAppointmentCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"Cyn7hius"},"content":"    private static final String REMARK_COMMAND_USAGE \u003d RemarkCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"Cyn7hius"},"content":"    private static final String SORT_COMMAND_USAGE \u003d SortCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"Cyn7hius"},"content":"    private static final String STATISTICS_USAGE \u003d StatsWindow.MESSAGE_USAGE;","lastModifiedDate":"2021-10-23"},{"lineNumber":77,"author":{"gitId":"Cyn7hius"},"content":"    private static final String TAG_USAGE \u003d Tag.MESSAGE_USAGE;","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"Cyn7hius"},"content":"    private static final String INVESTMENT_PLAN_TAG_USAGE \u003d InvestmentPlanTag.MESSAGE_USAGE;","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"Cyn7hius"},"content":"    private static final String PRIORITY_TAG_USAGE \u003d PriorityTag.MESSAGE_USAGE;","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"Cyn7hius"},"content":"    @FXML","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"Cyn7hius"},"content":"    private Label commandInstruction;","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"Cyn7hius"},"content":"    @FXML","lastModifiedDate":"2021-10-06"},{"lineNumber":91,"author":{"gitId":"Cyn7hius"},"content":"    private ComboBox\u003cString\u003e commandList;","lastModifiedDate":"2021-10-06"},{"lineNumber":92,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":94,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"Cyn7hius"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"Cyn7hius"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"Cyn7hius"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"Cyn7hius"},"content":"    public HelpWindow(Stage root, String helpArg) {","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"Cyn7hius"},"content":"        super(FXML, root);","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"Cyn7hius"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"Cyn7hius"},"content":"        commandList.setItems(FXCollections.observableArrayList(COMMAND_LIST));","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"Cyn7hius"},"content":"        // For \"help\" inputs","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"Cyn7hius"},"content":"        if (helpArg.equals(\"\")) {","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"Cyn7hius"},"content":"            commandInstruction.setText(QUICK_START_MESSAGE);","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"Cyn7hius"},"content":"            // For \"help COMMAND\" inputs","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"Cyn7hius"},"content":"        } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"Cyn7hius"},"content":"            commandList.getSelectionModel().select(helpArg);","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"Cyn7hius"},"content":"            commandInstruction.setText(showCommandUsage(helpArg));","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"Cyn7hius"},"content":"        // show different command usage depending on the selected command","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"Cyn7hius"},"content":"        EventHandler\u003cActionEvent\u003e event \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"Cyn7hius"},"content":"            e -\u003e commandInstruction.setText(showCommandUsage(commandList.getValue()));","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"Cyn7hius"},"content":"        commandList.setOnAction(event);","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":123,"author":{"gitId":"Cyn7hius"},"content":"    public HelpWindow(String helpArg) {","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"Cyn7hius"},"content":"        this(new Stage(), helpArg);","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":129,"author":{"gitId":"Cyn7hius"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":130,"author":{"gitId":"Cyn7hius"},"content":"     * @throws IllegalStateException \u003cul\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     *                               if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     *                               if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     *                               if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     *                               if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     *                               \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":168,"author":{"gitId":"Cyn7hius"},"content":"    public void focus(String command) {","lastModifiedDate":"2021-10-12"},{"lineNumber":169,"author":{"gitId":"Cyn7hius"},"content":"        assert getRoot() !\u003d null : \"HelpWindow has not been initialised\";","lastModifiedDate":"2021-10-21"},{"lineNumber":170,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":172,"author":{"gitId":"Cyn7hius"},"content":"        if (!ParserUtil.matchArgs(command).equals(\"\")) {","lastModifiedDate":"2021-10-12"},{"lineNumber":173,"author":{"gitId":"Cyn7hius"},"content":"            commandList.getSelectionModel().select(command);","lastModifiedDate":"2021-10-12"},{"lineNumber":174,"author":{"gitId":"Cyn7hius"},"content":"            commandInstruction.setText(showCommandUsage(command));","lastModifiedDate":"2021-10-12"},{"lineNumber":175,"author":{"gitId":"Cyn7hius"},"content":"        } else {","lastModifiedDate":"2021-10-12"},{"lineNumber":176,"author":{"gitId":"Cyn7hius"},"content":"            // when focusing back, the combobox cannot go back to \"(Select a command)\"","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"Cyn7hius"},"content":"            // Hence we default to Quick Start","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"Cyn7hius"},"content":"            commandList.getSelectionModel().select(\"Quick Start\");","lastModifiedDate":"2021-10-12"},{"lineNumber":179,"author":{"gitId":"Cyn7hius"},"content":"            commandInstruction.setText(showCommandUsage(\"Quick Start\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":193,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":194,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":195,"author":{"gitId":"Cyn7hius"},"content":"     * Displays the command usage.","lastModifiedDate":"2021-10-11"},{"lineNumber":196,"author":{"gitId":"Cyn7hius"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":197,"author":{"gitId":"Cyn7hius"},"content":"     * @param commandName Command to be explained.","lastModifiedDate":"2021-10-11"},{"lineNumber":198,"author":{"gitId":"Cyn7hius"},"content":"     * @return The proper usage of the command.","lastModifiedDate":"2021-10-11"},{"lineNumber":199,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":200,"author":{"gitId":"Cyn7hius"},"content":"    public String showCommandUsage(String commandName) {","lastModifiedDate":"2021-10-11"},{"lineNumber":201,"author":{"gitId":"Cyn7hius"},"content":"        switch (commandName) {","lastModifiedDate":"2021-10-06"},{"lineNumber":202,"author":{"gitId":"Cyn7hius"},"content":"        case \"Quick Start\":","lastModifiedDate":"2021-10-06"},{"lineNumber":203,"author":{"gitId":"Cyn7hius"},"content":"            return QUICK_START_MESSAGE;","lastModifiedDate":"2021-10-12"},{"lineNumber":204,"author":{"gitId":"Cyn7hius"},"content":"        case \"Add\":","lastModifiedDate":"2021-10-06"},{"lineNumber":205,"author":{"gitId":"Cyn7hius"},"content":"            return ADD_COMMAND_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":206,"author":{"gitId":"Cyn7hius"},"content":"        case \"Appointment\":","lastModifiedDate":"2021-10-06"},{"lineNumber":207,"author":{"gitId":"Cyn7hius"},"content":"            return APPOINTMENT_COMMAND_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":208,"author":{"gitId":"Cyn7hius"},"content":"        case \"Delete Appointment\":","lastModifiedDate":"2021-10-23"},{"lineNumber":209,"author":{"gitId":"Cyn7hius"},"content":"            return DELETE_APPOINTMENT_COMMAND_USAGE;","lastModifiedDate":"2021-10-23"},{"lineNumber":210,"author":{"gitId":"Cyn7hius"},"content":"        case \"Edit Appointment\":","lastModifiedDate":"2021-10-23"},{"lineNumber":211,"author":{"gitId":"Cyn7hius"},"content":"            return EDIT_APPOINTMENT_COMMAND_USAGE;","lastModifiedDate":"2021-10-23"},{"lineNumber":212,"author":{"gitId":"Cyn7hius"},"content":"        case \"Mark Appointment\":","lastModifiedDate":"2021-10-23"},{"lineNumber":213,"author":{"gitId":"Cyn7hius"},"content":"            return MARK_APPOINTMENT_COMMAND_USAGE;","lastModifiedDate":"2021-10-23"},{"lineNumber":214,"author":{"gitId":"Cyn7hius"},"content":"        case \"Clear\":","lastModifiedDate":"2021-10-06"},{"lineNumber":215,"author":{"gitId":"Cyn7hius"},"content":"            return CLEAR_COMMAND_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":216,"author":{"gitId":"Cyn7hius"},"content":"        case \"Delete\":","lastModifiedDate":"2021-10-06"},{"lineNumber":217,"author":{"gitId":"Cyn7hius"},"content":"            return DELETE_COMMAND_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":218,"author":{"gitId":"Cyn7hius"},"content":"        case \"Edit\":","lastModifiedDate":"2021-10-06"},{"lineNumber":219,"author":{"gitId":"Cyn7hius"},"content":"            return EDIT_COMMAND_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":220,"author":{"gitId":"Cyn7hius"},"content":"        case \"Exit\":","lastModifiedDate":"2021-10-06"},{"lineNumber":221,"author":{"gitId":"Cyn7hius"},"content":"            return EXIT_COMMAND_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":222,"author":{"gitId":"Cyn7hius"},"content":"        case \"Find\":","lastModifiedDate":"2021-10-06"},{"lineNumber":223,"author":{"gitId":"Cyn7hius"},"content":"            return FIND_COMMAND_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":224,"author":{"gitId":"Cyn7hius"},"content":"        case \"Help\":","lastModifiedDate":"2021-10-06"},{"lineNumber":225,"author":{"gitId":"Cyn7hius"},"content":"            return HELP_COMMAND_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":226,"author":{"gitId":"Cyn7hius"},"content":"        case \"List\":","lastModifiedDate":"2021-10-06"},{"lineNumber":227,"author":{"gitId":"Cyn7hius"},"content":"            return LIST_COMMAND_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":228,"author":{"gitId":"Cyn7hius"},"content":"        case \"Remark\":","lastModifiedDate":"2021-10-06"},{"lineNumber":229,"author":{"gitId":"Cyn7hius"},"content":"            return REMARK_COMMAND_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":230,"author":{"gitId":"Cyn7hius"},"content":"        case \"Sort\":","lastModifiedDate":"2021-10-06"},{"lineNumber":231,"author":{"gitId":"Cyn7hius"},"content":"            return SORT_COMMAND_USAGE;","lastModifiedDate":"2021-10-06"},{"lineNumber":232,"author":{"gitId":"Cyn7hius"},"content":"        case \"Statistics\":","lastModifiedDate":"2021-10-23"},{"lineNumber":233,"author":{"gitId":"Cyn7hius"},"content":"            return STATISTICS_USAGE;","lastModifiedDate":"2021-10-23"},{"lineNumber":234,"author":{"gitId":"Cyn7hius"},"content":"        case \"Tag\":","lastModifiedDate":"2021-10-11"},{"lineNumber":235,"author":{"gitId":"Cyn7hius"},"content":"            return TAG_USAGE;","lastModifiedDate":"2021-10-11"},{"lineNumber":236,"author":{"gitId":"Cyn7hius"},"content":"        case \"Investment Plan Tag\":","lastModifiedDate":"2021-10-23"},{"lineNumber":237,"author":{"gitId":"Cyn7hius"},"content":"            return INVESTMENT_PLAN_TAG_USAGE;","lastModifiedDate":"2021-10-23"},{"lineNumber":238,"author":{"gitId":"Cyn7hius"},"content":"        case \"Priority Tag\":","lastModifiedDate":"2021-10-11"},{"lineNumber":239,"author":{"gitId":"Cyn7hius"},"content":"            return PRIORITY_TAG_USAGE;","lastModifiedDate":"2021-10-11"},{"lineNumber":240,"author":{"gitId":"Cyn7hius"},"content":"        case \"Misc\":","lastModifiedDate":"2021-10-06"},{"lineNumber":241,"author":{"gitId":"Cyn7hius"},"content":"            return \"Coming soon!\";","lastModifiedDate":"2021-10-06"},{"lineNumber":242,"author":{"gitId":"Cyn7hius"},"content":"        default:","lastModifiedDate":"2021-10-06"},{"lineNumber":243,"author":{"gitId":"Cyn7hius"},"content":"            return \"Something\u0027s wrong, I can feel it\";","lastModifiedDate":"2021-10-06"},{"lineNumber":244,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":245,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":246,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"squeakysquak":2,"-":83,"Cyn7hius":161}},{"path":"src/main/java/seedu/fast/ui/ItemComponent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":" * A HBox that contains a label text and the tag image.","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"Th-429B"},"content":"public class ItemComponent extends HBox {","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"Th-429B"},"content":"    @FXML","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"Th-429B"},"content":"    private Label component;","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"Th-429B"},"content":"    @FXML","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"Th-429B"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Th-429B"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"Th-429B"},"content":"     * Constructor for ItemComponent","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"Th-429B"},"content":"     * @param text Information to be displayed.","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"Th-429B"},"content":"     * @param img Image of the icon.","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"Th-429B"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"Th-429B"},"content":"    public ItemComponent(String text, Image img) {","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"Th-429B"},"content":"        try {","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/PersonComponent.fxml\"));","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"Th-429B"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"Th-429B"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"Th-429B"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"Th-429B"},"content":"        component.setText(text);","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"Th-429B"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"Th-429B":38}},{"path":"src/main/java/seedu/fast/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.GuiSettings;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.LogsCenter;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.Logic;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.CommandResult;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.parser.exceptions.HelpParseException;","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":40,"author":{"gitId":"Cyn7hius"},"content":"    private StatsWindow statsWindow;","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"Cyn7hius"},"content":"    @FXML","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"Cyn7hius"},"content":"    private MenuItem statsMenuItem;","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"Cyn7hius"},"content":"        helpWindow \u003d new HelpWindow(\"\");","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"Cyn7hius"},"content":"        statsWindow \u003d new StatsWindow(logic.getFast());","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"Cyn7hius"},"content":"        setAccelerator(statsMenuItem, KeyCombination.valueOf(\"F2\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"squeakysquak"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFastFilePath());","lastModifiedDate":"2021-10-01"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":149,"author":{"gitId":"Cyn7hius"},"content":"     * Handles the event for MainWindow.fxml","lastModifiedDate":"2021-10-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":153,"author":{"gitId":"Cyn7hius"},"content":"        handleHelp(\"\");","lastModifiedDate":"2021-10-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":157,"author":{"gitId":"Cyn7hius"},"content":"     * Opens the help window directly to the help page for command or focuses on it if it\u0027s already opened.","lastModifiedDate":"2021-10-12"},{"lineNumber":158,"author":{"gitId":"Cyn7hius"},"content":"     * Opens or focuses to the default help page if the command is invalid.","lastModifiedDate":"2021-10-12"},{"lineNumber":159,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":160,"author":{"gitId":"Cyn7hius"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":161,"author":{"gitId":"Cyn7hius"},"content":"    public void handleHelp(String command) {","lastModifiedDate":"2021-10-11"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":163,"author":{"gitId":"Cyn7hius"},"content":"            helpWindow \u003d new HelpWindow(command);","lastModifiedDate":"2021-10-11"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2021-10-11"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":166,"author":{"gitId":"Cyn7hius"},"content":"            helpWindow.focus(command);","lastModifiedDate":"2021-10-12"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":183,"author":{"gitId":"Cyn7hius"},"content":"        statsWindow.hide();","lastModifiedDate":"2021-11-01"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":187,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":188,"author":{"gitId":"Cyn7hius"},"content":"     * Opens the stats window.","lastModifiedDate":"2021-10-18"},{"lineNumber":189,"author":{"gitId":"Cyn7hius"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":190,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":191,"author":{"gitId":"Cyn7hius"},"content":"    @FXML","lastModifiedDate":"2021-10-18"},{"lineNumber":192,"author":{"gitId":"Cyn7hius"},"content":"    public void handleStats() {","lastModifiedDate":"2021-10-18"},{"lineNumber":193,"author":{"gitId":"Cyn7hius"},"content":"        if (!statsWindow.isShowing()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":194,"author":{"gitId":"Cyn7hius"},"content":"            statsWindow \u003d new StatsWindow(logic.getFast());","lastModifiedDate":"2021-10-18"},{"lineNumber":195,"author":{"gitId":"Cyn7hius"},"content":"            statsWindow.show();","lastModifiedDate":"2021-10-18"},{"lineNumber":196,"author":{"gitId":"Cyn7hius"},"content":"        } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":197,"author":{"gitId":"Cyn7hius"},"content":"            statsWindow.focus();","lastModifiedDate":"2021-10-18"},{"lineNumber":198,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":199,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":200,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"squeakysquak"},"content":"     * @see seedu.fast.logic.Logic#execute(String)","lastModifiedDate":"2021-10-01"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"Cyn7hius"},"content":"    private CommandResult executeCommand(String commandText) throws","lastModifiedDate":"2021-10-12"},{"lineNumber":211,"author":{"gitId":"Cyn7hius"},"content":"        CommandException, ParseException, HelpParseException {","lastModifiedDate":"2021-10-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":218,"author":{"gitId":"Cyn7hius"},"content":"                String helpArg \u003d ParserUtil.parseHelp(commandText);","lastModifiedDate":"2021-10-12"},{"lineNumber":219,"author":{"gitId":"Cyn7hius"},"content":"                handleHelp(helpArg);","lastModifiedDate":"2021-10-11"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"Cyn7hius"},"content":"        } catch (HelpParseException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":232,"author":{"gitId":"Cyn7hius"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2021-10-12"},{"lineNumber":233,"author":{"gitId":"Cyn7hius"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":234,"author":{"gitId":"Cyn7hius"},"content":"            handleHelp(\"\"); // opens a default help window","lastModifiedDate":"2021-10-12"},{"lineNumber":235,"author":{"gitId":"Cyn7hius"},"content":"            throw e;","lastModifiedDate":"2021-10-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"squeakysquak":8,"-":185,"Cyn7hius":45}},{"path":"src/main/java/seedu/fast/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.ui.UiUtil.ADDRESS_IMAGE;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.ui.UiUtil.DATE_IMAGE;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.ui.UiUtil.EMAIL_IMAGE;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.ui.UiUtil.PHONE_IMAGE;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.ui.UiUtil.TAG_IMAGE;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.ui.UiUtil.TIME_IMAGE;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.ui.UiUtil.VENUE_IMAGE;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"Th-429B"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"Th-429B"},"content":"    private VBox phone;","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"Th-429B"},"content":"    private VBox address;","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"Th-429B"},"content":"    private VBox email;","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"Th-429B"},"content":"    private VBox tags;","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private Label remark;","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"    @FXML","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"    private Label appointmentHeader;","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"Th-429B"},"content":"    private VBox appointmentDate;","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"    @FXML","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"Th-429B"},"content":"    private VBox appointmentTime;","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"    @FXML","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"Th-429B"},"content":"    private VBox appointmentVenue;","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"    @FXML","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"    private Label appointmentCount;","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":71,"author":{"gitId":"Th-429B"},"content":"        phone.getChildren().add(new ItemComponent(person.getPhone().value, PHONE_IMAGE));","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"Th-429B"},"content":"        address.getChildren().add(new ItemComponent(person.getAddress().value, ADDRESS_IMAGE));","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"Th-429B"},"content":"        email.getChildren().add(new ItemComponent(person.getEmail().value, EMAIL_IMAGE));","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        remark.setText(person.getRemark().value);","lastModifiedDate":"2021-09-13"},{"lineNumber":75,"author":{"gitId":"Th-429B"},"content":"        tags.getChildren().add(new TagComponent(person.getTags(), TAG_IMAGE));","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"Th-429B"},"content":"        appointmentDate.getChildren().add(new ItemComponent(checkDateAndAddHeader(person.getAppointment().getDate()),","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"Th-429B"},"content":"                DATE_IMAGE));","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"Th-429B"},"content":"        appointmentTime.getChildren().add(new ItemComponent(","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"Th-429B"},"content":"                checkTimeVenueAndAddHeader(","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"Th-429B"},"content":"                        person.getAppointment().getTimeFormatted(), \"Time\",","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"Th-429B"},"content":"                        person.getAppointment().getDate()), TIME_IMAGE));","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"Th-429B"},"content":"        appointmentVenue.getChildren().add(new ItemComponent(","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"Th-429B"},"content":"                checkTimeVenueAndAddHeader(person.getAppointment().getVenue(), \"Venue\",","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"Th-429B"},"content":"                        person.getAppointment().getDate()), VENUE_IMAGE));","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"        appointmentCount.setText(\"Appointment: \" + person.getCount());","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":87,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"     * Check if appointment has been scheduled with this contact and modify the displayed header.","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"     * If appointment is scheduled, appointment header remains as \"Upcoming Appointment\"","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"     * and adds \"Date: \" indicator before the specified date.","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"     * If appointment is not scheduled yet, appointment header will show \"No Appointment Scheduled yet\"","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"     * and no date detail is shown.","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"     * @param date The date data retrieved.","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"     * @return A String representing the date data if it is present.","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"    private String checkDateAndAddHeader(String date) {","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"        String emptyDate \u003d \"\";","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"        String header \u003d \"Date\";","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"        if (date.equalsIgnoreCase(Appointment.NO_APPOINTMENT)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"            appointmentHeader.setText(Appointment.NO_APPOINTMENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"            date \u003d emptyDate;","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"        if (!date.equals(Appointment.NO_APPOINTMENT) \u0026\u0026 !date.equals(emptyDate)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"            date \u003d header + \": \" + date;","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"        return date;","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"     * Check if appointment has been scheduled with this contact and if time and venue data are present.","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"     * If appointment is scheduled and time and/or venue data is present, add the header before the data.","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"     * If appointment is scheduled and time and/or venue data is not present,","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"     * display a \u0027-\u0027 to indicate that the data is missing.","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"     * If appointment is not scheduled, hides the time and venue field as it is not supposed to be there.","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"     * @param text The time/venue data retrieved.","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"     * @param header Either \"Time \" or \"Venue: \"","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"     * @param date The date data retrieved.","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"     * @return A String representing the data if it is present.","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"    private String checkTimeVenueAndAddHeader(String text, String header, String date) {","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"        if (text.equals(Appointment.NO_TIME) \u0026\u0026 !date.equalsIgnoreCase(Appointment.NO_APPOINTMENT)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"            text \u003d \"-\";","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":131,"author":{"gitId":"Py0000"},"content":"        if (!text.equals(Appointment.NO_TIME)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"            text \u003d header + \": \" + text;","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"        return text;","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"squeakysquak":2,"Py0000":60,"-":61,"Th-429B":33}},{"path":"src/main/java/seedu/fast/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.LogsCenter;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2019-01-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2018-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2018-02-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"squeakysquak":3,"-":46}},{"path":"src/main/java/seedu/fast/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"squeakysquak":1,"-":27}},{"path":"src/main/java/seedu/fast/ui/StatsWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Cyn7hius"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"Cyn7hius"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"Cyn7hius"},"content":"import javafx.beans.binding.Bindings;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"Cyn7hius"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"Cyn7hius"},"content":"import javafx.scene.chart.PieChart;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"Cyn7hius"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"Cyn7hius"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.commons.core.LogsCenter;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.ReadOnlyFast;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.tag.InvestmentPlanTag;","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.tag.PriorityTag;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.ui.StatsWindowData.InvestmentPlanData;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.ui.StatsWindowData.PriorityData;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"Cyn7hius"},"content":" * Controller for a stats page","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"Cyn7hius"},"content":"public class StatsWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"Cyn7hius"},"content":"    public static final String MESSAGE_USAGE \u003d \"Opens a new window with built-in statistics to provide \"","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"Cyn7hius"},"content":"        + \"you with an overview of your data.\\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"Cyn7hius"},"content":"        + \"To view the statistics, simply click the \\\"Stats\\\" menu item on the top bar or press `F2`.\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"Cyn7hius"},"content":"        + \"Currently, FAST supports these statistics:\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"Cyn7hius"},"content":"        + \"* Priority Tag Chart\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"Cyn7hius"},"content":"        + \"* Insurance Plan Chart\";","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"Cyn7hius"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatsWindow.class);","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"Cyn7hius"},"content":"    private static final String FXML \u003d \"StatsWindow.fxml\";","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"Cyn7hius"},"content":"    private static final String PRIORITY_CHART_MESSAGE_INTRO \u003d \"You currently have a total of: \";","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"Cyn7hius"},"content":"    private static final String INVESTMENT_PLAN_CHART_MESSAGE_INTRO \u003d \"You currently have a total of: \";","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"Cyn7hius"},"content":"    private static final String HIGH_PRIORITY_MESSAGE \u003d \"Good job! You have a large proportion of high value clients!\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"Cyn7hius"},"content":"        + \"However, this means that you need to be sure to put in extra effort to maintain it!\";","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"    private static final String MEDIUM_PRIORITY_MESSAGE \u003d \"Nice! You have a sizeable portion of medium value clients!\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"Cyn7hius"},"content":"        + \"This is a great base for your portfolio!\";","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"Cyn7hius"},"content":"    private static final String LOW_PRIORITY_MESSAGE \u003d \"Keep it up! Focus on developing your client base to boost \\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"Cyn7hius"},"content":"        + \"your client portfolio!\";","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"Cyn7hius"},"content":"    private static final String NO_PRIORITY_TAGS_MESSAGE \u003d \"You have no priority tags added to FAST! Use the tag \"","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"Cyn7hius"},"content":"        + \"command to add some now!\";","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"    private static final String NO_INVESTMENT_PLAN_TAGS_MESSAGE \u003d \"You have no investment plan tags added to FAST! \"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"Cyn7hius"},"content":"        + \"Use the tag command to add some now!\";","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"Cyn7hius"},"content":"    private Fast fast;","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"Cyn7hius"},"content":"    @FXML","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"Cyn7hius"},"content":"    private PieChart investmentPlanPieChart;","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"Cyn7hius"},"content":"    @FXML","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"Cyn7hius"},"content":"    private PieChart priorityPieChart;","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"Cyn7hius"},"content":"    @FXML","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"Cyn7hius"},"content":"    private Label investmentPlanPieChartDesc;","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"Cyn7hius"},"content":"    @FXML","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"Cyn7hius"},"content":"    private Label priorityPieChartDesc;","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"Cyn7hius"},"content":"     * Creates a new StatsWindow.","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"Cyn7hius"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"Cyn7hius"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"Cyn7hius"},"content":"    public StatsWindow(Stage root, ReadOnlyFast fast) {","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"Cyn7hius"},"content":"        super(FXML, root);","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"Cyn7hius"},"content":"        // Since StatsWindow receives a Fast instance, it is safe to typecast it","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"Cyn7hius"},"content":"        this.fast \u003d (Fast) fast;","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"Cyn7hius"},"content":"        populatePriorityPieChart();","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"Cyn7hius"},"content":"        addCountsToPieChart(priorityPieChart);","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"Cyn7hius"},"content":"        populateInvestmentPlanPieChart();","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"Cyn7hius"},"content":"        addCountsToPieChart(investmentPlanPieChart);","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"Cyn7hius"},"content":"        priorityPieChart.setLegendVisible(false);","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"Cyn7hius"},"content":"        investmentPlanPieChart.setLegendVisible(false);","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"Cyn7hius"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"Cyn7hius"},"content":"    public StatsWindow(ReadOnlyFast fast) {","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"Cyn7hius"},"content":"        this(new Stage(), fast);","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"Cyn7hius"},"content":"     * Shows the stats window.","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"Cyn7hius"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"Cyn7hius"},"content":"     * @throws IllegalStateException \u003cul\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"Cyn7hius"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"Cyn7hius"},"content":"     *                               if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"Cyn7hius"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"Cyn7hius"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"Cyn7hius"},"content":"     *                               if this method is called during animation or layout processing.","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"Cyn7hius"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"Cyn7hius"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"Cyn7hius"},"content":"     *                               if this method is called on the primary stage.","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"Cyn7hius"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":97,"author":{"gitId":"Cyn7hius"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"Cyn7hius"},"content":"     *                               if {@code dialogStage} is already showing.","lastModifiedDate":"2021-10-18"},{"lineNumber":99,"author":{"gitId":"Cyn7hius"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":100,"author":{"gitId":"Cyn7hius"},"content":"     *                               \u003c/ul\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"Cyn7hius"},"content":"    public void show() {","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"Cyn7hius"},"content":"        logger.fine(\"Showing stats page of your clients.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"Cyn7hius"},"content":"        getRoot().show();","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"Cyn7hius"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":107,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":108,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"Cyn7hius"},"content":"     * Focuses on the stats window.","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"Cyn7hius"},"content":"    public void focus() {","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"Cyn7hius"},"content":"        assert getRoot() !\u003d null : \"StatsWindow is not initialised\";","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"Cyn7hius"},"content":"        populatePriorityPieChart();","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"Cyn7hius"},"content":"        addCountsToPieChart(priorityPieChart);","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"Cyn7hius"},"content":"        populateInvestmentPlanPieChart();","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"Cyn7hius"},"content":"        addCountsToPieChart(investmentPlanPieChart);","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"Cyn7hius"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"Cyn7hius"},"content":"     * Returns true if the stats window is currently being shown.","lastModifiedDate":"2021-10-18"},{"lineNumber":122,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":123,"author":{"gitId":"Cyn7hius"},"content":"    public boolean isShowing() {","lastModifiedDate":"2021-10-18"},{"lineNumber":124,"author":{"gitId":"Cyn7hius"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2021-10-18"},{"lineNumber":125,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":126,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":127,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"Cyn7hius"},"content":"     * Hides the stats window.","lastModifiedDate":"2021-10-18"},{"lineNumber":129,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":130,"author":{"gitId":"Cyn7hius"},"content":"    public void hide() {","lastModifiedDate":"2021-10-18"},{"lineNumber":131,"author":{"gitId":"Cyn7hius"},"content":"        getRoot().hide();","lastModifiedDate":"2021-10-18"},{"lineNumber":132,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":133,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":134,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":136,"author":{"gitId":"Cyn7hius"},"content":"     * Adds the priority data from Fast and analysis of data into the PieChart.","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":138,"author":{"gitId":"Cyn7hius"},"content":"    public void populatePriorityPieChart() {","lastModifiedDate":"2021-10-18"},{"lineNumber":139,"author":{"gitId":"Cyn7hius"},"content":"        priorityPieChart.getData().clear(); //Ensure that PieChart is blank.","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"Cyn7hius"},"content":"        PriorityData pData \u003d fast.getPriorityData();","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"Cyn7hius"},"content":"        addPriorityPieChartAnalysis(pData);","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"Cyn7hius"},"content":"        addPriorityPieChartData(pData);","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"Cyn7hius"},"content":"        priorityPieChart.setLabelLineLength(30);","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":145,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":146,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"Cyn7hius"},"content":"     * Adds the investment plan data from Fast and analysis of data into the PieChart.","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"Cyn7hius"},"content":"    public void populateInvestmentPlanPieChart() {","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"Cyn7hius"},"content":"        investmentPlanPieChart.getData().clear(); //Ensure that PieChart is blank.","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"Cyn7hius"},"content":"        InvestmentPlanData iData \u003d fast.getInvestmentPlanData();","lastModifiedDate":"2021-10-25"},{"lineNumber":152,"author":{"gitId":"Cyn7hius"},"content":"        addInvestmentPlanPieChartAnalysis(iData);","lastModifiedDate":"2021-10-25"},{"lineNumber":153,"author":{"gitId":"Cyn7hius"},"content":"        addInvestmentPlanPieChartData(iData);","lastModifiedDate":"2021-10-25"},{"lineNumber":154,"author":{"gitId":"Cyn7hius"},"content":"        investmentPlanPieChart.setLabelLineLength(30);","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":157,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":159,"author":{"gitId":"Cyn7hius"},"content":"     * Adds the counts to the labels of the PieChart.","lastModifiedDate":"2021-10-18"},{"lineNumber":160,"author":{"gitId":"Cyn7hius"},"content":"     * Adapted from: https://stackoverflow.com/questions/35479375/display-additional-values-in-pie-chart","lastModifiedDate":"2021-10-18"},{"lineNumber":161,"author":{"gitId":"Cyn7hius"},"content":"     * Credit: jewelsea","lastModifiedDate":"2021-10-18"},{"lineNumber":162,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":163,"author":{"gitId":"Cyn7hius"},"content":"    public void addCountsToPieChart(PieChart pieChart) {","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"Cyn7hius"},"content":"        pieChart.getData().forEach(data -\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":165,"author":{"gitId":"Cyn7hius"},"content":"            data.nameProperty().bind(","lastModifiedDate":"2021-10-18"},{"lineNumber":166,"author":{"gitId":"Cyn7hius"},"content":"                Bindings.concat(","lastModifiedDate":"2021-10-18"},{"lineNumber":167,"author":{"gitId":"Cyn7hius"},"content":"                    data.getName(), \":\\n\", (int) data.getPieValue(), (data.getPieValue() \u003d\u003d 1)","lastModifiedDate":"2021-10-19"},{"lineNumber":168,"author":{"gitId":"Cyn7hius"},"content":"                        ? \" client\" : \" clients\" // check plural or singular","lastModifiedDate":"2021-10-25"},{"lineNumber":169,"author":{"gitId":"Cyn7hius"},"content":"                )","lastModifiedDate":"2021-10-18"},{"lineNumber":170,"author":{"gitId":"Cyn7hius"},"content":"            ));","lastModifiedDate":"2021-10-19"},{"lineNumber":171,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":172,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":173,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"Cyn7hius"},"content":"     * Adds the data elements {@code name} and {@code count} to {@code pc}","lastModifiedDate":"2021-10-19"},{"lineNumber":175,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":176,"author":{"gitId":"Cyn7hius"},"content":"    public void addPieChartData(String name, int count, PieChart pc) {","lastModifiedDate":"2021-10-19"},{"lineNumber":177,"author":{"gitId":"Cyn7hius"},"content":"        if (count \u003e 0) {","lastModifiedDate":"2021-10-19"},{"lineNumber":178,"author":{"gitId":"Cyn7hius"},"content":"            PieChart.Data data \u003d new PieChart.Data(name, count);","lastModifiedDate":"2021-10-19"},{"lineNumber":179,"author":{"gitId":"Cyn7hius"},"content":"            pc.getData().add(data);","lastModifiedDate":"2021-10-19"},{"lineNumber":180,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":181,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":182,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":183,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":184,"author":{"gitId":"Cyn7hius"},"content":"     * Adds a brief analysis of the client base\u0027s Priority Tags to the PieChart.","lastModifiedDate":"2021-10-25"},{"lineNumber":185,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":186,"author":{"gitId":"Cyn7hius"},"content":"    public void addPriorityPieChartAnalysis(PriorityData priorityData) {","lastModifiedDate":"2021-10-25"},{"lineNumber":187,"author":{"gitId":"Cyn7hius"},"content":"        int totalCount \u003d priorityData.getTotalCount();","lastModifiedDate":"2021-10-25"},{"lineNumber":188,"author":{"gitId":"Cyn7hius"},"content":"        String totalCountString \u003d totalCount + \" Priority Clients!\";","lastModifiedDate":"2021-10-25"},{"lineNumber":189,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":190,"author":{"gitId":"Cyn7hius"},"content":"        String maxCountName \u003d priorityData.getMaxName();","lastModifiedDate":"2021-10-25"},{"lineNumber":191,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":192,"author":{"gitId":"Cyn7hius"},"content":"        // Case where there are no PriorityTags","lastModifiedDate":"2021-10-25"},{"lineNumber":193,"author":{"gitId":"Cyn7hius"},"content":"        if (totalCount \u003d\u003d 0) {","lastModifiedDate":"2021-10-25"},{"lineNumber":194,"author":{"gitId":"Cyn7hius"},"content":"            setPriorityPieChartLabel(totalCountString, NO_PRIORITY_TAGS_MESSAGE);","lastModifiedDate":"2021-10-25"},{"lineNumber":195,"author":{"gitId":"Cyn7hius"},"content":"            return;","lastModifiedDate":"2021-10-25"},{"lineNumber":196,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":197,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":198,"author":{"gitId":"Cyn7hius"},"content":"        // Prioritise higher Priorities first,","lastModifiedDate":"2021-10-19"},{"lineNumber":199,"author":{"gitId":"Cyn7hius"},"content":"        // e.g. if the counts are equal for all, HIGH_PRIORITY_MESSAGE will be used","lastModifiedDate":"2021-10-19"},{"lineNumber":200,"author":{"gitId":"Cyn7hius"},"content":"        switch (maxCountName) {","lastModifiedDate":"2021-10-25"},{"lineNumber":201,"author":{"gitId":"Cyn7hius"},"content":"        case PriorityTag.HighPriority.NAME:","lastModifiedDate":"2021-10-25"},{"lineNumber":202,"author":{"gitId":"Cyn7hius"},"content":"            setPriorityPieChartLabel(totalCountString, HIGH_PRIORITY_MESSAGE);","lastModifiedDate":"2021-10-25"},{"lineNumber":203,"author":{"gitId":"Cyn7hius"},"content":"            return; //return to prevent fallthrough","lastModifiedDate":"2021-10-19"},{"lineNumber":204,"author":{"gitId":"Cyn7hius"},"content":"        case PriorityTag.MediumPriority.NAME:","lastModifiedDate":"2021-10-25"},{"lineNumber":205,"author":{"gitId":"Cyn7hius"},"content":"            setPriorityPieChartLabel(totalCountString, MEDIUM_PRIORITY_MESSAGE);","lastModifiedDate":"2021-10-25"},{"lineNumber":206,"author":{"gitId":"Cyn7hius"},"content":"            return; //return to prevent fallthrough","lastModifiedDate":"2021-10-19"},{"lineNumber":207,"author":{"gitId":"Cyn7hius"},"content":"        case PriorityTag.LowPriority.NAME:","lastModifiedDate":"2021-10-25"},{"lineNumber":208,"author":{"gitId":"Cyn7hius"},"content":"            setPriorityPieChartLabel(totalCountString, LOW_PRIORITY_MESSAGE);","lastModifiedDate":"2021-10-25"},{"lineNumber":209,"author":{"gitId":"Cyn7hius"},"content":"            return; //return to prevent fallthrough","lastModifiedDate":"2021-10-25"},{"lineNumber":210,"author":{"gitId":"Cyn7hius"},"content":"        default:","lastModifiedDate":"2021-10-25"},{"lineNumber":211,"author":{"gitId":"Cyn7hius"},"content":"            setPriorityPieChartLabel(totalCountString, NO_PRIORITY_TAGS_MESSAGE);","lastModifiedDate":"2021-10-25"},{"lineNumber":212,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":213,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":214,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":215,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":216,"author":{"gitId":"Cyn7hius"},"content":"     * Adds a brief analysis of the client base\u0027s Investment Plan Tags to the PieChart.","lastModifiedDate":"2021-10-25"},{"lineNumber":217,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":218,"author":{"gitId":"Cyn7hius"},"content":"    public void addInvestmentPlanPieChartAnalysis(InvestmentPlanData investmentPlanData) {","lastModifiedDate":"2021-10-25"},{"lineNumber":219,"author":{"gitId":"Cyn7hius"},"content":"        int totalCount \u003d investmentPlanData.getTotalCount();","lastModifiedDate":"2021-10-25"},{"lineNumber":220,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"Cyn7hius"},"content":"        String totalCountString \u003d totalCount + \" Plans Sold!\";","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"Cyn7hius"},"content":"        if (totalCount \u003d\u003d 0) {","lastModifiedDate":"2021-10-25"},{"lineNumber":224,"author":{"gitId":"Cyn7hius"},"content":"            setInvestmentPlanPieChartLabel(totalCountString, NO_INVESTMENT_PLAN_TAGS_MESSAGE);","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"Cyn7hius"},"content":"            return;","lastModifiedDate":"2021-10-25"},{"lineNumber":226,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":227,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":228,"author":{"gitId":"Cyn7hius"},"content":"        setInvestmentPlanPieChartLabel(totalCountString, \"\");","lastModifiedDate":"2021-10-25"},{"lineNumber":229,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":230,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":231,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":232,"author":{"gitId":"Cyn7hius"},"content":"     * Sets the text of the analysis label for PriorityPieChart.","lastModifiedDate":"2021-10-25"},{"lineNumber":233,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":234,"author":{"gitId":"Cyn7hius"},"content":"    private void setPriorityPieChartLabel(String totalClientCount, String text) {","lastModifiedDate":"2021-10-25"},{"lineNumber":235,"author":{"gitId":"Cyn7hius"},"content":"        priorityPieChartDesc.setText(PRIORITY_CHART_MESSAGE_INTRO + totalClientCount + \"\\n\\n\" + text);","lastModifiedDate":"2021-10-25"},{"lineNumber":236,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":237,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":238,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":239,"author":{"gitId":"Cyn7hius"},"content":"     * Sets the text of the analysis label for PriorityPieChart.","lastModifiedDate":"2021-10-25"},{"lineNumber":240,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":241,"author":{"gitId":"Cyn7hius"},"content":"    private void setInvestmentPlanPieChartLabel(String totalClientCount, String text) {","lastModifiedDate":"2021-10-25"},{"lineNumber":242,"author":{"gitId":"Cyn7hius"},"content":"        investmentPlanPieChartDesc.setText(INVESTMENT_PLAN_CHART_MESSAGE_INTRO + totalClientCount + \"\\n\\n\" + text);","lastModifiedDate":"2021-10-25"},{"lineNumber":243,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":244,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":245,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":246,"author":{"gitId":"Cyn7hius"},"content":"     * Adds the investment plan data elements into the PieChart i.e. fills the PieChart with data","lastModifiedDate":"2021-10-25"},{"lineNumber":247,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":248,"author":{"gitId":"Cyn7hius"},"content":"    private void addInvestmentPlanPieChartData(InvestmentPlanData iData) {","lastModifiedDate":"2021-10-25"},{"lineNumber":249,"author":{"gitId":"Cyn7hius"},"content":"        addPieChartData(InvestmentPlanTag.LifeInsurance.NAME, iData.getLifeCount(), investmentPlanPieChart);","lastModifiedDate":"2021-10-25"},{"lineNumber":250,"author":{"gitId":"Cyn7hius"},"content":"        addPieChartData(InvestmentPlanTag.MotorInsurance.NAME, iData.getMotorCount(), investmentPlanPieChart);","lastModifiedDate":"2021-10-25"},{"lineNumber":251,"author":{"gitId":"Cyn7hius"},"content":"        addPieChartData(InvestmentPlanTag.TravelInsurance.NAME, iData.getTravelCount(), investmentPlanPieChart);","lastModifiedDate":"2021-10-25"},{"lineNumber":252,"author":{"gitId":"Cyn7hius"},"content":"        addPieChartData(InvestmentPlanTag.HealthInsurance.NAME, iData.getHealthCount(), investmentPlanPieChart);","lastModifiedDate":"2021-10-25"},{"lineNumber":253,"author":{"gitId":"Cyn7hius"},"content":"        addPieChartData(InvestmentPlanTag.PropertyInsurance.NAME, iData.getPropertyCount(), investmentPlanPieChart);","lastModifiedDate":"2021-10-25"},{"lineNumber":254,"author":{"gitId":"Cyn7hius"},"content":"        addPieChartData(InvestmentPlanTag.Investment.NAME, iData.getInvestmentCount(), investmentPlanPieChart);","lastModifiedDate":"2021-10-25"},{"lineNumber":255,"author":{"gitId":"Cyn7hius"},"content":"        addPieChartData(InvestmentPlanTag.Savings.NAME, iData.getSavingsCount(), investmentPlanPieChart);","lastModifiedDate":"2021-10-25"},{"lineNumber":256,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":257,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":258,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":259,"author":{"gitId":"Cyn7hius"},"content":"     * Adds the priority data elements into the PieChart i.e. fills the PieChart with data","lastModifiedDate":"2021-10-25"},{"lineNumber":260,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":261,"author":{"gitId":"Cyn7hius"},"content":"    private void addPriorityPieChartData(PriorityData pData) {","lastModifiedDate":"2021-10-25"},{"lineNumber":262,"author":{"gitId":"Cyn7hius"},"content":"        addPieChartData(PriorityTag.HighPriority.NAME, pData.getHighCount(), priorityPieChart);","lastModifiedDate":"2021-10-25"},{"lineNumber":263,"author":{"gitId":"Cyn7hius"},"content":"        addPieChartData(PriorityTag.MediumPriority.NAME, pData.getMediumCount(), priorityPieChart);","lastModifiedDate":"2021-10-25"},{"lineNumber":264,"author":{"gitId":"Cyn7hius"},"content":"        addPieChartData(PriorityTag.LowPriority.NAME, pData.getLowCount(), priorityPieChart);","lastModifiedDate":"2021-10-25"},{"lineNumber":265,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":266,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"Cyn7hius":266}},{"path":"src/main/java/seedu/fast/ui/StatsWindowData.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Cyn7hius"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"Cyn7hius"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"Cyn7hius"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.tag.InvestmentPlanTag;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.tag.PriorityTag;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"Cyn7hius"},"content":"public abstract class StatsWindowData {","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"Cyn7hius"},"content":"    private HashMap\u003cString, Integer\u003e counts;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"    public abstract String getMaxName();","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"Cyn7hius"},"content":"    public abstract int getMaxValue();","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"Cyn7hius"},"content":"    public abstract int getTotalCount();","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":"     * Encapsulates the data of the investment plan tags.","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":"    public static class InvestmentPlanData extends StatsWindowData {","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"Cyn7hius"},"content":"        private HashMap\u003cString, Integer\u003e counts \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"Cyn7hius"},"content":"        /**","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"Cyn7hius"},"content":"         * Constructs a new InvestmentPlanData.","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"Cyn7hius"},"content":"         */","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"Cyn7hius"},"content":"        public InvestmentPlanData(int lifeCount, int motorCount, int travelCount, int healthCount,","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"Cyn7hius"},"content":"                                  int propertyCount, int investmentCount, int savingsCount) {","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"Cyn7hius"},"content":"            counts.put(InvestmentPlanTag.LifeInsurance.NAME, lifeCount);","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"Cyn7hius"},"content":"            counts.put(InvestmentPlanTag.MotorInsurance.NAME, motorCount);","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"Cyn7hius"},"content":"            counts.put(InvestmentPlanTag.TravelInsurance.NAME, travelCount);","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"            counts.put(InvestmentPlanTag.HealthInsurance.NAME, healthCount);","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"Cyn7hius"},"content":"            counts.put(InvestmentPlanTag.PropertyInsurance.NAME, propertyCount);","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"Cyn7hius"},"content":"            counts.put(InvestmentPlanTag.Investment.NAME, investmentCount);","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"Cyn7hius"},"content":"            counts.put(InvestmentPlanTag.Savings.NAME, savingsCount);","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"Cyn7hius"},"content":"        // For tie-breakers, the max name is not fixed","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"Cyn7hius"},"content":"        public String getMaxName() {","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"Cyn7hius"},"content":"            return Collections.max(counts.entrySet(), HashMap.Entry.comparingByValue()).getKey();","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"Cyn7hius"},"content":"        public int getMaxValue() {","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"Cyn7hius"},"content":"            return Collections.max(counts.entrySet(), HashMap.Entry.comparingByValue()).getValue();","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"Cyn7hius"},"content":"        public int getTotalCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"Cyn7hius"},"content":"            int sum \u003d 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"Cyn7hius"},"content":"            for (int i : counts.values()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"Cyn7hius"},"content":"                sum +\u003d i;","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"Cyn7hius"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"Cyn7hius"},"content":"            return sum;","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"Cyn7hius"},"content":"        public int getLifeCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"Cyn7hius"},"content":"            return counts.get(InvestmentPlanTag.LifeInsurance.NAME);","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"Cyn7hius"},"content":"        public int getMotorCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"Cyn7hius"},"content":"            return counts.get(InvestmentPlanTag.MotorInsurance.NAME);","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"Cyn7hius"},"content":"        public int getTravelCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"Cyn7hius"},"content":"            return counts.get(InvestmentPlanTag.TravelInsurance.NAME);","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"Cyn7hius"},"content":"        public int getHealthCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"Cyn7hius"},"content":"            return counts.get(InvestmentPlanTag.HealthInsurance.NAME);","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"Cyn7hius"},"content":"        public int getPropertyCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"Cyn7hius"},"content":"            return counts.get(InvestmentPlanTag.PropertyInsurance.NAME);","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"Cyn7hius"},"content":"        public int getInvestmentCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"Cyn7hius"},"content":"            return counts.get(InvestmentPlanTag.Investment.NAME);","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"Cyn7hius"},"content":"        public int getSavingsCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"Cyn7hius"},"content":"            return counts.get(InvestmentPlanTag.Savings.NAME);","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":88,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"Cyn7hius"},"content":"     * Encapsulates the data of the priority tags.","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"Cyn7hius"},"content":"    public static class PriorityData extends StatsWindowData {","lastModifiedDate":"2021-10-25"},{"lineNumber":93,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"Cyn7hius"},"content":"        private HashMap\u003cString, Integer\u003e counts \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"Cyn7hius"},"content":"        /**","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"Cyn7hius"},"content":"         * Constructs a new PriorityData.","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"Cyn7hius"},"content":"         */","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"Cyn7hius"},"content":"        public PriorityData(int highCount, int mediumCount, int lowCount) {","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"Cyn7hius"},"content":"            counts.put(PriorityTag.HighPriority.NAME, highCount);","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"Cyn7hius"},"content":"            counts.put(PriorityTag.MediumPriority.NAME, mediumCount);","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"Cyn7hius"},"content":"            counts.put(PriorityTag.LowPriority.NAME, lowCount);","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"Cyn7hius"},"content":"        // Priorities High \u003e Medium \u003e Low","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"Cyn7hius"},"content":"        public String getMaxName() {","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"Cyn7hius"},"content":"            int maxValue \u003d this.getMaxValue();","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"Cyn7hius"},"content":"            if (this.getHighCount() \u003d\u003d maxValue) {","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"Cyn7hius"},"content":"                return PriorityTag.HighPriority.NAME;","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"Cyn7hius"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"Cyn7hius"},"content":"            if (this.getMediumCount() \u003d\u003d maxValue) {","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"Cyn7hius"},"content":"                return PriorityTag.MediumPriority.NAME;","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"Cyn7hius"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"Cyn7hius"},"content":"            if (this.getLowCount() \u003d\u003d maxValue) {","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"Cyn7hius"},"content":"                return PriorityTag.LowPriority.NAME;","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"Cyn7hius"},"content":"            } else {","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"Cyn7hius"},"content":"                return \"\";","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"Cyn7hius"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"Cyn7hius"},"content":"        public int getMaxValue() {","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"Cyn7hius"},"content":"            return Collections.max(counts.entrySet(), HashMap.Entry.comparingByValue()).getValue();","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"Cyn7hius"},"content":"        public int getTotalCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"Cyn7hius"},"content":"            int sum \u003d 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"Cyn7hius"},"content":"            for (int i : counts.values()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"Cyn7hius"},"content":"                sum +\u003d i;","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"Cyn7hius"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"Cyn7hius"},"content":"            return sum;","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"Cyn7hius"},"content":"        public int getHighCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"Cyn7hius"},"content":"            return counts.get(PriorityTag.HighPriority.NAME);","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"Cyn7hius"},"content":"        public int getMediumCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"Cyn7hius"},"content":"            return counts.get(PriorityTag.MediumPriority.NAME);","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"Cyn7hius"},"content":"        public int getLowCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"Cyn7hius"},"content":"            return counts.get(PriorityTag.LowPriority.NAME);","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":147,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"Cyn7hius":147}},{"path":"src/main/java/seedu/fast/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":1,"-":27}},{"path":"src/main/java/seedu/fast/ui/TagComponent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.Colors;","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.TagUtil;","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"Th-429B"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"Th-429B"},"content":" * A HBox that contains the set of tags and the tag image.","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"Th-429B"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"Th-429B"},"content":"public class TagComponent extends HBox {","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"Th-429B"},"content":"    @FXML","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"Th-429B"},"content":"    private FlowPane tags;","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"Th-429B"},"content":"    @FXML","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"Th-429B"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"Th-429B"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"     * An UI component that contains the set of tags and the icon image.","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"     * @param tagSet The Set of Tags.","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"     * @param img The image of the icon.","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"Th-429B"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"Th-429B"},"content":"    public TagComponent(Set\u003cTag\u003e tagSet, Image img) {","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"Th-429B"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"Th-429B"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/TagComponent.fxml\"));","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"Th-429B"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"Th-429B"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"Th-429B"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"Th-429B"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"Th-429B"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"Th-429B"},"content":"        tagSet.stream()","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"Th-429B"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"Th-429B"},"content":"                .forEach(tag -\u003e tags.getChildren().add(colorSelector(tag.tagName)));","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"Th-429B"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"Th-429B"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"Th-429B"},"content":"     * Selects the color for tags based on their String names.","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"Th-429B"},"content":"     * @param tagName Name of the Tag.","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"Th-429B"},"content":"     * @return Label with color.","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"Th-429B"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"Th-429B"},"content":"    public Label colorSelector(String tagName) {","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"Th-429B"},"content":"        Label temp \u003d new Label(tagName);","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"Th-429B"},"content":"        switch (tagName.toUpperCase()) { //Todo: add more color tags \u0026 abstract out case names","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"Th-429B"},"content":"        case TagUtil.FRIENDS:","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"Th-429B"},"content":"            temp.setStyle(Colors.BLUE);","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"Th-429B"},"content":"            break;","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"Th-429B"},"content":"        case TagUtil.HIGH_PRIORITY:","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"Th-429B"},"content":"            temp.setStyle(Colors.RED);","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"Th-429B"},"content":"            break;","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"Th-429B"},"content":"        case TagUtil.MEDIUM_PRIORITY:","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"Th-429B"},"content":"            temp.setStyle(Colors.ORANGE);","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"Th-429B"},"content":"            break;","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"Th-429B"},"content":"        case TagUtil.LOW_PRIORITY:","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"Th-429B"},"content":"            temp.setStyle(Colors.GREEN);","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"Th-429B"},"content":"            break;","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"trash-bin99"},"content":"        case TagUtil.HEALTH_INSURANCE:","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"trash-bin99"},"content":"            temp.setStyle(Colors.CRIMSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"trash-bin99"},"content":"            break;","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"trash-bin99"},"content":"        case TagUtil.LIFE_INSURANCE:","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"trash-bin99"},"content":"            temp.setStyle(Colors.LIME);","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"trash-bin99"},"content":"            break;","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"trash-bin99"},"content":"        case TagUtil.MOTOR_INSURANCE:","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"trash-bin99"},"content":"            temp.setStyle(Colors.MAGENTA);","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"trash-bin99"},"content":"            break;","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"trash-bin99"},"content":"        case TagUtil.PROPERTY_INSURANCE:","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"trash-bin99"},"content":"            temp.setStyle(Colors.DARK_BLUE);","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"trash-bin99"},"content":"            break;","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"trash-bin99"},"content":"        case TagUtil.TRAVEL_INSURANCE:","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"trash-bin99"},"content":"            temp.setStyle(Colors.PINK);","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"trash-bin99"},"content":"            break;","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"trash-bin99"},"content":"        case TagUtil.INVESTMENT:","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"trash-bin99"},"content":"            temp.setStyle(Colors.TEAL);","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"trash-bin99"},"content":"            break;","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"trash-bin99"},"content":"        case TagUtil.SAVINGS:","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"trash-bin99"},"content":"            temp.setStyle(Colors.PURPLE);","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"trash-bin99"},"content":"            break;","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"Th-429B"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"Th-429B"},"content":"            temp.setStyle(Colors.GREY);","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"Th-429B"},"content":"        return temp;","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":107,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"trash-bin99":28,"Th-429B":79}},{"path":"src/main/java/seedu/fast/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"squeakysquak":1,"-":12}},{"path":"src/main/java/seedu/fast/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.MainApp;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.LogsCenter;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.util.StringUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.Logic;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/FASTIcon.png\";","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"squeakysquak":6,"-":83}},{"path":"src/main/java/seedu/fast/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.MainApp;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"squeakysquak":2,"-":86}},{"path":"src/main/java/seedu/fast/ui/UiUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":" * Contains Image objects of icons used in FAST.","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"public class UiUtil {","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"    public static final Image ADDRESS_IMAGE \u003d new Image(\"/images/address.png\");","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"    public static final Image EMAIL_IMAGE \u003d new Image(\"/images/email.png\");","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"    public static final Image PHONE_IMAGE \u003d new Image(\"/images/phone.png\");","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"    public static final Image TAG_IMAGE \u003d new Image(\"/images/tag.png\");","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":"    public static final Image DATE_IMAGE \u003d new Image(\"/images/date.png\");","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":"    public static final Image TIME_IMAGE \u003d new Image(\"/images/time.png\");","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"Th-429B"},"content":"    public static final Image VENUE_IMAGE \u003d new Image(\"/images/venue.png\");","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"Th-429B":16}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"    -fx-text-fill: #fafafa;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"Cyn7hius"},"content":".chart {","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"Cyn7hius"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"Cyn7hius"},"content":".chart-title {","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"Cyn7hius"},"content":"  -fx-text-fill: #fafafa;","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"Cyn7hius"},"content":"  -fx-font-size: 1.7em;","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"  -fx-underline: true;","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"Cyn7hius"},"content":".chart-pie-label {","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"Cyn7hius"},"content":"    -fx-fill: white;","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"Cyn7hius"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"Cyn7hius"},"content":".default-color0.chart-pie { -fx-pie-color: red; }","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"Cyn7hius"},"content":".default-color1.chart-pie { -fx-pie-color: orange; }","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"Cyn7hius"},"content":".default-color2.chart-pie { -fx-pie-color: green; }","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":127,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":131,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":135,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-08-28"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":156,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"Cyn7hius"},"content":".border-pane {","lastModifiedDate":"2021-10-11"},{"lineNumber":162,"author":{"gitId":"Cyn7hius"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2021-10-11"},{"lineNumber":163,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-11"},{"lineNumber":164,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":165,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":182,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-08-28"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"Cyn7hius"},"content":".button-copy-url {","lastModifiedDate":"2021-10-11"},{"lineNumber":258,"author":{"gitId":"Cyn7hius"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2021-10-11"},{"lineNumber":259,"author":{"gitId":"Cyn7hius"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2021-10-11"},{"lineNumber":260,"author":{"gitId":"Cyn7hius"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2021-10-11"},{"lineNumber":261,"author":{"gitId":"Cyn7hius"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2021-10-11"},{"lineNumber":262,"author":{"gitId":"Cyn7hius"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2021-10-11"},{"lineNumber":263,"author":{"gitId":"Cyn7hius"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-10-11"},{"lineNumber":264,"author":{"gitId":"Cyn7hius"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2021-10-11"},{"lineNumber":265,"author":{"gitId":"Cyn7hius"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2021-10-11"},{"lineNumber":266,"author":{"gitId":"Cyn7hius"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2021-10-11"},{"lineNumber":267,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-11"},{"lineNumber":268,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":269,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"Cyn7hius"},"content":"/*","lastModifiedDate":"2021-10-11"},{"lineNumber":298,"author":{"gitId":"Cyn7hius"},"content":" * Combo box styling","lastModifiedDate":"2021-10-11"},{"lineNumber":299,"author":{"gitId":"Cyn7hius"},"content":" * Author: Anshul Parashar, Roy Shmuli","lastModifiedDate":"2021-10-11"},{"lineNumber":300,"author":{"gitId":"Cyn7hius"},"content":" * Adapted from: https://stackoverflow.com/questions/19343531/javafx-combobox-styling","lastModifiedDate":"2021-10-11"},{"lineNumber":301,"author":{"gitId":"Cyn7hius"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":302,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":303,"author":{"gitId":"Cyn7hius"},"content":".combo-box .list-cell","lastModifiedDate":"2021-10-11"},{"lineNumber":304,"author":{"gitId":"Cyn7hius"},"content":"{","lastModifiedDate":"2021-10-11"},{"lineNumber":305,"author":{"gitId":"Cyn7hius"},"content":"    -fx-background: white;","lastModifiedDate":"2021-10-11"},{"lineNumber":306,"author":{"gitId":"Cyn7hius"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-11"},{"lineNumber":307,"author":{"gitId":"Cyn7hius"},"content":"    -fx-text-fill: -fx-text-base-color;","lastModifiedDate":"2021-10-11"},{"lineNumber":308,"author":{"gitId":"Cyn7hius"},"content":"    -fx-padding: 0 0 0 7;","lastModifiedDate":"2021-10-11"},{"lineNumber":309,"author":{"gitId":"Cyn7hius"},"content":"    -fx-cell-size: 1.66667em;","lastModifiedDate":"2021-10-11"},{"lineNumber":310,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-11"},{"lineNumber":311,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":312,"author":{"gitId":"Cyn7hius"},"content":".combo-box-popup .list-view","lastModifiedDate":"2021-10-11"},{"lineNumber":313,"author":{"gitId":"Cyn7hius"},"content":"{","lastModifiedDate":"2021-10-11"},{"lineNumber":314,"author":{"gitId":"Cyn7hius"},"content":"    -fx-background-color: white, white;","lastModifiedDate":"2021-10-11"},{"lineNumber":315,"author":{"gitId":"Cyn7hius"},"content":"    -fx-background-insets: 0, 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":316,"author":{"gitId":"Cyn7hius"},"content":"    -fx-effect: dropshadow( three-pass-box , rgba(0,0,0,0.6) , 8, 0.0 , 0 , 0 );","lastModifiedDate":"2021-10-11"},{"lineNumber":317,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-11"},{"lineNumber":318,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":319,"author":{"gitId":"Cyn7hius"},"content":".combo-box-popup .list-view .list-cell","lastModifiedDate":"2021-10-11"},{"lineNumber":320,"author":{"gitId":"Cyn7hius"},"content":"{","lastModifiedDate":"2021-10-11"},{"lineNumber":321,"author":{"gitId":"Cyn7hius"},"content":"    -fx-padding: 0 0 0 5;","lastModifiedDate":"2021-10-11"},{"lineNumber":322,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":323,"author":{"gitId":"Cyn7hius"},"content":"    /* No alternate highlighting */","lastModifiedDate":"2021-10-11"},{"lineNumber":324,"author":{"gitId":"Cyn7hius"},"content":"    -fx-background-color: white;","lastModifiedDate":"2021-10-11"},{"lineNumber":325,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-11"},{"lineNumber":326,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":327,"author":{"gitId":"Cyn7hius"},"content":".combo-box-popup .list-view .list-cell:filled:selected, .combo-box-popup .list-view .list-cell:filled:selected:hover","lastModifiedDate":"2021-10-11"},{"lineNumber":328,"author":{"gitId":"Cyn7hius"},"content":"{","lastModifiedDate":"2021-10-11"},{"lineNumber":329,"author":{"gitId":"Cyn7hius"},"content":"    -fx-background: -fx-accent;","lastModifiedDate":"2021-10-11"},{"lineNumber":330,"author":{"gitId":"Cyn7hius"},"content":"    -fx-background-color: -fx-selection-bar;","lastModifiedDate":"2021-10-11"},{"lineNumber":331,"author":{"gitId":"Cyn7hius"},"content":"    -fx-text-fill: -fx-selection-bar-text;","lastModifiedDate":"2021-10-11"},{"lineNumber":332,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-11"},{"lineNumber":333,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":334,"author":{"gitId":"Cyn7hius"},"content":".combo-box-popup .list-view .list-cell:filled:hover","lastModifiedDate":"2021-10-11"},{"lineNumber":335,"author":{"gitId":"Cyn7hius"},"content":"{","lastModifiedDate":"2021-10-11"},{"lineNumber":336,"author":{"gitId":"Cyn7hius"},"content":"    -fx-background-color: white;","lastModifiedDate":"2021-10-11"},{"lineNumber":337,"author":{"gitId":"Cyn7hius"},"content":"    -fx-text-fill: -fx-text-inner-color;","lastModifiedDate":"2021-10-11"},{"lineNumber":338,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-11"},{"lineNumber":339,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":340,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":342,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":344,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":346,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":348,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":354,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":356,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":358,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":363,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":365,"author":{"gitId":"Cyn7hius"},"content":".hbox {","lastModifiedDate":"2021-10-18"},{"lineNumber":366,"author":{"gitId":"Cyn7hius"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2021-10-18"},{"lineNumber":367,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-18"},{"lineNumber":368,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":369,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":371,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":373,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":376,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":378,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":381,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":383,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":385,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":387,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":389,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":391,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":392,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":393,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":395,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":396,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":397,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":398,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":400,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":401,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":402,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":403,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":404,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":405,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":406,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":407,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":408,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":409,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":410,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":411,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":412,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":413,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":414,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":415,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":416,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":417,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":418,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":419,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":420,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":421,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":422,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":423,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":425,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":426,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":427,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":428,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":429,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":430,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":431,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":432,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":433,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":434,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":435,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":436,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"}],"authorContributionMap":{"-":350,"Cyn7hius":86}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"Cyn7hius"},"content":"\u003c?import java.net.*?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"Cyn7hius"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"Cyn7hius"},"content":"\u003c?import javafx.scene.*?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"Cyn7hius"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"Cyn7hius"},"content":"\u003c?import javafx.scene.image.*?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"Cyn7hius"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"Cyn7hius"},"content":"\u003c?import javafx.stage.*?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":11,"author":{"gitId":"Cyn7hius"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\"","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"Cyn7hius"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"    \u003cImage url\u003d\"@/images/helpIcon.png\"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Fonts.css\"/\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"Cyn7hius"},"content":"        \u003cURL value\u003d\"@Extensions.css\"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"Cyn7hius"},"content":"      \u003cBorderPane fx:id\u003d\"mainPane\" styleClass\u003d\"border-pane\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"Cyn7hius"},"content":"        \u003ccenter\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003cHBox alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"Cyn7hius"},"content":"              \u003cLabel fx:id\u003d\"helpMessage\" styleClass\u003d\"label-bright\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                \u003cHBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                  \u003cInsets right\u003d\"5.0\"/\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                \u003c/HBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"              \u003c/Label\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":33,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"Cyn7hius"},"content":"              \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"                      styleClass\u003d\"button-copy-url\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                \u003cHBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                  \u003cInsets left\u003d\"5.0\"/\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                \u003c/HBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"              \u003c/Button\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            \u003c/children\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            \u003copaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"              \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            \u003c/opaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":45,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"              \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"          \u003c/HBox\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":50,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"Cyn7hius"},"content":"        \u003c/center\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"Cyn7hius"},"content":"        \u003cbottom\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"Cyn7hius"},"content":"          \u003cVBox minHeight\u003d\"400.0\" maxHeight\u003d\"Infinity\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" BorderPane.alignment\u003d\"CENTER\"","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"Cyn7hius"},"content":"                VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"Cyn7hius"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"Cyn7hius"},"content":"              \u003cComboBox fx:id\u003d\"commandList\" prefWidth\u003d\"150.0\" promptText\u003d\"(Select a command)\"","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"Cyn7hius"},"content":"                        styleClass\u003d\"combo-box\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"Cyn7hius"},"content":"                \u003cVBox.margin\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"Cyn7hius"},"content":"                  \u003cInsets left\u003d\"5.0\"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"Cyn7hius"},"content":"                \u003c/VBox.margin\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"Cyn7hius"},"content":"              \u003c/ComboBox\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"Cyn7hius"},"content":"              \u003cLabel fx:id\u003d\"commandInstruction\" styleClass\u003d\"label-bright\" text\u003d\"Label\" textAlignment\u003d\"JUSTIFY\"","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"Cyn7hius"},"content":"                     wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"Cyn7hius"},"content":"                \u003cpadding\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"Cyn7hius"},"content":"                  \u003cInsets left\u003d\"10.0\" right\u003d\"5.0\"/\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"Cyn7hius"},"content":"                \u003c/padding\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"Cyn7hius"},"content":"              \u003c/Label\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"Cyn7hius"},"content":"            \u003c/children\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"Cyn7hius"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"Cyn7hius"},"content":"        \u003c/bottom\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"Cyn7hius"},"content":"      \u003c/BorderPane\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-12-01"}],"authorContributionMap":{"-":32,"Cyn7hius":46}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":"         title\u003d\"FAST\" minWidth\u003d\"900\" minHeight\u003d\"700\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"    \u003cImage url\u003d\"@/images/FASTIcon.png\" /\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Fonts.css\"/\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"Cyn7hius"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Stats\"\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"            \u003cMenuItem fx:id\u003d\"statsMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleStats\" text\u003d\"Stats\" /\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"Cyn7hius"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"Cyn7hius"},"content":"                   minHeight\u003d\"150\" prefHeight\u003d\"150\" maxHeight\u003d\"150\"\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2019-01-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"squeakysquak":1,"Py0000":6,"-":51,"Th-429B":1,"Cyn7hius":4}},{"path":"src/main/resources/view/PersonComponent.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"\u003cfx:root spacing\u003d\"1\" alignment\u003d\"TOP_LEFT\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" styleClass\u003d\"cell_small_label\" fitHeight\u003d\"15.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"        \u003cLabel fx:id\u003d\"component\" text\u003d\"Label\" wrapText\u003d\"true\" alignment\u003d\"TOP_CENTER\" styleClass\u003d\"cell_small_label\" textAlignment\u003d\"LEFT\"/\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"Th-429B":12}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"    \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e \u003c!-- Newly added --\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"          \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"          \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"              \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"              \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"          \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" maxWidth\u003d\"550\"/\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"        \u003cVBox fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"Th-429B"},"content":"        \u003cVBox fx:id\u003d\"phone\" prefHeight\u003d\"1.0\" prefWidth\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"Th-429B"},"content":"        \u003cVBox fx:id\u003d\"address\" maxHeight\u003d\"200\" maxWidth\u003d\"550\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":33,"author":{"gitId":"squeakysquak"},"content":"        \u003cVBox fx:id\u003d\"email\" maxHeight\u003d\"200\" maxWidth\u003d\"550\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"    \u003c/HBox\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"    \u003cHBox alignment\u003d\"CENTER_RIGHT\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"15\" bottom\u003d\"5\" left\u003d\"5\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"      \u003cVBox alignment\u003d\"TOP_LEFT\" minHeight\u003d\"105\" minWidth\u003d\"225\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"        \u003cLabel fx:id\u003d\"appointmentHeader\" styleClass\u003d\"cell_small_label\" text\u003d\"Upcoming Appointment\" style\u003d\"-fx-font-weight: bold; -fx-font-size: 15;\"/\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"Th-429B"},"content":"        \u003cVBox fx:id\u003d\"appointmentDate\" prefHeight\u003d\"1.0\" prefWidth\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"Th-429B"},"content":"        \u003cVBox fx:id\u003d\"appointmentTime\" prefHeight\u003d\"1.0\" prefWidth\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"Th-429B"},"content":"        \u003cVBox fx:id\u003d\"appointmentVenue\"  maxHeight\u003d\"105\" maxWidth\u003d\"220\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"        \u003cLabel fx:id\u003d\"border\" styleClass\u003d\"cell_small_label\" text\u003d\"\" /\u003e","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"        \u003cLabel fx:id\u003d\"appointmentCount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$count\" /\u003e","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"    \u003c/HBox\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":2,"Py0000":10,"-":33,"Th-429B":6}},{"path":"src/main/resources/view/StatsWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Cyn7hius"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"Cyn7hius"},"content":"\u003c?import java.net.*?\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"Cyn7hius"},"content":"\u003c?import javafx.scene.*?\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"Cyn7hius"},"content":"\u003c?import javafx.scene.chart.*?\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"Cyn7hius"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"Cyn7hius"},"content":"\u003c?import javafx.scene.image.*?\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"Cyn7hius"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"Cyn7hius"},"content":"\u003c?import javafx.stage.*?\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"Cyn7hius"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Statistics\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"Cyn7hius"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"  \u003cicons\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"    \u003cImage url\u003d\"@/images/statsIcon.png\"/\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"Cyn7hius"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"  \u003cscene\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"Cyn7hius"},"content":"    \u003cScene\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"Cyn7hius"},"content":"        \u003cURL value\u003d\"@Fonts.css\"/\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\"/\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"Cyn7hius"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"Cyn7hius"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"Cyn7hius"},"content":"          \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"hbox\"\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"Cyn7hius"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"Cyn7hius"},"content":"              \u003cPieChart fx:id\u003d\"priorityPieChart\" title\u003d\"Priority Count\"/\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"Cyn7hius"},"content":"              \u003cLabel fx:id\u003d\"priorityPieChartDesc\" maxWidth\u003d\"150.0\" minWidth\u003d\"150.0\" prefWidth\u003d\"150.0\"","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"Cyn7hius"},"content":"                     styleClass\u003d\"label-bright\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"Cyn7hius"},"content":"            \u003c/children\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"Cyn7hius"},"content":"          \u003c/HBox\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"Cyn7hius"},"content":"          \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"hbox\"\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"Cyn7hius"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"Cyn7hius"},"content":"              \u003cPieChart fx:id\u003d\"investmentPlanPieChart\" title\u003d\"Investment plans count\"/\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"Cyn7hius"},"content":"              \u003cLabel fx:id\u003d\"investmentPlanPieChartDesc\" maxWidth\u003d\"150.0\" minWidth\u003d\"150.0\" prefWidth\u003d\"150.0\"","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"                     styleClass\u003d\"label-bright\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"Cyn7hius"},"content":"            \u003c/children\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"Cyn7hius"},"content":"          \u003c/HBox\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"Cyn7hius"},"content":"        \u003c/children\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"Cyn7hius"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"Cyn7hius"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"Cyn7hius"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"Cyn7hius":42}},{"path":"src/main/resources/view/TagComponent.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"\u003cfx:root spacing\u003d\"1\" alignment\u003d\"TOP_LEFT\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" styleClass\u003d\"cell_small_label\" fitHeight\u003d\"15.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"        \u003cFlowPane fx:id\u003d\"tags\" styleClass\u003d\"cell_small_label\" hgap\u003d\"5\"/\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"Th-429B":12}},{"path":"src/test/data/JsonSerializableFastTest/duplicatePersonFast.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"    \"tagged\": [ \"friends\" ],","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"    \"appointmentDate\": \"10 Oct 2021\",","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"    \"appointmentTime\" : \"\",","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"    \"appointmentVenue\" : \"\",","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"    \"appointmentCount\" : \"10\"","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\",","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"    \"appointmentDate\": \"10 Oct 2021\",","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"    \"appointmentTime\" : \"\",","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"    \"appointmentVenue\" : \"\",","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"    \"appointmentCount\" : \"10\"","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Py0000":10,"-":14}},{"path":"src/test/data/JsonSerializableFastTest/typicalPersonsFast.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\",","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"remark\" : \"\",","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"    \"tagged\" : [ \"friends\" ],","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"    \"appointmentDate\": \"No Appointment Scheduled Yet\",","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"    \"appointmentTime\" : \"\",","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"    \"appointmentVenue\" : \"\",","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"    \"appointmentCount\" : \"0\"","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"remark\" : \"\",","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ],","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"    \"appointmentDate\": \"10 Oct 2021\",","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"    \"appointmentTime\" : \"\",","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"    \"appointmentVenue\" : \"\",","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"    \"appointmentCount\" : \"0\"","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"remark\" : \"\",","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"    \"tagged\" : [ ],","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"    \"appointmentDate\": \"No Appointment Scheduled Yet\",","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"    \"appointmentTime\" : \"\",","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"    \"appointmentVenue\" : \"\",","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"    \"appointmentCount\" : \"0\"","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"remark\" : \"\",","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"    \"tagged\" : [ \"friends\" ],","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"    \"appointmentDate\": \"No Appointment Scheduled Yet\",","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"    \"appointmentTime\" : \"\",","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"    \"appointmentVenue\" : \"\",","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"    \"appointmentCount\" : \"0\"","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\",","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \"remark\" : \"\",","lastModifiedDate":"2021-09-13"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"    \"tagged\" : [ ],","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"    \"appointmentDate\": \"12 Oct 2021 1000hrs\",","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"    \"appointmentTime\" : \"\",","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"    \"appointmentVenue\" : \"\",","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"    \"appointmentCount\" : \"0\"","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\",","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    \"remark\" : \"\",","lastModifiedDate":"2021-09-13"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"    \"tagged\" : [ ],","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"    \"appointmentDate\": \"11 Oct 2021\",","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"    \"appointmentTime\" : \"\",","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"    \"appointmentVenue\" : \"\",","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"    \"appointmentCount\" : \"1\"","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    \"remark\" : \"\",","lastModifiedDate":"2021-09-13"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"    \"tagged\" : [ ],","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"    \"appointmentDate\": \"No Appointment Scheduled Yet\",","lastModifiedDate":"2021-10-28"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"    \"appointmentTime\" : \"\",","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"    \"appointmentVenue\" : \"\",","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"    \"appointmentCount\" : \"3\"","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Py0000":35,"-":46}},{"path":"src/test/java/seedu/fast/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"squeakysquak":1,"-":57}},{"path":"src/test/java/seedu/fast/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.core;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"squeakysquak":1,"-":26}},{"path":"src/test/java/seedu/fast/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.core;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":2,"-":133}},{"path":"src/test/java/seedu/fast/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.core.index;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"squeakysquak":2,"-":58}},{"path":"src/test/java/seedu/fast/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"        assertNotNull(AppUtil.getImage(\"/images/FASTIcon.png\"));","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"squeakysquak":3,"-":33}},{"path":"src/test/java/seedu/fast/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"squeakysquak":3,"-":105}},{"path":"src/test/java/seedu/fast/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.Config;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"squeakysquak":4,"-":112}},{"path":"src/test/java/seedu/fast/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":2,"-":21}},{"path":"src/test/java/seedu/fast/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.SerializableTestClass;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.TestUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":3,"-":42}},{"path":"src/test/java/seedu/fast/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.commons.util;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsQueryIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(IllegalArgumentException.class, \"Query parameter cannot be empty\", ()","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"squeakysquak"},"content":"            -\u003e StringUtil.containsQueryIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(IllegalArgumentException.class, \"Query parameter should be a single word\", ()","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"squeakysquak"},"content":"            -\u003e StringUtil.containsQueryIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsQueryIgnoreCase(null, \"abc\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"squeakysquak"},"content":"        assertFalse(StringUtil.containsQueryIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2021-10-19"},{"lineNumber":109,"author":{"gitId":"squeakysquak"},"content":"        assertFalse(StringUtil.containsQueryIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"squeakysquak"},"content":"        assertFalse(StringUtil.containsQueryIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2021-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"squeakysquak"},"content":"        assertTrue(StringUtil.containsQueryIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2021-10-19"},{"lineNumber":116,"author":{"gitId":"squeakysquak"},"content":"        assertTrue(StringUtil.containsQueryIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2021-10-19"},{"lineNumber":117,"author":{"gitId":"squeakysquak"},"content":"        assertTrue(StringUtil.containsQueryIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2021-10-19"},{"lineNumber":118,"author":{"gitId":"squeakysquak"},"content":"        assertTrue(StringUtil.containsQueryIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2021-10-19"},{"lineNumber":119,"author":{"gitId":"squeakysquak"},"content":"        assertTrue(StringUtil.containsQueryIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2021-10-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"squeakysquak"},"content":"        assertTrue(StringUtil.containsQueryIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":123,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":124,"author":{"gitId":"squeakysquak"},"content":"        // Can search for the start of a sentence word","lastModifiedDate":"2021-10-18"},{"lineNumber":125,"author":{"gitId":"squeakysquak"},"content":"        assertTrue(StringUtil.containsQueryIgnoreCase(\"aab abc cca\", \"ab\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":126,"author":{"gitId":"squeakysquak"},"content":"        assertTrue(StringUtil.containsQueryIgnoreCase(\"aab aBc cca\", \"Ab\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"squeakysquak":21,"-":125}},{"path":"src/test/java/seedu/fast/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.AddCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.CommandResult;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.DeleteCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.ListCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.storage.JsonFastStorage;","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.storage.StorageManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"squeakysquak"},"content":"        JsonFastStorage addressBookStorage \u003d","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"squeakysquak"},"content":"                new JsonFastStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"squeakysquak"},"content":"        String deleteCommand \u003d DeleteCommand.COMMAND_WORD + \" 9\";","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"squeakysquak"},"content":"        JsonFastStorage addressBookStorage \u003d","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"squeakysquak"},"content":"                new JsonFastIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"squeakysquak"},"content":"        Model expectedModel \u003d new ModelManager(model.getFast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"squeakysquak"},"content":"    private static class JsonFastIoExceptionThrowingStub extends JsonFastStorage {","lastModifiedDate":"2021-10-01"},{"lineNumber":154,"author":{"gitId":"squeakysquak"},"content":"        private JsonFastIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2021-10-01"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"squeakysquak"},"content":"        public void saveFast(ReadOnlyFast fast, Path filePath) throws IOException {","lastModifiedDate":"2021-10-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"squeakysquak":33,"-":130}},{"path":"src/test/java/seedu/fast/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"        model \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"        Model expectedModel \u003d new ModelManager(model.getFast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":41,"author":{"gitId":"squeakysquak"},"content":"        Person personInList \u003d model.getFast().getPersonList().get(0);","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"squeakysquak":12,"-":33}},{"path":"src/test/java/seedu/fast/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.GuiSettings;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"squeakysquak"},"content":"        public Path getFastFilePath() {","lastModifiedDate":"2021-10-01"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"squeakysquak"},"content":"        public void setFastFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":118,"author":{"gitId":"squeakysquak"},"content":"        public void setFast(ReadOnlyFast newData) {","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"squeakysquak"},"content":"        public ReadOnlyFast getFast() {","lastModifiedDate":"2021-10-01"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"Th-429B"},"content":"        @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":143,"author":{"gitId":"Th-429B"},"content":"        public void sortPerson(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"Th-429B"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-05"},{"lineNumber":145,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":146,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":195,"author":{"gitId":"squeakysquak"},"content":"        public ReadOnlyFast getFast() {","lastModifiedDate":"2021-10-01"},{"lineNumber":196,"author":{"gitId":"squeakysquak"},"content":"            return new Fast();","lastModifiedDate":"2021-10-01"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"squeakysquak":16,"-":178,"Th-429B":6}},{"path":"src/test/java/seedu/fast/logic/commands/AppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_AMY;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_BOB;","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"public class AppointmentCommandTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"    private final Model model \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"    public void equals() {","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"        final AppointmentCommand standardCommand \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand commandWithSameValues \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new AppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY))));","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"        // different appointment -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_BOB))));","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"        // different appointment date -\u003e return false","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY))));","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"        //different appointment time -\u003e return false","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_AMY))));","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"        // different appointment venue -\u003e return false","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_BOB))));","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand apptCommand \u003d new AppointmentCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_BOB));","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(apptCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"    // without time, without venue","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"    public void execute_addAppointmentWithoutAdditionUnfilteredList_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"        Person thirdPerson \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(thirdPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand appointmentCommand \u003d new AppointmentCommand(INDEX_THIRD_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(AppointmentCommand.MESSAGE_ADD_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(thirdPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"    // with time, with venue","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"    public void execute_addAppointmentWithAdditionUnfilteredList_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(firstPerson)","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_BOB)","lastModifiedDate":"2021-10-14"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand appointmentCommand \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-06"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTime(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(AppointmentCommand.MESSAGE_ADD_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-06"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-06"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-06"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"    // with time, without venue","lastModifiedDate":"2021-10-10"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"    public void execute_addAppointmentWithTimeUnfilteredList_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"Py0000"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(firstPerson)","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand appointmentCommand \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTime(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(AppointmentCommand.MESSAGE_ADD_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":142,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":143,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":145,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"    //without time, with venue","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"    public void execute_addAppointmentWithVenueUnfilteredList_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"Py0000"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(firstPerson)","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_BOB)","lastModifiedDate":"2021-10-14"},{"lineNumber":156,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":157,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand appointmentCommand \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-15"},{"lineNumber":161,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(AppointmentCommand.MESSAGE_ADD_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":164,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":165,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2021-10-10"},{"lineNumber":168,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":169,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":170,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":171,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":172,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":173,"author":{"gitId":"Py0000"},"content":"    public void execute_addAppointmentWithExistingUnfilteredList_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":174,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":175,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_BOB)","lastModifiedDate":"2021-10-14"},{"lineNumber":177,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":178,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-10"},{"lineNumber":179,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":180,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand appointmentCommand \u003d new AppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-06"},{"lineNumber":181,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTime(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-10"},{"lineNumber":182,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":183,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d AppointmentCommand.MESSAGE_ADD_APPOINTMENT_FAILURE;","lastModifiedDate":"2021-10-14"},{"lineNumber":184,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":185,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(appointmentCommand, model, expectedMessage);","lastModifiedDate":"2021-10-14"},{"lineNumber":186,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":187,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":188,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":189,"author":{"gitId":"Py0000"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2021-10-10"},{"lineNumber":190,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":191,"author":{"gitId":"Py0000"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":192,"author":{"gitId":"Py0000"},"content":"        // ensures that outOfBoundIndex is still in bounds of FAST list","lastModifiedDate":"2021-10-10"},{"lineNumber":193,"author":{"gitId":"Py0000"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFast().getPersonList().size());","lastModifiedDate":"2021-10-10"},{"lineNumber":194,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":195,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand apptCommand \u003d new AppointmentCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-10"},{"lineNumber":196,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_BOB));","lastModifiedDate":"2021-10-10"},{"lineNumber":197,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(apptCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-10"},{"lineNumber":198,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":199,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":200,"author":{"gitId":"Py0000"},"content":"    // without time, without venue","lastModifiedDate":"2021-10-10"},{"lineNumber":201,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":202,"author":{"gitId":"Py0000"},"content":"    public void execute_addAppointmentWithoutAdditionFilteredList_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":203,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":204,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":205,"author":{"gitId":"Py0000"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":206,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList()","lastModifiedDate":"2021-10-10"},{"lineNumber":207,"author":{"gitId":"Py0000"},"content":"                .get(INDEX_FIRST_PERSON.getZeroBased()))","lastModifiedDate":"2021-10-10"},{"lineNumber":208,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":209,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":210,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-10"},{"lineNumber":211,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":212,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand appointmentCommand \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":213,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-15"},{"lineNumber":214,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":215,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(AppointmentCommand.MESSAGE_ADD_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":216,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":217,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-10"},{"lineNumber":218,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":219,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":220,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2021-10-10"},{"lineNumber":221,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":222,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":223,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":224,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":225,"author":{"gitId":"Py0000"},"content":"    // with time, with venue","lastModifiedDate":"2021-10-10"},{"lineNumber":226,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":227,"author":{"gitId":"Py0000"},"content":"    public void execute_addAppointmentWithAdditionFilteredList_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":228,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-06"},{"lineNumber":229,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":230,"author":{"gitId":"Py0000"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":231,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList()","lastModifiedDate":"2021-10-06"},{"lineNumber":232,"author":{"gitId":"Py0000"},"content":"                .get(INDEX_FIRST_PERSON.getZeroBased()))","lastModifiedDate":"2021-10-06"},{"lineNumber":233,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_BOB)","lastModifiedDate":"2021-10-14"},{"lineNumber":234,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":235,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-10"},{"lineNumber":236,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":237,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand appointmentCommand \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-06"},{"lineNumber":238,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTime(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-10"},{"lineNumber":239,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":240,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(AppointmentCommand.MESSAGE_ADD_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-06"},{"lineNumber":241,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":242,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-10"},{"lineNumber":243,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":244,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":245,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2021-10-10"},{"lineNumber":246,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":247,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":248,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":249,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":250,"author":{"gitId":"Py0000"},"content":"    // with time, without venue","lastModifiedDate":"2021-10-10"},{"lineNumber":251,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":252,"author":{"gitId":"Py0000"},"content":"    public void execute_addAppointmentWithTimeFilteredList_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":253,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":254,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":255,"author":{"gitId":"Py0000"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":256,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList()","lastModifiedDate":"2021-10-10"},{"lineNumber":257,"author":{"gitId":"Py0000"},"content":"                .get(INDEX_FIRST_PERSON.getZeroBased()))","lastModifiedDate":"2021-10-10"},{"lineNumber":258,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":259,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":260,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-10"},{"lineNumber":261,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":262,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand appointmentCommand \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":263,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTime(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-10"},{"lineNumber":264,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":265,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(AppointmentCommand.MESSAGE_ADD_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":266,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":267,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-10"},{"lineNumber":268,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":269,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":270,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2021-10-10"},{"lineNumber":271,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":272,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":273,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":274,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":275,"author":{"gitId":"Py0000"},"content":"    // without time, with venue","lastModifiedDate":"2021-10-10"},{"lineNumber":276,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":277,"author":{"gitId":"Py0000"},"content":"    public void execute_addAppointmentWithVenueFilteredList_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":278,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":279,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":280,"author":{"gitId":"Py0000"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":281,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList()","lastModifiedDate":"2021-10-10"},{"lineNumber":282,"author":{"gitId":"Py0000"},"content":"                .get(INDEX_FIRST_PERSON.getZeroBased()))","lastModifiedDate":"2021-10-10"},{"lineNumber":283,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_BOB)","lastModifiedDate":"2021-10-14"},{"lineNumber":284,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":285,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-10"},{"lineNumber":286,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":287,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand appointmentCommand \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":288,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-15"},{"lineNumber":289,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":290,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(AppointmentCommand.MESSAGE_ADD_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":291,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":292,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-10"},{"lineNumber":293,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":294,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":295,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2021-10-10"},{"lineNumber":296,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":297,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":298,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":299,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":300,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":301,"author":{"gitId":"Py0000"},"content":"    public void execute_addAppointmentWithExistingFilteredList_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":302,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":303,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":304,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":305,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":306,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_BOB)","lastModifiedDate":"2021-10-14"},{"lineNumber":307,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":308,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-10"},{"lineNumber":309,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":310,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand appointmentCommand \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":311,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTime(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-10"},{"lineNumber":312,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":313,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d AppointmentCommand.MESSAGE_ADD_APPOINTMENT_FAILURE;","lastModifiedDate":"2021-10-14"},{"lineNumber":314,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":315,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(appointmentCommand, model, expectedMessage);","lastModifiedDate":"2021-10-14"},{"lineNumber":316,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":317,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Py0000":317}},{"path":"src/test/java/seedu/fast/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"    public void execute_emptyFast_success() {","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"    public void execute_nonEmptyFast_success() {","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"        Model model \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"        expectedModel.setFast(new Fast());","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"squeakysquak":12,"-":20}},{"path":"src/test/java/seedu/fast/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"    public void isShowHelp() {","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"        // same value","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"        CommandResult commandResult1 \u003d new CommandResult(\"feedback\", true, true);","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"        assertTrue(commandResult1.isShowHelp() \u003d\u003d true);","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"        // different value","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"        CommandResult commandResult2 \u003d new CommandResult(\"feedback\", false, false);","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"        assertFalse(commandResult2.isShowHelp() \u003d\u003d commandResult1.isShowHelp());","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"    public void isExit() {","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"        // same value","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"        CommandResult commandResult1 \u003d new CommandResult(\"feedback\", true, true);","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"        assertTrue(commandResult1.isExit() \u003d\u003d true);","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"        // different value","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"        CommandResult commandResult2 \u003d new CommandResult(\"feedback\", false, false);","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"        assertFalse(commandResult2.isExit() \u003d\u003d commandResult1.isExit());","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"squeakysquak":1,"Py0000":22,"-":53}},{"path":"src/test/java/seedu/fast/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.NameContainsQueriesPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"import seedu.fast.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"trash-bin99"},"content":"    public static final String VALID_TAG_LOWPRIORITY \u003d \"LowPriority\";","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"trash-bin99"},"content":"    public static final String VALID_TAG_INVESTMENT \u003d \"Investment\";","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"    public static final String VALID_REMARK_AMY \u003d \"Loves to eat!\";","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"    public static final String VALID_REMARK_BOB \u003d \"Loves to talk to his plant!\";","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"    public static final String VALID_APPOINTMENT_AMY \u003d \"No Appointment Scheduled Yet\";","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"    public static final String VALID_APPOINTMENT_TIME_AMY \u003d \"\";","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"    public static final String VALID_APPOINTMENT_VENUE_AMY \u003d \"\";","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"    public static final String VALID_APPOINTMENT_BOB \u003d \"10 Oct 2025\";","lastModifiedDate":"2021-10-30"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"    public static final String VALID_APPOINTMENT_TIME_BOB \u003d \"0530\";","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"    public static final String VALID_APPOINTMENT_VENUE_BOB \u003d \"Suntec City\";","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"    public static final String VALID_APPOINTMENT_INPUT \u003d \"2025-10-10\";","lastModifiedDate":"2021-10-30"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"    public static final String VALID_APPOINTMENT_TIME_INPUT \u003d \"05:30\";","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"    public static final EditAppointmentDescriptor APPT_DES_AMY \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"            .withDate(VALID_APPOINTMENT_AMY).withTime(VALID_APPOINTMENT_TIME_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"            .withVenue(VALID_APPOINTMENT_VENUE_AMY).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"    public static final EditAppointmentDescriptor APPT_DES_BOB \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"            .withDate(VALID_APPOINTMENT_BOB).withTime(VALID_APPOINTMENT_TIME_BOB)","lastModifiedDate":"2021-10-14"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"            .withVenue(VALID_APPOINTMENT_VENUE_BOB).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel,","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"            CommandResult expectedCommandResult, Model expectedModel) {","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"squeakysquak"},"content":"        Fast expectedAddressBook \u003d new Fast(actualModel.getFast());","lastModifiedDate":"2021-10-01"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":133,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(expectedAddressBook, actualModel.getFast());","lastModifiedDate":"2021-10-01"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":137,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":138,"author":{"gitId":"Py0000"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":140,"author":{"gitId":"Py0000"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":141,"author":{"gitId":"Py0000"},"content":"     * - model is modified until the first detect invalid input","lastModifiedDate":"2021-10-22"},{"lineNumber":142,"author":{"gitId":"Py0000"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} is changed","lastModifiedDate":"2021-10-22"},{"lineNumber":143,"author":{"gitId":"Py0000"},"content":"     * until the first detect invalid input.","lastModifiedDate":"2021-10-22"},{"lineNumber":144,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":145,"author":{"gitId":"Py0000"},"content":"    // use for multiple delete","lastModifiedDate":"2021-10-22"},{"lineNumber":146,"author":{"gitId":"Py0000"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, Model expectedModel,","lastModifiedDate":"2021-10-22"},{"lineNumber":147,"author":{"gitId":"Py0000"},"content":"                                            String expectedMessage) {","lastModifiedDate":"2021-10-22"},{"lineNumber":148,"author":{"gitId":"Py0000"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2021-10-22"},{"lineNumber":149,"author":{"gitId":"Py0000"},"content":"        // only do so by copying its components.","lastModifiedDate":"2021-10-22"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"        Fast expectedAddressBook \u003d new Fast(expectedModel.getFast());","lastModifiedDate":"2021-10-22"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-22"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":153,"author":{"gitId":"Py0000"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2021-10-22"},{"lineNumber":154,"author":{"gitId":"Py0000"},"content":"        assertEquals(expectedAddressBook, actualModel.getFast());","lastModifiedDate":"2021-10-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2021-10-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":157,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":167,"author":{"gitId":"squeakysquak"},"content":"        model.updateFilteredPersonList(new NameContainsQueriesPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2021-10-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"squeakysquak":16,"trash-bin99":2,"Py0000":43,"-":111}},{"path":"src/test/java/seedu/fast/logic/commands/DeleteAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"public class DeleteAppointmentCommandTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"    private final Model model \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"    public void equals() {","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"        final DeleteAppointmentCommand standardCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"        DeleteAppointmentCommand commandWithSameValues \u003d new DeleteAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new DeleteAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY))));","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"        DeleteAppointmentCommand apptCommand \u003d new DeleteAppointmentCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(apptCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"    public void execute_deleteAppointmentUnfilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"        DeleteAppointmentCommand appointmentCommand \u003d new DeleteAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName);","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"    public void execute_deleteAppointmentUnfilteredList_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(firstPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"        DeleteAppointmentCommand appointmentCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_FAILED,","lastModifiedDate":"2021-10-14"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName);","lastModifiedDate":"2021-10-14"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(appointmentCommand, model, expectedMessage);","lastModifiedDate":"2021-10-14"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2021-10-15"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"        // ensures that outOfBoundIndex is still in bounds of FAST list","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFast().getPersonList().size());","lastModifiedDate":"2021-10-15"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"        DeleteAppointmentCommand apptCommand \u003d new DeleteAppointmentCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-15"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(apptCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-15"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"    public void execute_deleteAppointmentFilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"        DeleteAppointmentCommand appointmentCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-15"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName);","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"    public void execute_deleteAppointmentFilteredList_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":137,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_THIRD_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"        Person thirdPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(thirdPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":141,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":143,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":144,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":145,"author":{"gitId":"Py0000"},"content":"        DeleteAppointmentCommand appointmentCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":146,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-15"},{"lineNumber":147,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":148,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_FAILED,","lastModifiedDate":"2021-10-14"},{"lineNumber":149,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName);","lastModifiedDate":"2021-10-14"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(appointmentCommand, model, expectedMessage);","lastModifiedDate":"2021-10-14"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":153,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":153}},{"path":"src/test/java/seedu/fast/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"    private Model model \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"    public void execute_validSingleIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_PERSON});","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_SINGLE_DELETE_SUCCESS, personToDelete);","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"squeakysquak"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getFast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {outOfBoundIndex});","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_PERSON});","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_SINGLE_DELETE_SUCCESS, personToDelete);","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"squeakysquak"},"content":"        Model expectedModel \u003d new ModelManager(model.getFast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"squeakysquak"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFast().getPersonList().size());","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {outOfBoundIndex});","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"        DeleteCommand singleDeleteFirstCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_PERSON});","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"        DeleteCommand singleDeleteSecondCommand \u003d new DeleteCommand(new Index[] {INDEX_SECOND_PERSON});","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"        DeleteCommand multipleDeleteFirstCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"            INDEX_SECOND_PERSON});","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"        DeleteCommand multipleDeleteSecondCommand \u003d new DeleteCommand(new Index[] {INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"            INDEX_FIRST_PERSON});","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"        assertTrue(singleDeleteFirstCommand.equals(singleDeleteFirstCommand));","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"        assertTrue(multipleDeleteFirstCommand.equals(multipleDeleteFirstCommand));","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"        DeleteCommand singleDeleteFirstCommandCopy \u003d new DeleteCommand(new Index[] {INDEX_FIRST_PERSON});","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"        assertTrue(singleDeleteFirstCommand.equals(singleDeleteFirstCommandCopy));","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"        DeleteCommand multipleDeleteSecondCommandCopy \u003d new DeleteCommand(new Index[] {INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"            INDEX_FIRST_PERSON});","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"        assertTrue(multipleDeleteSecondCommandCopy.equals(multipleDeleteSecondCommandCopy));","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"        assertFalse(singleDeleteFirstCommand.equals(1));","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"        assertFalse(singleDeleteFirstCommand.equals(null));","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"        assertFalse(singleDeleteFirstCommand.equals(singleDeleteSecondCommand));","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"        assertFalse(multipleDeleteFirstCommand.equals(multipleDeleteSecondCommand));","lastModifiedDate":"2021-10-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"    // Multiple Delete Tests","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"    public void execute_validMultipleIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"        Person personToDelete1 \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"        Person personToDelete2 \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-22"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_PERSON, INDEX_SECOND_PERSON});","lastModifiedDate":"2021-10-22"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_MULTIPLE_DELETE_SUCCESS, 2);","lastModifiedDate":"2021-10-22"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getFast(), new UserPrefs());","lastModifiedDate":"2021-10-22"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"        expectedModel.deletePerson(personToDelete1);","lastModifiedDate":"2021-10-22"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"        expectedModel.deletePerson(personToDelete2);","lastModifiedDate":"2021-10-22"},{"lineNumber":131,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-22"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"    public void execute_invalidMultipleIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":137,"author":{"gitId":"Py0000"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-22"},{"lineNumber":138,"author":{"gitId":"Py0000"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_PERSON, outOfBoundIndex});","lastModifiedDate":"2021-10-22"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":140,"author":{"gitId":"Py0000"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getFast(), new UserPrefs());","lastModifiedDate":"2021-10-22"},{"lineNumber":141,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":142,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_MULTIPLE_DELETE_INVALID_INDEX_DETECTED,","lastModifiedDate":"2021-10-22"},{"lineNumber":143,"author":{"gitId":"Py0000"},"content":"                outOfBoundIndex.getOneBased());","lastModifiedDate":"2021-10-30"},{"lineNumber":144,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":145,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(deleteCommand, model, expectedModel, expectedMessage);","lastModifiedDate":"2021-10-22"},{"lineNumber":146,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":147,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":148,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":149,"author":{"gitId":"Py0000"},"content":"    public void execute_multipleIndexExceedLimitUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"        Index[] array \u003d new Index[11];","lastModifiedDate":"2021-10-22"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"        for (int i \u003d 0; i \u003c 11; i++) {","lastModifiedDate":"2021-10-22"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"            array[i] \u003d Index.fromOneBased(i + 1);","lastModifiedDate":"2021-10-22"},{"lineNumber":153,"author":{"gitId":"Py0000"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":154,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":155,"author":{"gitId":"Py0000"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(array);","lastModifiedDate":"2021-10-22"},{"lineNumber":156,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_MULTIPLE_DELETE_FAILED_EXCEED_LIMIT);","lastModifiedDate":"2021-10-22"},{"lineNumber":157,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(deleteCommand, model, expectedMessage);","lastModifiedDate":"2021-10-22"},{"lineNumber":158,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":159,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":160,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":161,"author":{"gitId":"Py0000"},"content":"    public void execute_multipleIndexDuplicatedUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":162,"author":{"gitId":"Py0000"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {INDEX_SECOND_PERSON, INDEX_SECOND_PERSON});","lastModifiedDate":"2021-10-22"},{"lineNumber":163,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_MULTIPLE_DELETE_FAILED_DUPLICATES);","lastModifiedDate":"2021-10-22"},{"lineNumber":164,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(deleteCommand, model, expectedMessage);","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":166,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":167,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":168,"author":{"gitId":"Py0000"},"content":"    public void execute_invalidMultipleIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":169,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-22"},{"lineNumber":170,"author":{"gitId":"Py0000"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {INDEX_SECOND_PERSON, INDEX_FIRST_PERSON});","lastModifiedDate":"2021-10-22"},{"lineNumber":171,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_MULTIPLE_DELETE_FAILED_WITHIN_LIMIT);","lastModifiedDate":"2021-10-22"},{"lineNumber":172,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(deleteCommand, model, expectedMessage);","lastModifiedDate":"2021-10-22"},{"lineNumber":173,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"squeakysquak":17,"Py0000":80,"-":77}},{"path":"src/test/java/seedu/fast/logic/commands/EditAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.APPT_DES_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.APPT_DES_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"import seedu.fast.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"public class EditAppointmentCommandTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"    private final Model model \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"    public void equals() {","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"        final EditAppointmentCommand standardCommand \u003d new EditAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"                APPT_DES_AMY);","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor copyDescriptor \u003d new EditAppointmentDescriptor(APPT_DES_AMY);","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand commandWithSameValues \u003d new EditAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"                copyDescriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new EditAppointmentCommand(INDEX_SECOND_PERSON, APPT_DES_AMY)));","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"        // different appointment -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new EditAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(APPT_DES_BOB))));","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"        // ensures that outOfBoundIndex is still in bounds of FAST list","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFast().getPersonList().size());","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand apptCommand \u003d new EditAppointmentCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(APPT_DES_BOB));","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(apptCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"    public void execute_allFieldsSpecifiedFilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_BOB)","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor desc \u003d new EditAppointmentDescriptorBuilder(editedAppt).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand appointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(desc));","lastModifiedDate":"2021-10-14"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_UPDATE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"    public void execute_twoFieldsSpecifiedFilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_BOB)","lastModifiedDate":"2021-10-14"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor desc \u003d new EditAppointmentDescriptorBuilder(editedAppt).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand appointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(desc));","lastModifiedDate":"2021-10-14"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_UPDATE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"    public void execute_dateFieldSpecifiedFilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor desc \u003d new EditAppointmentDescriptorBuilder(editedAppt).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":137,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand appointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(desc));","lastModifiedDate":"2021-10-14"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_UPDATE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":141,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":142,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":143,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":144,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":145,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":146,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":147,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":148,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":149,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"    public void execute_timeFieldSpecifiedFilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":153,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":154,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":155,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-15"},{"lineNumber":156,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":157,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":158,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor desc \u003d new EditAppointmentDescriptorBuilder(editedAppt).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":159,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":160,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand appointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":161,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(desc));","lastModifiedDate":"2021-10-14"},{"lineNumber":162,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":163,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_UPDATE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":164,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":165,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":166,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":167,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":168,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":169,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":170,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":171,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":172,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":173,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":174,"author":{"gitId":"Py0000"},"content":"    public void execute_venueFieldSpecifiedFilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":175,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":176,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":177,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":178,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_BOB)","lastModifiedDate":"2021-10-15"},{"lineNumber":179,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":180,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":181,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor desc \u003d new EditAppointmentDescriptorBuilder(editedAppt).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":182,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":183,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand appointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":184,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(desc));","lastModifiedDate":"2021-10-14"},{"lineNumber":185,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":186,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_UPDATE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":187,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":188,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":189,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":190,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":191,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":192,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":193,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":194,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":195,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":196,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":197,"author":{"gitId":"Py0000"},"content":"    public void execute_editNonExistingAppointmentFilteredList_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":198,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_THIRD_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":199,"author":{"gitId":"Py0000"},"content":"        Person thirdPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":200,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(thirdPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":201,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_BOB)","lastModifiedDate":"2021-10-15"},{"lineNumber":202,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":203,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":204,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor desc \u003d new EditAppointmentDescriptorBuilder(editedAppt).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":205,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":206,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand appointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":207,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(desc));","lastModifiedDate":"2021-10-14"},{"lineNumber":208,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":209,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d EditAppointmentCommand.MESSAGE_UPDATE_APPOINTMENT_ERROR;","lastModifiedDate":"2021-10-14"},{"lineNumber":210,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":211,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(appointmentCommand, model, expectedMessage);","lastModifiedDate":"2021-10-14"},{"lineNumber":212,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":213,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":214,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":215,"author":{"gitId":"Py0000"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":216,"author":{"gitId":"Py0000"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-14"},{"lineNumber":217,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand apptCommand \u003d new EditAppointmentCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-14"},{"lineNumber":218,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(APPT_DES_BOB));","lastModifiedDate":"2021-10-14"},{"lineNumber":219,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":220,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(apptCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-14"},{"lineNumber":221,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":222,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":223,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":224,"author":{"gitId":"Py0000"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":225,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":226,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":227,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_BOB)","lastModifiedDate":"2021-10-15"},{"lineNumber":228,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":229,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":230,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor desc \u003d new EditAppointmentDescriptorBuilder(editedAppt).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":231,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":232,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand appointmentCommand \u003d new EditAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":233,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(desc));","lastModifiedDate":"2021-10-14"},{"lineNumber":234,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":235,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_UPDATE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":236,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":237,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":238,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":239,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":240,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":241,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":242,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":243,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":244,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":245,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":246,"author":{"gitId":"Py0000"},"content":"    public void execute_twoFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":247,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":248,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":249,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-15"},{"lineNumber":250,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":251,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":252,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor desc \u003d new EditAppointmentDescriptorBuilder(editedAppt).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":253,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":254,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand appointmentCommand \u003d new EditAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":255,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(desc));","lastModifiedDate":"2021-10-14"},{"lineNumber":256,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":257,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_UPDATE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":258,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":259,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":260,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":261,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":262,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":263,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":264,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":265,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":266,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":267,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":268,"author":{"gitId":"Py0000"},"content":"    public void execute_dateFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":269,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":270,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":271,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-15"},{"lineNumber":272,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":273,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":274,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor desc \u003d new EditAppointmentDescriptorBuilder(editedAppt).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":275,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":276,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand appointmentCommand \u003d new EditAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":277,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(desc));","lastModifiedDate":"2021-10-14"},{"lineNumber":278,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":279,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_UPDATE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":280,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":281,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":282,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":283,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":284,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":285,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":286,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":287,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":288,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":289,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":290,"author":{"gitId":"Py0000"},"content":"    public void execute_timeFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":291,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":292,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":293,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-15"},{"lineNumber":294,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":295,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":296,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor desc \u003d new EditAppointmentDescriptorBuilder(editedAppt).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":297,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":298,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand appointmentCommand \u003d new EditAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":299,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(desc));","lastModifiedDate":"2021-10-14"},{"lineNumber":300,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":301,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_UPDATE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":302,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":303,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":304,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":305,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":306,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":307,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":308,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":309,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":310,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":311,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":312,"author":{"gitId":"Py0000"},"content":"    public void execute_venueFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":313,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":314,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":315,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_BOB)","lastModifiedDate":"2021-10-15"},{"lineNumber":316,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":317,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":318,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor desc \u003d new EditAppointmentDescriptorBuilder(editedAppt).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":319,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":320,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand appointmentCommand \u003d new EditAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":321,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(desc));","lastModifiedDate":"2021-10-14"},{"lineNumber":322,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":323,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_UPDATE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":324,"author":{"gitId":"Py0000"},"content":"                editedPerson.getName().fullName, editedAppt.getDate(), editedAppt.getTimeFormatted(),","lastModifiedDate":"2021-10-15"},{"lineNumber":325,"author":{"gitId":"Py0000"},"content":"                editedAppt.getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":326,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":327,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":328,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":329,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":330,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":331,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":332,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":333,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":334,"author":{"gitId":"Py0000"},"content":"    public void execute_editNonExistingAppointmentUnfilteredList_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":335,"author":{"gitId":"Py0000"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":336,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(firstPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":337,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_BOB)","lastModifiedDate":"2021-10-15"},{"lineNumber":338,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":339,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":340,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor desc \u003d new EditAppointmentDescriptorBuilder(editedAppt).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":341,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":342,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand appointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":343,"author":{"gitId":"Py0000"},"content":"                new EditAppointmentDescriptor(desc));","lastModifiedDate":"2021-10-14"},{"lineNumber":344,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":345,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d EditAppointmentCommand.MESSAGE_UPDATE_APPOINTMENT_ERROR;","lastModifiedDate":"2021-10-14"},{"lineNumber":346,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":347,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(appointmentCommand, model, expectedMessage);","lastModifiedDate":"2021-10-14"},{"lineNumber":348,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":349,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":349}},{"path":"src/test/java/seedu/fast/logic/commands/EditAppointmentDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.APPT_DES_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.APPT_DES_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import seedu.fast.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"public class EditAppointmentDescriptorTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"    public void equals() {","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor descriptorWithSameValues \u003d new EditAppointmentDescriptor(APPT_DES_AMY);","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"        assertTrue(APPT_DES_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"        assertTrue(descriptorWithSameValues.equals(descriptorWithSameValues));","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"        assertFalse(descriptorWithSameValues.equals(null));","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"        assertFalse(descriptorWithSameValues.equals(\"Matthew\"));","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"        assertFalse(descriptorWithSameValues.equals(APPT_DES_BOB));","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"        // different date -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor editedAppointmentAmy \u003d new EditAppointmentDescriptorBuilder(APPT_DES_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"                .withDate(VALID_APPOINTMENT_BOB).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"        assertFalse(APPT_DES_AMY.equals(editedAppointmentAmy));","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"        // different time -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"        editedAppointmentAmy \u003d new EditAppointmentDescriptorBuilder(APPT_DES_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"                .withTime(VALID_APPOINTMENT_TIME_BOB).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"        assertFalse(APPT_DES_AMY.equals(editedAppointmentAmy));","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        // different venue -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"        editedAppointmentAmy \u003d new EditAppointmentDescriptorBuilder(APPT_DES_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"                .withTime(VALID_APPOINTMENT_VENUE_BOB).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"        assertFalse(APPT_DES_AMY.equals(editedAppointmentAmy));","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"        // no parameters -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        editedAppointmentAmy \u003d new EditAppointmentDescriptorBuilder().build();","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"        assertFalse(APPT_DES_AMY.equals(editedAppointmentAmy));","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":54}},{"path":"src/test/java/seedu/fast/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_TAG_INVESTMENT;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_TAG_LOWPRIORITY;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":37,"author":{"gitId":"squeakysquak"},"content":"    private Model model \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"                .withAppointment(\"No Appointment Scheduled Yet\", \"\", \"\").build();","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"squeakysquak"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"trash-bin99"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_LOWPRIORITY, VALID_TAG_INVESTMENT).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"trash-bin99"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_LOWPRIORITY, VALID_TAG_INVESTMENT)","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"trash-bin99"},"content":"                .build();","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"squeakysquak"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"squeakysquak"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"squeakysquak"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":119,"author":{"gitId":"squeakysquak"},"content":"        Person personInList \u003d model.getFast().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":144,"author":{"gitId":"squeakysquak"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFast().getPersonList().size());","lastModifiedDate":"2021-10-01"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"squeakysquak":29,"trash-bin99":5,"Py0000":2,"-":141}},{"path":"src/test/java/seedu/fast/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"squeakysquak":10,"-":48}},{"path":"src/test/java/seedu/fast/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"squeakysquak":5,"-":15}},{"path":"src/test/java/seedu/fast/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.GRABAHAN;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.JOE;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.SUGON;","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.NameContainsQueriesPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.PriorityPredicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.RemarkContainsKeywordPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.TagMatchesKeywordPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.PriorityTag;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"squeakysquak"},"content":"    private Model model \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"squeakysquak"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"squeakysquak"},"content":"        NameContainsQueriesPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"squeakysquak"},"content":"                new NameContainsQueriesPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"squeakysquak"},"content":"        NameContainsQueriesPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"squeakysquak"},"content":"                new NameContainsQueriesPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"squeakysquak"},"content":"        PriorityPredicate thirdPredicate \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"squeakysquak"},"content":"                new PriorityPredicate(Collections.singletonList(\"high\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"squeakysquak"},"content":"        PriorityPredicate fourthPredicate \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"squeakysquak"},"content":"                new PriorityPredicate(Collections.singletonList(\"low\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"squeakysquak"},"content":"        FindCommand findThirdCommand \u003d new FindCommand(thirdPredicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"squeakysquak"},"content":"        FindCommand findFourthCommand \u003d new FindCommand(fourthPredicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"squeakysquak"},"content":"        assertTrue(findThirdCommand.equals(findThirdCommand));","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"squeakysquak"},"content":"        FindCommand findThirdCommandCopy \u003d new FindCommand(thirdPredicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"squeakysquak"},"content":"        assertTrue(findThirdCommand.equals(findThirdCommandCopy));","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"squeakysquak"},"content":"        assertFalse(findThirdCommand.equals(1));","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"squeakysquak"},"content":"        assertFalse(findThirdCommand.equals(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"squeakysquak"},"content":"        assertFalse(findThirdCommand.equals(findFourthCommand));","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"squeakysquak"},"content":"        //different predicate type -\u003e returns false","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"squeakysquak"},"content":"        assertFalse(findFirstCommand.equals(findThirdCommand));","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":86,"author":{"gitId":"squeakysquak"},"content":"        NameContainsQueriesPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":96,"author":{"gitId":"squeakysquak"},"content":"        NameContainsQueriesPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":103,"author":{"gitId":"squeakysquak"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"squeakysquak"},"content":"    public void execute_zeroPriorities_noPersonFound() {","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"squeakysquak"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"squeakysquak"},"content":"        PriorityPredicate predicate \u003d preparePriorityPredicate(\" \");","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"squeakysquak"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"squeakysquak"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"squeakysquak"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"squeakysquak"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"squeakysquak"},"content":"    public void execute_multiplePriorities_multiplePersonsFound() {","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"squeakysquak"},"content":"        model.addPerson(JOE);","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"squeakysquak"},"content":"        model.addPerson(GRABAHAN);","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"squeakysquak"},"content":"        expectedModel.addPerson(JOE);","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"squeakysquak"},"content":"        expectedModel.addPerson(GRABAHAN);","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"squeakysquak"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"squeakysquak"},"content":"        PriorityPredicate predicate \u003d preparePriorityPredicate(","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"squeakysquak"},"content":"                PriorityTag.LowPriority.TERM + \" \"","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"squeakysquak"},"content":"                        + PriorityTag.HighPriority.TERM);","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"squeakysquak"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"squeakysquak"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"squeakysquak"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(Arrays.asList(JOE, GRABAHAN), model.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":128,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"squeakysquak"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":130,"author":{"gitId":"squeakysquak"},"content":"    public void execute_onePriority_onePersonFound() {","lastModifiedDate":"2021-10-11"},{"lineNumber":131,"author":{"gitId":"squeakysquak"},"content":"        model.addPerson(JOE);","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"squeakysquak"},"content":"        model.addPerson(GRABAHAN);","lastModifiedDate":"2021-10-11"},{"lineNumber":133,"author":{"gitId":"squeakysquak"},"content":"        expectedModel.addPerson(JOE);","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"squeakysquak"},"content":"        expectedModel.addPerson(GRABAHAN);","lastModifiedDate":"2021-10-11"},{"lineNumber":135,"author":{"gitId":"squeakysquak"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-11"},{"lineNumber":136,"author":{"gitId":"squeakysquak"},"content":"        PriorityPredicate predicate \u003d preparePriorityPredicate(","lastModifiedDate":"2021-10-11"},{"lineNumber":137,"author":{"gitId":"squeakysquak"},"content":"                PriorityTag.LowPriority.TERM);","lastModifiedDate":"2021-10-11"},{"lineNumber":138,"author":{"gitId":"squeakysquak"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":139,"author":{"gitId":"squeakysquak"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":140,"author":{"gitId":"squeakysquak"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":141,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(Arrays.asList(GRABAHAN), model.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":144,"author":{"gitId":"squeakysquak"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":145,"author":{"gitId":"squeakysquak"},"content":"    public void execute_zeroTags_noPersonFound() {","lastModifiedDate":"2021-10-18"},{"lineNumber":146,"author":{"gitId":"squeakysquak"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-18"},{"lineNumber":147,"author":{"gitId":"squeakysquak"},"content":"        TagMatchesKeywordPredicate predicate \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":148,"author":{"gitId":"squeakysquak"},"content":"                prepareTagContainsKeyWordsPredicate(\" \");","lastModifiedDate":"2021-10-18"},{"lineNumber":149,"author":{"gitId":"squeakysquak"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":150,"author":{"gitId":"squeakysquak"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":151,"author":{"gitId":"squeakysquak"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-18"},{"lineNumber":152,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-18"},{"lineNumber":153,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":154,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":155,"author":{"gitId":"squeakysquak"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":156,"author":{"gitId":"squeakysquak"},"content":"    public void execute_oneTag_onePersonFound() {","lastModifiedDate":"2021-10-18"},{"lineNumber":157,"author":{"gitId":"squeakysquak"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-18"},{"lineNumber":158,"author":{"gitId":"squeakysquak"},"content":"        TagMatchesKeywordPredicate predicate \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":159,"author":{"gitId":"squeakysquak"},"content":"                prepareTagContainsKeyWordsPredicate(\"owesMoney\");","lastModifiedDate":"2021-10-18"},{"lineNumber":160,"author":{"gitId":"squeakysquak"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":161,"author":{"gitId":"squeakysquak"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":162,"author":{"gitId":"squeakysquak"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-18"},{"lineNumber":163,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(Arrays.asList(BENSON), model.getFilteredPersonList());","lastModifiedDate":"2021-10-18"},{"lineNumber":164,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":165,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":166,"author":{"gitId":"squeakysquak"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":167,"author":{"gitId":"squeakysquak"},"content":"    public void execute_twoTags_threePersonsFound() {","lastModifiedDate":"2021-10-18"},{"lineNumber":168,"author":{"gitId":"squeakysquak"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-18"},{"lineNumber":169,"author":{"gitId":"squeakysquak"},"content":"        TagMatchesKeywordPredicate predicate \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":170,"author":{"gitId":"squeakysquak"},"content":"                prepareTagContainsKeyWordsPredicate(\"friends\");","lastModifiedDate":"2021-10-18"},{"lineNumber":171,"author":{"gitId":"squeakysquak"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":172,"author":{"gitId":"squeakysquak"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":173,"author":{"gitId":"squeakysquak"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-18"},{"lineNumber":174,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-10-18"},{"lineNumber":175,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":176,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":177,"author":{"gitId":"squeakysquak"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":178,"author":{"gitId":"squeakysquak"},"content":"    public void execute_zeroRemarks_noPersonFound() {","lastModifiedDate":"2021-10-18"},{"lineNumber":179,"author":{"gitId":"squeakysquak"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-18"},{"lineNumber":180,"author":{"gitId":"squeakysquak"},"content":"        RemarkContainsKeywordPredicate predicate \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":181,"author":{"gitId":"squeakysquak"},"content":"                prepareRemarkContainsKeyWordsPredicate(\" \");","lastModifiedDate":"2021-10-18"},{"lineNumber":182,"author":{"gitId":"squeakysquak"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":183,"author":{"gitId":"squeakysquak"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":184,"author":{"gitId":"squeakysquak"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-18"},{"lineNumber":185,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-18"},{"lineNumber":186,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":187,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":188,"author":{"gitId":"squeakysquak"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":189,"author":{"gitId":"squeakysquak"},"content":"    public void execute_oneRemark_onePersonFound() {","lastModifiedDate":"2021-10-18"},{"lineNumber":190,"author":{"gitId":"squeakysquak"},"content":"        model.addPerson(SUGON);","lastModifiedDate":"2021-10-18"},{"lineNumber":191,"author":{"gitId":"squeakysquak"},"content":"        expectedModel.addPerson(SUGON);","lastModifiedDate":"2021-10-18"},{"lineNumber":192,"author":{"gitId":"squeakysquak"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-18"},{"lineNumber":193,"author":{"gitId":"squeakysquak"},"content":"        RemarkContainsKeywordPredicate predicate \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":194,"author":{"gitId":"squeakysquak"},"content":"                prepareRemarkContainsKeyWordsPredicate(\"what\u0027s DN?\");","lastModifiedDate":"2021-10-18"},{"lineNumber":195,"author":{"gitId":"squeakysquak"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":196,"author":{"gitId":"squeakysquak"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":197,"author":{"gitId":"squeakysquak"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-18"},{"lineNumber":198,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(Arrays.asList(SUGON), model.getFilteredPersonList());","lastModifiedDate":"2021-10-18"},{"lineNumber":199,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":200,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":204,"author":{"gitId":"squeakysquak"},"content":"    private NameContainsQueriesPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-10-19"},{"lineNumber":205,"author":{"gitId":"squeakysquak"},"content":"        return new NameContainsQueriesPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-10-19"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":207,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":208,"author":{"gitId":"squeakysquak"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":209,"author":{"gitId":"squeakysquak"},"content":"     * Parses {@code userInput} into a {@code PriorityPredicate}.","lastModifiedDate":"2021-10-11"},{"lineNumber":210,"author":{"gitId":"squeakysquak"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":211,"author":{"gitId":"squeakysquak"},"content":"    private PriorityPredicate preparePriorityPredicate(String userInput) {","lastModifiedDate":"2021-10-11"},{"lineNumber":212,"author":{"gitId":"squeakysquak"},"content":"        return new PriorityPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-10-11"},{"lineNumber":213,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":214,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":215,"author":{"gitId":"squeakysquak"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":216,"author":{"gitId":"squeakysquak"},"content":"     * Parses {@code userInput} into a {@code TagContainsKeyWordsPredicate}.","lastModifiedDate":"2021-10-18"},{"lineNumber":217,"author":{"gitId":"squeakysquak"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":218,"author":{"gitId":"squeakysquak"},"content":"    private TagMatchesKeywordPredicate prepareTagContainsKeyWordsPredicate(String userInput) {","lastModifiedDate":"2021-10-19"},{"lineNumber":219,"author":{"gitId":"squeakysquak"},"content":"        return new TagMatchesKeywordPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-10-19"},{"lineNumber":220,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":221,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":222,"author":{"gitId":"squeakysquak"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":223,"author":{"gitId":"squeakysquak"},"content":"     * Parses {@code userInput} into a {@code RemarkContainsKeyWordsPredicate}.","lastModifiedDate":"2021-10-18"},{"lineNumber":224,"author":{"gitId":"squeakysquak"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":225,"author":{"gitId":"squeakysquak"},"content":"    private RemarkContainsKeywordPredicate prepareRemarkContainsKeyWordsPredicate(String userInput) {","lastModifiedDate":"2021-10-19"},{"lineNumber":226,"author":{"gitId":"squeakysquak"},"content":"        return new RemarkContainsKeywordPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-10-19"},{"lineNumber":227,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"squeakysquak":166,"-":62}},{"path":"src/test/java/seedu/fast/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"    public void equals() {","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"        final HelpCommand standardCommand \u003d new HelpCommand(\"\");","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"        HelpCommand commandWithSameValues \u003d new HelpCommand(\"\");","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"Cyn7hius"},"content":"        assertCommandSuccess(new HelpCommand(\"\"), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":40,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"Cyn7hius"},"content":"    public void execute_helpWithArg_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"Cyn7hius"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"Cyn7hius"},"content":"        assertCommandSuccess(new HelpCommand(\"add\"), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"Cyn7hius"},"content":"        assertCommandSuccess(new HelpCommand(\"invalid input\"), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"squeakysquak":5,"Py0000":20,"-":14,"Cyn7hius":8}},{"path":"src/test/java/seedu/fast/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"        model \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"        expectedModel \u003d new ModelManager(model.getFast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"squeakysquak":10,"-":29}},{"path":"src/test/java/seedu/fast/logic/commands/MarkAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"public class MarkAppointmentCommandTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"    private final Model model \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"    public void equals() {","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"        final MarkAppointmentCommand standardCommand \u003d new MarkAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"        MarkAppointmentCommand commandWithSameValues \u003d new MarkAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new MarkAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY))));","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"        MarkAppointmentCommand apptCommand \u003d new MarkAppointmentCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(apptCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"    public void execute_markAppointmentUnfilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"                .withAppointmentCount(\"1\")","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"        MarkAppointmentCommand appointmentCommand \u003d new MarkAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MarkAppointmentCommand.MESSAGE_MARK_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"                secondPerson.getName().fullName, secondPerson.getAppointment().getDate(),","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"                secondPerson.getAppointment().getTimeFormatted(), secondPerson.getAppointment().getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"    public void execute_markAppointmentUnfilteredList_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(firstPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"        MarkAppointmentCommand appointmentCommand \u003d new MarkAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MarkAppointmentCommand.MESSAGE_MARK_APPOINTMENT_FAILURE);","lastModifiedDate":"2021-10-14"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(appointmentCommand, model, expectedMessage);","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-15"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"        // ensures that outOfBoundIndex is still in bounds of FAST list","lastModifiedDate":"2021-10-15"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFast().getPersonList().size());","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"        MarkAppointmentCommand apptCommand \u003d new MarkAppointmentCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-15"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-15"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(apptCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-15"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"    public void execute_markAppointmentFilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-15"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"                .withAppointmentCount(\"1\")","lastModifiedDate":"2021-10-15"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"        MarkAppointmentCommand appointmentCommand \u003d new MarkAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-15"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MarkAppointmentCommand.MESSAGE_MARK_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"                secondPerson.getName().fullName, secondPerson.getAppointment().getDate(),","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"                secondPerson.getAppointment().getTimeFormatted(), secondPerson.getAppointment().getVenue());","lastModifiedDate":"2021-10-15"},{"lineNumber":131,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":137,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"    public void execute_markAppointmentFilteredList_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_THIRD_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":141,"author":{"gitId":"Py0000"},"content":"        Person thirdPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(thirdPerson)","lastModifiedDate":"2021-10-14"},{"lineNumber":143,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-15"},{"lineNumber":144,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":145,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-14"},{"lineNumber":146,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":147,"author":{"gitId":"Py0000"},"content":"        MarkAppointmentCommand appointmentCommand \u003d new MarkAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":148,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-15"},{"lineNumber":149,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MarkAppointmentCommand.MESSAGE_MARK_APPOINTMENT_FAILURE);","lastModifiedDate":"2021-10-14"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(appointmentCommand, model, expectedMessage);","lastModifiedDate":"2021-10-14"},{"lineNumber":153,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":154,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":155,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":155}},{"path":"src/test/java/seedu/fast/logic/commands/RemarkCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_REMARK_AMY;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_REMARK_BOB;","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Remark;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"class RemarkCommandTest {","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"    private Model model \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"    public void equals() {","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"        final RemarkCommand standardCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_AMY));","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"        RemarkCommand commandWithSameValues \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_AMY));","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_PERSON, new Remark(VALID_REMARK_AMY))));","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        // different remark -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_BOB))));","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    void execute_addRemarkUnfilteredList_success() {","lastModifiedDate":"2021-09-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-09-13"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(firstPerson).withRemark(VALID_REMARK_BOB).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(editedPerson.getRemark().value));","lastModifiedDate":"2021-09-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);","lastModifiedDate":"2021-09-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":64,"author":{"gitId":"squeakysquak"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-09-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"    public void execute_deleteRemarkUnfilteredList_success() {","lastModifiedDate":"2021-10-05"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-05"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(firstPerson).withRemark(\"\").build();","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"                new Remark(editedPerson.getRemark().toString()));","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-05"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-05"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2021-10-05"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-05"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-05"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList()","lastModifiedDate":"2021-10-14"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"                .get(INDEX_FIRST_PERSON.getZeroBased()))","lastModifiedDate":"2021-10-14"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"                .withRemark(VALID_REMARK_BOB).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"                new Remark(editedPerson.getRemark().value));","lastModifiedDate":"2021-10-14"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-05"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-05"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2021-10-05"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-05"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-05"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));","lastModifiedDate":"2021-10-05"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-10-05"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"     * but smaller than size of address book","lastModifiedDate":"2021-10-05"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2021-10-05"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-05"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-05"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFast().getPersonList().size());","lastModifiedDate":"2021-10-05"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));","lastModifiedDate":"2021-10-05"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"squeakysquak":13,"Py0000":95,"-":21}},{"path":"src/test/java/seedu/fast/logic/commands/SortCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.testutil.TypicalPersons.GRABAHAN;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.testutil.TypicalPersons.JOE;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.sort.SortByAppointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.sort.SortByName;","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.sort.SortByPriority;","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"Th-429B"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"Th-429B"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"Th-429B"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"Th-429B"},"content":"public class SortCommandTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"Th-429B"},"content":"    private Model model;","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"Th-429B"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"    public void setUp() {","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"        model \u003d new ModelManager();","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"Th-429B"},"content":"        expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"Th-429B"},"content":"        getCustomPersons(model, GRABAHAN, BENSON, ELLE, JOE);","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"Th-429B"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"Th-429B"},"content":"    public void equals() {","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"Th-429B"},"content":"        SortByName sortByName \u003d new SortByName();","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"Th-429B"},"content":"        SortByPriority sortByPriority \u003d new SortByPriority();","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"Th-429B"},"content":"        SortByAppointment sortByAppointment \u003d new SortByAppointment();","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"Th-429B"},"content":"        SortCommand sortNameCommand \u003d new SortCommand(sortByName, SortByName.KEYWORD);","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"Th-429B"},"content":"        SortCommand sortPriorityCommand \u003d new SortCommand(sortByPriority, SortByPriority.KEYWORD);","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"Th-429B"},"content":"        SortCommand sortAppointmentCommand \u003d new SortCommand(sortByAppointment, sortByAppointment.KEYWORD);","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"Th-429B"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"Th-429B"},"content":"        assertTrue(sortNameCommand.equals(sortNameCommand));","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"Th-429B"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"Th-429B"},"content":"        SortCommand sortPriorityCommandCopy \u003d new SortCommand(sortByPriority, SortByPriority.KEYWORD);","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"Th-429B"},"content":"        assertTrue(sortPriorityCommand.equals(sortPriorityCommandCopy));","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"Th-429B"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"Th-429B"},"content":"        assertFalse(sortAppointmentCommand.equals(1));","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"Th-429B"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"Th-429B"},"content":"        assertFalse(sortAppointmentCommand.equals(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"Th-429B"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"Th-429B"},"content":"        assertFalse(sortPriorityCommand.equals(sortNameCommand));","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"Th-429B"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"Th-429B"},"content":"    public void execute_sortByName_listSortedByName() {","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"Th-429B"},"content":"        getCustomPersons(expectedModel, BENSON, ELLE, GRABAHAN, JOE);","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"Th-429B"},"content":"        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, SortByName.KEYWORD);","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"Th-429B"},"content":"        SortCommand command \u003d new SortCommand(new SortByName(), SortByName.KEYWORD);","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"Th-429B"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"Th-429B"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"Th-429B"},"content":"    public void execute_sortByAppointment_listSortedByAppointment() {","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"Th-429B"},"content":"        getCustomPersons(expectedModel, ELLE, JOE, GRABAHAN, BENSON);","lastModifiedDate":"2021-10-31"},{"lineNumber":75,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"Th-429B"},"content":"        //different dates","lastModifiedDate":"2021-10-31"},{"lineNumber":77,"author":{"gitId":"Th-429B"},"content":"        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, SortByAppointment.KEYWORD);","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"Th-429B"},"content":"        SortCommand command \u003d new SortCommand(new SortByAppointment(), SortByAppointment.KEYWORD);","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"Th-429B"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"Th-429B"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"Th-429B"},"content":"    public void execute_sortByPriority_listSortedByPriority() {","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"Th-429B"},"content":"        getCustomPersons(expectedModel, JOE, GRABAHAN, BENSON, ELLE);","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"Th-429B"},"content":"        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, SortByPriority.KEYWORD);","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"Th-429B"},"content":"        SortCommand command \u003d new SortCommand(new SortByPriority(), SortByPriority.KEYWORD);","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"Th-429B"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"Th-429B"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"Th-429B"},"content":"     * Adds the specified Persons into the Model","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"Th-429B"},"content":"     * @param model The model to add persons.","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"Th-429B"},"content":"     * @param persons Variable length of Person to be added.","lastModifiedDate":"2021-10-15"},{"lineNumber":95,"author":{"gitId":"Th-429B"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"Th-429B"},"content":"    private void getCustomPersons(Model model, Person ...persons) {","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"Th-429B"},"content":"        for (Person p: persons) {","lastModifiedDate":"2021-10-15"},{"lineNumber":98,"author":{"gitId":"Th-429B"},"content":"            model.addPerson(p);","lastModifiedDate":"2021-10-15"},{"lineNumber":99,"author":{"gitId":"Th-429B"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":100,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":101,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":102,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"Th-429B":102}},{"path":"src/test/java/seedu/fast/logic/commands/TagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"trash-bin99"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"trash-bin99"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"trash-bin99"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"trash-bin99"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"trash-bin99"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"trash-bin99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"trash-bin99"},"content":"public class TagCommandTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"trash-bin99"},"content":"    private Model model;","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"trash-bin99"},"content":"    private Model modelLastPersonTagsAdded;","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"trash-bin99"},"content":"    private Tag normalTag \u003d Tag.createTag(\"test\");","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"trash-bin99"},"content":"    private Tag priorityTag \u003d Tag.createTag(\"pr/low\");","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"trash-bin99"},"content":"    private Tag investmentPlanTag \u003d Tag.createTag(\"ip/property\");","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"trash-bin99"},"content":"    private Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"trash-bin99"},"content":"    private Set\u003cTag\u003e setWithPriorityTag \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"trash-bin99"},"content":"    private Set\u003cTag\u003e setWithInvestmentPlanTag \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"trash-bin99"},"content":"    private Set\u003cTag\u003e setWithNormalTag \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"trash-bin99"},"content":"    private Set\u003cTag\u003e setWithMixedTag \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"trash-bin99"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"trash-bin99"},"content":"    public void setUp() {","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"trash-bin99"},"content":"        //set up model","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"trash-bin99"},"content":"        model \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"trash-bin99"},"content":"        //set up last person","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"trash-bin99"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"trash-bin99"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"trash-bin99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(personToEdit);","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"trash-bin99"},"content":"        Person editedPerson \u003d personInList.withTags(","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"trash-bin99"},"content":"                normalTag.tagName, priorityTag.tagName, investmentPlanTag.tagName).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"trash-bin99"},"content":"        modelLastPersonTagsAdded \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"trash-bin99"},"content":"        modelLastPersonTagsAdded.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"trash-bin99"},"content":"        //set up tag sets","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"trash-bin99"},"content":"        setWithNormalTag.add(normalTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"trash-bin99"},"content":"        setWithPriorityTag.add(priorityTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"trash-bin99"},"content":"        setWithInvestmentPlanTag.add(investmentPlanTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"trash-bin99"},"content":"        setWithMixedTag.add(normalTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"trash-bin99"},"content":"        setWithMixedTag.add(priorityTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"trash-bin99"},"content":"        setWithMixedTag.add(investmentPlanTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"trash-bin99"},"content":"    public void constructor_nullArgs_throwsNullPointerException() {","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"trash-bin99"},"content":"        //null index","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"trash-bin99"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TagCommand(null,","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"trash-bin99"},"content":"                setWithMixedTag, setWithMixedTag));","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"trash-bin99"},"content":"        //null addSet","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"trash-bin99"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TagCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"trash-bin99"},"content":"                null, setWithMixedTag));","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"trash-bin99"},"content":"        //null deleteSet","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"trash-bin99"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TagCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"trash-bin99"},"content":"                setWithMixedTag, null));","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"trash-bin99"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"trash-bin99"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"trash-bin99"},"content":"        showPersonAtIndex(model, indexLastPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON, setWithNormalTag, emptySet);","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"trash-bin99"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"trash-bin99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(personToEdit);","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"trash-bin99"},"content":"        Person editedPerson \u003d personInList.withTags(normalTag.tagName).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"trash-bin99"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_EDIT_TAG_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"trash-bin99"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"trash-bin99"},"content":"        expectedModel.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"trash-bin99"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"trash-bin99"},"content":"    public void execute_indexSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON, emptySet, emptySet);","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"trash-bin99"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"trash-bin99"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_EDIT_TAG_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"trash-bin99"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"trash-bin99"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"trash-bin99"},"content":"    public void execute_indexAndNormalAddSetSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"trash-bin99"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(indexLastPerson, setWithNormalTag, emptySet);","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"trash-bin99"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"trash-bin99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(personToEdit);","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"trash-bin99"},"content":"        Person editedPerson \u003d personInList.withTags(normalTag.tagName).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"trash-bin99"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_EDIT_TAG_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"trash-bin99"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"trash-bin99"},"content":"        expectedModel.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"trash-bin99"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"trash-bin99"},"content":"    public void execute_indexAndPriorityAddSetSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"trash-bin99"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(indexLastPerson, setWithPriorityTag, emptySet);","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"trash-bin99"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"trash-bin99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(personToEdit);","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"trash-bin99"},"content":"        Person editedPerson \u003d personInList.withTags(priorityTag.tagName).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":139,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"trash-bin99"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_EDIT_TAG_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"trash-bin99"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":143,"author":{"gitId":"trash-bin99"},"content":"        expectedModel.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":145,"author":{"gitId":"trash-bin99"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":146,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":149,"author":{"gitId":"trash-bin99"},"content":"    public void execute_indexAndInvestmentPlanAddSetSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"trash-bin99"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(indexLastPerson, setWithInvestmentPlanTag, emptySet);","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"trash-bin99"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"trash-bin99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(personToEdit);","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"trash-bin99"},"content":"        Person editedPerson \u003d personInList.withTags(investmentPlanTag.tagName).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":156,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":157,"author":{"gitId":"trash-bin99"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_EDIT_TAG_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"trash-bin99"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"trash-bin99"},"content":"        expectedModel.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"trash-bin99"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"trash-bin99"},"content":"    public void execute_indexAndMixedAddSetSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"trash-bin99"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(indexLastPerson, setWithMixedTag, emptySet);","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"trash-bin99"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"trash-bin99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(personToEdit);","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"trash-bin99"},"content":"        Person editedPerson \u003d personInList.withTags(","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"trash-bin99"},"content":"                normalTag.tagName, priorityTag.tagName, investmentPlanTag.tagName).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"trash-bin99"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_EDIT_TAG_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":177,"author":{"gitId":"trash-bin99"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"trash-bin99"},"content":"        expectedModel.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":179,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"trash-bin99"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":181,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"trash-bin99"},"content":"    public void execute_indexAndNormalDeleteSetSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":185,"author":{"gitId":"trash-bin99"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(modelLastPersonTagsAdded.getFilteredPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":186,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(indexLastPerson, emptySet, setWithNormalTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"trash-bin99"},"content":"        Person personToEdit \u003d modelLastPersonTagsAdded.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":189,"author":{"gitId":"trash-bin99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(personToEdit);","lastModifiedDate":"2021-10-26"},{"lineNumber":190,"author":{"gitId":"trash-bin99"},"content":"        Person editedPerson \u003d personInList.withTags(priorityTag.tagName, investmentPlanTag.tagName).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":191,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":192,"author":{"gitId":"trash-bin99"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_EDIT_TAG_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":194,"author":{"gitId":"trash-bin99"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(modelLastPersonTagsAdded.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":195,"author":{"gitId":"trash-bin99"},"content":"        expectedModel.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":196,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":197,"author":{"gitId":"trash-bin99"},"content":"        assertCommandSuccess(tagCommand, modelLastPersonTagsAdded, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":198,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":199,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":200,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":201,"author":{"gitId":"trash-bin99"},"content":"    public void execute_indexAndPriorityDeleteSetSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":202,"author":{"gitId":"trash-bin99"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(modelLastPersonTagsAdded.getFilteredPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":203,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(indexLastPerson, emptySet, setWithPriorityTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":204,"author":{"gitId":"trash-bin99"},"content":"        Person personToEdit \u003d modelLastPersonTagsAdded.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":205,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":206,"author":{"gitId":"trash-bin99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(personToEdit);","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"trash-bin99"},"content":"        Person editedPerson \u003d personInList.withTags(normalTag.tagName, investmentPlanTag.tagName).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"trash-bin99"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_EDIT_TAG_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":210,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"trash-bin99"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(modelLastPersonTagsAdded.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":212,"author":{"gitId":"trash-bin99"},"content":"        expectedModel.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":213,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":214,"author":{"gitId":"trash-bin99"},"content":"        assertCommandSuccess(tagCommand, modelLastPersonTagsAdded, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":215,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":216,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":217,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":218,"author":{"gitId":"trash-bin99"},"content":"    public void execute_indexAndInvestmentPlanDeleteSetSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":219,"author":{"gitId":"trash-bin99"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(modelLastPersonTagsAdded.getFilteredPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":220,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(indexLastPerson, emptySet, setWithInvestmentPlanTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":221,"author":{"gitId":"trash-bin99"},"content":"        Person personToEdit \u003d modelLastPersonTagsAdded.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":222,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":223,"author":{"gitId":"trash-bin99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(personToEdit);","lastModifiedDate":"2021-10-26"},{"lineNumber":224,"author":{"gitId":"trash-bin99"},"content":"        Person editedPerson \u003d personInList.withTags(priorityTag.tagName, normalTag.tagName).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":225,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":226,"author":{"gitId":"trash-bin99"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_EDIT_TAG_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":227,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":228,"author":{"gitId":"trash-bin99"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(modelLastPersonTagsAdded.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":229,"author":{"gitId":"trash-bin99"},"content":"        expectedModel.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":230,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":231,"author":{"gitId":"trash-bin99"},"content":"        assertCommandSuccess(tagCommand, modelLastPersonTagsAdded, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":232,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":233,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":234,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":235,"author":{"gitId":"trash-bin99"},"content":"    public void execute_indexAndMixedDeleteSetSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":236,"author":{"gitId":"trash-bin99"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(modelLastPersonTagsAdded.getFilteredPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":237,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(indexLastPerson, setWithMixedTag, setWithMixedTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":238,"author":{"gitId":"trash-bin99"},"content":"        Person personToEdit \u003d modelLastPersonTagsAdded.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":239,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":240,"author":{"gitId":"trash-bin99"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_EDIT_TAG_SUCCESS, personToEdit);","lastModifiedDate":"2021-10-26"},{"lineNumber":241,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":242,"author":{"gitId":"trash-bin99"},"content":"        assertCommandSuccess(tagCommand, modelLastPersonTagsAdded, expectedMessage, modelLastPersonTagsAdded);","lastModifiedDate":"2021-10-26"},{"lineNumber":243,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":244,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":245,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":246,"author":{"gitId":"trash-bin99"},"content":"    public void execute_simultaneousAddAndDeleteUnfilteredList_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":247,"author":{"gitId":"trash-bin99"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(modelLastPersonTagsAdded.getFilteredPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":248,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(indexLastPerson, emptySet, setWithMixedTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":249,"author":{"gitId":"trash-bin99"},"content":"        Person personToEdit \u003d modelLastPersonTagsAdded.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":250,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":251,"author":{"gitId":"trash-bin99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(personToEdit);","lastModifiedDate":"2021-10-26"},{"lineNumber":252,"author":{"gitId":"trash-bin99"},"content":"        Person editedPerson \u003d personInList.withTags().build();","lastModifiedDate":"2021-10-26"},{"lineNumber":253,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":254,"author":{"gitId":"trash-bin99"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_EDIT_TAG_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":255,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":256,"author":{"gitId":"trash-bin99"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(modelLastPersonTagsAdded.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":257,"author":{"gitId":"trash-bin99"},"content":"        expectedModel.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":258,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":259,"author":{"gitId":"trash-bin99"},"content":"        assertCommandSuccess(tagCommand, modelLastPersonTagsAdded, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":260,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":261,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":262,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":263,"author":{"gitId":"trash-bin99"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-26"},{"lineNumber":264,"author":{"gitId":"trash-bin99"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-26"},{"lineNumber":265,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(outOfBoundIndex, emptySet, emptySet);","lastModifiedDate":"2021-10-26"},{"lineNumber":266,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":267,"author":{"gitId":"trash-bin99"},"content":"        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-26"},{"lineNumber":268,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":269,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":270,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":271,"author":{"gitId":"trash-bin99"},"content":"    public void execute_invalidIndexFilteredList_failure() {","lastModifiedDate":"2021-10-26"},{"lineNumber":272,"author":{"gitId":"trash-bin99"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":273,"author":{"gitId":"trash-bin99"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-26"},{"lineNumber":274,"author":{"gitId":"trash-bin99"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-26"},{"lineNumber":275,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFast().getPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":276,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(outOfBoundIndex, emptySet, emptySet);","lastModifiedDate":"2021-10-26"},{"lineNumber":277,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":278,"author":{"gitId":"trash-bin99"},"content":"        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-26"},{"lineNumber":279,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":280,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":281,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":282,"author":{"gitId":"trash-bin99"},"content":"    public void execute_addRepeatedTagUnfilteredList_failure() {","lastModifiedDate":"2021-10-26"},{"lineNumber":283,"author":{"gitId":"trash-bin99"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(modelLastPersonTagsAdded.getFilteredPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":284,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(indexLastPerson, setWithInvestmentPlanTag, emptySet);","lastModifiedDate":"2021-10-26"},{"lineNumber":285,"author":{"gitId":"trash-bin99"},"content":"        Person personToEdit \u003d modelLastPersonTagsAdded.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":286,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":287,"author":{"gitId":"trash-bin99"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAGS_ARE_REPEATED, investmentPlanTag.tagName);","lastModifiedDate":"2021-10-26"},{"lineNumber":288,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":289,"author":{"gitId":"trash-bin99"},"content":"        assertCommandFailure(tagCommand, modelLastPersonTagsAdded, expectedMessage);","lastModifiedDate":"2021-10-26"},{"lineNumber":290,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":291,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":292,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":293,"author":{"gitId":"trash-bin99"},"content":"    public void execute_deleteInvalidTagUnfilteredList_failure() {","lastModifiedDate":"2021-10-26"},{"lineNumber":294,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON, emptySet, setWithPriorityTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":295,"author":{"gitId":"trash-bin99"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":296,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":297,"author":{"gitId":"trash-bin99"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_DOES_NOT_EXIST, priorityTag.tagName);","lastModifiedDate":"2021-10-26"},{"lineNumber":298,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":299,"author":{"gitId":"trash-bin99"},"content":"        assertCommandFailure(tagCommand, model, expectedMessage);","lastModifiedDate":"2021-10-26"},{"lineNumber":300,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":301,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":302,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":303,"author":{"gitId":"trash-bin99"},"content":"    public void execute_addMultiplePriorityTagsUnfilteredList_failure() {","lastModifiedDate":"2021-10-26"},{"lineNumber":304,"author":{"gitId":"trash-bin99"},"content":"        //set up addSet","lastModifiedDate":"2021-10-26"},{"lineNumber":305,"author":{"gitId":"trash-bin99"},"content":"        Tag additionalPriorityTag \u003d Tag.createTag(\"pr/med\");","lastModifiedDate":"2021-10-26"},{"lineNumber":306,"author":{"gitId":"trash-bin99"},"content":"        Set\u003cTag\u003e additionalPriorityTagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":307,"author":{"gitId":"trash-bin99"},"content":"        additionalPriorityTagSet.add(additionalPriorityTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":308,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":309,"author":{"gitId":"trash-bin99"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(modelLastPersonTagsAdded.getFilteredPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":310,"author":{"gitId":"trash-bin99"},"content":"        TagCommand tagCommand \u003d new TagCommand(indexLastPerson, additionalPriorityTagSet, emptySet);","lastModifiedDate":"2021-10-26"},{"lineNumber":311,"author":{"gitId":"trash-bin99"},"content":"        String expectedMessage \u003d TagCommand.MESSAGE_MULTIPLE_PRIORITY_TAGS;","lastModifiedDate":"2021-10-26"},{"lineNumber":312,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":313,"author":{"gitId":"trash-bin99"},"content":"        assertCommandFailure(tagCommand, modelLastPersonTagsAdded, expectedMessage);","lastModifiedDate":"2021-10-26"},{"lineNumber":314,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":315,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":316,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":317,"author":{"gitId":"trash-bin99"},"content":"    public void equals() {","lastModifiedDate":"2021-10-26"},{"lineNumber":318,"author":{"gitId":"trash-bin99"},"content":"        final TagCommand standardCommand \u003d new TagCommand(INDEX_FIRST_PERSON, emptySet, setWithMixedTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":319,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":320,"author":{"gitId":"trash-bin99"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-20"},{"lineNumber":321,"author":{"gitId":"trash-bin99"},"content":"        TagCommand commandWithSameValues \u003d new TagCommand(INDEX_FIRST_PERSON, emptySet, setWithMixedTag);","lastModifiedDate":"2021-10-26"},{"lineNumber":322,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-20"},{"lineNumber":323,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":324,"author":{"gitId":"trash-bin99"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-20"},{"lineNumber":325,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-20"},{"lineNumber":326,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":327,"author":{"gitId":"trash-bin99"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":328,"author":{"gitId":"trash-bin99"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-20"},{"lineNumber":329,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":330,"author":{"gitId":"trash-bin99"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":331,"author":{"gitId":"trash-bin99"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-20"},{"lineNumber":332,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":333,"author":{"gitId":"trash-bin99"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":334,"author":{"gitId":"trash-bin99"},"content":"        assertFalse(standardCommand.equals(new TagCommand(INDEX_SECOND_PERSON, emptySet, setWithMixedTag)));","lastModifiedDate":"2021-10-26"},{"lineNumber":335,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":336,"author":{"gitId":"trash-bin99"},"content":"        // different sets -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":337,"author":{"gitId":"trash-bin99"},"content":"        assertFalse(standardCommand.equals(new TagCommand(INDEX_FIRST_PERSON, setWithMixedTag, setWithMixedTag)));","lastModifiedDate":"2021-10-26"},{"lineNumber":338,"author":{"gitId":"trash-bin99"},"content":"        assertFalse(standardCommand.equals(new TagCommand(INDEX_FIRST_PERSON, emptySet, emptySet)));","lastModifiedDate":"2021-10-26"},{"lineNumber":339,"author":{"gitId":"trash-bin99"},"content":"        assertFalse(standardCommand.equals(new TagCommand(INDEX_FIRST_PERSON, setWithMixedTag, emptySet)));","lastModifiedDate":"2021-10-26"},{"lineNumber":340,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":341,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":342,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":343,"author":{"gitId":"trash-bin99"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"trash-bin99":343}},{"path":"src/test/java/seedu/fast/logic/commands/TagCommandUtilsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"trash-bin99"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"trash-bin99"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"trash-bin99"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"trash-bin99"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"trash-bin99"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.tag.InvestmentPlanTag;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.tag.PriorityTag;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"trash-bin99"},"content":"public class TagCommandUtilsTest {","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"trash-bin99"},"content":"    public void hasMultiplePriorityTags() {","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"trash-bin99"},"content":"        Tag normalTag \u003d Tag.createTag(\"test\");","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"trash-bin99"},"content":"        Tag lowPriorityTag \u003d Tag.createTag(PriorityTag.LowPriority.COMMAND);","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"trash-bin99"},"content":"        Tag highPriorityTag \u003d Tag.createTag(PriorityTag.HighPriority.COMMAND);","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"trash-bin99"},"content":"        Tag savingInvestmentPlanTag \u003d Tag.createTag(InvestmentPlanTag.Savings.COMMAND);","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"trash-bin99"},"content":"        Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"trash-bin99"},"content":"        Set\u003cTag\u003e setWithNoPriorityTag \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"trash-bin99"},"content":"        setWithNoPriorityTag.add(normalTag);","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"trash-bin99"},"content":"        setWithNoPriorityTag.add(savingInvestmentPlanTag);","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"trash-bin99"},"content":"        Set\u003cTag\u003e setWithOnePriorityTag \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"trash-bin99"},"content":"        setWithOnePriorityTag.add(normalTag);","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"trash-bin99"},"content":"        setWithOnePriorityTag.add(lowPriorityTag);","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"trash-bin99"},"content":"        setWithOnePriorityTag.add(savingInvestmentPlanTag);","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"trash-bin99"},"content":"        Set\u003cTag\u003e setWithTwoPriorityTag \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"trash-bin99"},"content":"        setWithTwoPriorityTag.add(normalTag);","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"trash-bin99"},"content":"        setWithTwoPriorityTag.add(lowPriorityTag);","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"trash-bin99"},"content":"        setWithTwoPriorityTag.add(savingInvestmentPlanTag);","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"trash-bin99"},"content":"        setWithTwoPriorityTag.add(highPriorityTag);","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"trash-bin99"},"content":"        //cases with different amounts of priority tags","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(TagCommandUtils.hasMultiplePriorityTags(setWithTwoPriorityTag));","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"trash-bin99"},"content":"        assertFalse(TagCommandUtils.hasMultiplePriorityTags(setWithNoPriorityTag));","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"trash-bin99"},"content":"        assertFalse(TagCommandUtils.hasMultiplePriorityTags(setWithOnePriorityTag));","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"trash-bin99"},"content":"        assertFalse(TagCommandUtils.hasMultiplePriorityTags(emptySet));","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"trash-bin99"},"content":"        //case if null","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"trash-bin99"},"content":"        assertThrows(NullPointerException.class, () -\u003e TagCommandUtils.hasMultiplePriorityTags(null));","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"trash-bin99"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"trash-bin99":51}},{"path":"src/test/java/seedu/fast/logic/commands/UnmarkAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.commands;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_AMY;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_AMY;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_AMY;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_SEVENTH_PERSON;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_SIXTH_PERSON;","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.Messages;","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.ModelManager;","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"public class UnmarkAppointmentCommandTest {","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"    private final Model model \u003d new ModelManager(getTypicalFast(), new UserPrefs());","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"    public void equals() {","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"        final UnmarkAppointmentCommand standardCommand \u003d new UnmarkAppointmentCommand(INDEX_THIRD_PERSON,","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"        UnmarkAppointmentCommand commandWithSameValues \u003d new UnmarkAppointmentCommand(INDEX_THIRD_PERSON,","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardCommand.equals(new UnmarkAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY))));","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"        UnmarkAppointmentCommand apptCommand \u003d new UnmarkAppointmentCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(apptCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"    public void execute_unmarkAppointmentUnfilteredList_success() {","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"        Person seventhPerson \u003d model.getFilteredPersonList().get(INDEX_SEVENTH_PERSON.getZeroBased());","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(seventhPerson)","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"                .withAppointmentCount(\"2\")","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"        UnmarkAppointmentCommand appointmentCommand \u003d new UnmarkAppointmentCommand(INDEX_SEVENTH_PERSON,","lastModifiedDate":"2021-10-28"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-28"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(UnmarkAppointmentCommand.MESSAGE_UNMARK_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"                seventhPerson.getName().fullName);","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-28"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(seventhPerson, editedPerson);","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"    public void execute_unmarkAppointmentUnfilteredListZeroCount_failure() {","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(firstPerson)","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"                .withAppointmentCount(\"0\")","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"        UnmarkAppointmentCommand appointmentCommand \u003d new UnmarkAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-28"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(UnmarkAppointmentCommand.MESSAGE_UNMARK_APPOINTMENT_FAILURE_ZERO);","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(appointmentCommand, model, expectedMessage);","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"    public void execute_unmarkAppointmentUnfilteredListAppointmentExist_failure() {","lastModifiedDate":"2021-10-28"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"        Person sixthPerson \u003d model.getFilteredPersonList().get(INDEX_SIXTH_PERSON.getZeroBased());","lastModifiedDate":"2021-10-28"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(sixthPerson)","lastModifiedDate":"2021-10-28"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-28"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"                .withAppointmentCount(\"1\")","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-28"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-28"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"        UnmarkAppointmentCommand appointmentCommand \u003d new UnmarkAppointmentCommand(INDEX_SIXTH_PERSON,","lastModifiedDate":"2021-10-28"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-28"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(UnmarkAppointmentCommand.MESSAGE_UNMARK_APPOINTMENT_FAILURE_EXIST,","lastModifiedDate":"2021-10-28"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"                sixthPerson.getName().fullName);","lastModifiedDate":"2021-10-28"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(appointmentCommand, model, expectedMessage);","lastModifiedDate":"2021-10-28"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2021-10-28"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-28"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-28"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"        // ensures that outOfBoundIndex is still in bounds of FAST list","lastModifiedDate":"2021-10-28"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFast().getPersonList().size());","lastModifiedDate":"2021-10-28"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"        UnmarkAppointmentCommand apptCommand \u003d new UnmarkAppointmentCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-28"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-28"},{"lineNumber":131,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(apptCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-28"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"    public void execute_unmarkAppointmentFilteredList_success() {","lastModifiedDate":"2021-10-28"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_SEVENTH_PERSON);","lastModifiedDate":"2021-10-28"},{"lineNumber":137,"author":{"gitId":"Py0000"},"content":"        Person seventhPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-28"},{"lineNumber":138,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(seventhPerson)","lastModifiedDate":"2021-10-28"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-28"},{"lineNumber":140,"author":{"gitId":"Py0000"},"content":"                .withAppointmentCount(\"2\")","lastModifiedDate":"2021-10-28"},{"lineNumber":141,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-28"},{"lineNumber":142,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-28"},{"lineNumber":143,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":144,"author":{"gitId":"Py0000"},"content":"        UnmarkAppointmentCommand appointmentCommand \u003d new UnmarkAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-28"},{"lineNumber":145,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-28"},{"lineNumber":146,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":147,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(UnmarkAppointmentCommand.MESSAGE_UNMARK_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-28"},{"lineNumber":148,"author":{"gitId":"Py0000"},"content":"                seventhPerson.getName().fullName);","lastModifiedDate":"2021-10-28"},{"lineNumber":149,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"        Model expectedModel \u003d new ModelManager(new Fast(model.getFast()), new UserPrefs());","lastModifiedDate":"2021-10-28"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"        expectedModel.setPerson(seventhPerson, editedPerson);","lastModifiedDate":"2021-10-28"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":153,"author":{"gitId":"Py0000"},"content":"        assertCommandSuccess(appointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-28"},{"lineNumber":154,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":155,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":156,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":157,"author":{"gitId":"Py0000"},"content":"    public void execute_unmarkAppointmentFilteredListZeroCount_failure() {","lastModifiedDate":"2021-10-28"},{"lineNumber":158,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_THIRD_PERSON);","lastModifiedDate":"2021-10-28"},{"lineNumber":159,"author":{"gitId":"Py0000"},"content":"        Person thirdPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-28"},{"lineNumber":160,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(thirdPerson)","lastModifiedDate":"2021-10-28"},{"lineNumber":161,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-28"},{"lineNumber":162,"author":{"gitId":"Py0000"},"content":"                .withAppointmentCount(\"0\")","lastModifiedDate":"2021-10-28"},{"lineNumber":163,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-28"},{"lineNumber":164,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-28"},{"lineNumber":165,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":166,"author":{"gitId":"Py0000"},"content":"        UnmarkAppointmentCommand appointmentCommand \u003d new UnmarkAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-28"},{"lineNumber":167,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-28"},{"lineNumber":168,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":169,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(UnmarkAppointmentCommand.MESSAGE_UNMARK_APPOINTMENT_FAILURE_ZERO);","lastModifiedDate":"2021-10-28"},{"lineNumber":170,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":171,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(appointmentCommand, model, expectedMessage);","lastModifiedDate":"2021-10-28"},{"lineNumber":172,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":173,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":174,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":175,"author":{"gitId":"Py0000"},"content":"    public void execute_unmarkAppointmentFilteredListAppointmentExist_failure() {","lastModifiedDate":"2021-10-28"},{"lineNumber":176,"author":{"gitId":"Py0000"},"content":"        showPersonAtIndex(model, INDEX_SIXTH_PERSON);","lastModifiedDate":"2021-10-28"},{"lineNumber":177,"author":{"gitId":"Py0000"},"content":"        Person sixthPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-28"},{"lineNumber":178,"author":{"gitId":"Py0000"},"content":"        Person editedPerson \u003d new PersonBuilder(sixthPerson)","lastModifiedDate":"2021-10-28"},{"lineNumber":179,"author":{"gitId":"Py0000"},"content":"                .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-28"},{"lineNumber":180,"author":{"gitId":"Py0000"},"content":"                .withAppointmentCount(\"1\")","lastModifiedDate":"2021-10-28"},{"lineNumber":181,"author":{"gitId":"Py0000"},"content":"                .build();","lastModifiedDate":"2021-10-28"},{"lineNumber":182,"author":{"gitId":"Py0000"},"content":"        Appointment editedAppt \u003d editedPerson.getAppointment();","lastModifiedDate":"2021-10-28"},{"lineNumber":183,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":184,"author":{"gitId":"Py0000"},"content":"        UnmarkAppointmentCommand appointmentCommand \u003d new UnmarkAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-28"},{"lineNumber":185,"author":{"gitId":"Py0000"},"content":"                new Appointment(editedAppt.getDate(), editedAppt.getTimeFormatted(), editedAppt.getVenue()));","lastModifiedDate":"2021-10-28"},{"lineNumber":186,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":187,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(UnmarkAppointmentCommand.MESSAGE_UNMARK_APPOINTMENT_FAILURE_EXIST,","lastModifiedDate":"2021-10-28"},{"lineNumber":188,"author":{"gitId":"Py0000"},"content":"                sixthPerson.getName().fullName);","lastModifiedDate":"2021-10-28"},{"lineNumber":189,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":190,"author":{"gitId":"Py0000"},"content":"        assertCommandFailure(appointmentCommand, model, expectedMessage);","lastModifiedDate":"2021-10-28"},{"lineNumber":191,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":192,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"Py0000":192}},{"path":"src/test/java/seedu/fast/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.AddCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Address;","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Email;","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2017-12-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2017-12-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2017-12-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2017-12-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"squeakysquak":38,"-":103}},{"path":"src/test/java/seedu/fast/logic/parser/AppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_INPUT;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_INPUT;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT_TIME;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT_VENUE;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.AppointmentCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"public class AppointmentCommandParserTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"    private AppointmentCommandParser parser \u003d new AppointmentCommandParser();","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"    public void parse_indexSpecifiedWithoutAddition_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT_INPUT;","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand expectedCommand \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"    public void parse_indexSpecifiedWithAddition_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT_INPUT","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"                + \" \" + PREFIX_APPOINTMENT_TIME + VALID_APPOINTMENT_TIME_INPUT","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"                + \" \" + PREFIX_APPOINTMENT_VENUE + VALID_APPOINTMENT_VENUE_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand expectedCommand \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_BOB));","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"    public void parse_indexSpecifiedWithTime_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT_INPUT","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"                + \" \" + PREFIX_APPOINTMENT_TIME + VALID_APPOINTMENT_TIME_INPUT;","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand expectedCommand \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"    public void parse_indexSpecifiedWithVenue_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT_INPUT","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"                + \" \" + PREFIX_APPOINTMENT_VENUE + VALID_APPOINTMENT_VENUE_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand expectedCommand \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_BOB));","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-05"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"    public void parse_indexSpecifiedWithRepeatedFields_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT_INPUT","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"                + \" \" + PREFIX_APPOINTMENT_VENUE + VALID_APPOINTMENT_VENUE_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"                + \" \" + PREFIX_APPOINTMENT_VENUE + VALID_APPOINTMENT_VENUE_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"                + \" \" + PREFIX_APPOINTMENT_VENUE + VALID_APPOINTMENT_VENUE_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand expectedCommand \u003d new AppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_BOB));","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"    public void parse_missingCompulsoryField_failure() {","lastModifiedDate":"2021-10-05"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"                AppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-05"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"        // no parameters","lastModifiedDate":"2021-10-05"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"\", expectedMessage);","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"        // no index, with date","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, PREFIX_APPOINTMENT + VALID_APPOINTMENT_INPUT, expectedMessage);","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"        // with index, no date, no time, no venue","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"\" + INDEX_FIRST_PERSON.getOneBased(), expectedMessage);","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"        // with index, no date, with time","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_APPOINTMENT_TIME","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"                + VALID_APPOINTMENT_TIME_BOB, expectedMessage);","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"        // with index, no date, with venue","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_APPOINTMENT_VENUE","lastModifiedDate":"2021-10-15"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"                + VALID_APPOINTMENT_VENUE_BOB, expectedMessage);","lastModifiedDate":"2021-10-15"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"        // with index, no date, with time and venue","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_APPOINTMENT_TIME","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"                + VALID_APPOINTMENT_TIME_BOB + \" \" + PREFIX_APPOINTMENT_VENUE + VALID_APPOINTMENT_VENUE_BOB,","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Py0000":107}},{"path":"src/test/java/seedu/fast/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"squeakysquak":1,"-":149}},{"path":"src/test/java/seedu/fast/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.Command;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {","lastModifiedDate":"2017-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"squeakysquak":3,"-":35}},{"path":"src/test/java/seedu/fast/logic/parser/DeleteAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_INPUT;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"public class DeleteAppointmentCommandParserTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"    private DeleteAppointmentCommandParser parser \u003d new DeleteAppointmentCommandParser();","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"    public void parse_indexSpecified_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"        String userInput \u003d String.valueOf(targetIndex.getOneBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"        DeleteAppointmentCommand expectedCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"    public void parse_missingCompulsoryField_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"                DeleteAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"        // no parameters","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"\", expectedMessage);","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"    public void parse_additionalField_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"                DeleteAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_APPOINTMENT","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"                        + VALID_APPOINTMENT_INPUT, expectedMessage);","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":48}},{"path":"src/test/java/seedu/fast/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.DeleteCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"    public void parse_validArgsSingle_returnsDeleteCommand() {","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(new Index[] {INDEX_FIRST_PERSON}));","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"    public void parse_invalidArgsSingle_throwsParseException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"                DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"    public void parse_validArgsMultiple_returnsDeleteCommand() {","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, \"1 2 3\",","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"                new DeleteCommand(new Index[] {INDEX_FIRST_PERSON, INDEX_SECOND_PERSON, INDEX_THIRD_PERSON}));","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"    public void parse_invalidArgsMultiple_throwsParseException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"2 a 3\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"                DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"    public void parse_rangeArgs_returnsDeleteCommand() {","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, \"1-3\",","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"                new DeleteCommand(new Index[] {INDEX_FIRST_PERSON, INDEX_SECOND_PERSON, INDEX_THIRD_PERSON}));","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, \"1 - 3\",","lastModifiedDate":"2021-10-30"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"                new DeleteCommand(new Index[] {INDEX_FIRST_PERSON, INDEX_SECOND_PERSON, INDEX_THIRD_PERSON}));","lastModifiedDate":"2021-10-30"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"    public void parse_sameRangeArgs_returnsDeleteCommand() {","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, \"3-3\",","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"                new DeleteCommand(new Index[] {INDEX_THIRD_PERSON}));","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"    public void parse_reversedRangeArgs_throwsParseException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"10-8\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"                DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"6-5\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-30"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"                DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-30"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"    public void parse_invalidRangeArgs_throwsParseException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"a-5\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"                DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"-5\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"                DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"1-\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"                DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"1--3\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-30"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"                DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"squeakysquak":6,"Py0000":61,"-":21}},{"path":"src/test/java/seedu/fast/logic/parser/EditAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_INPUT;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_INPUT;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT_TIME;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT_VENUE;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"import seedu.fast.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"public class EditAppointmentCommandParserTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"    private EditAppointmentCommandParser parser \u003d new EditAppointmentCommandParser();","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"    public void parse_indexSpecifiedWithDateOnly_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT_INPUT;","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"                .withDate(VALID_APPOINTMENT_BOB).build();","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"                descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"    public void parse_indexSpecifiedWithTwoFields_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_APPOINTMENT_TIME","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"                + VALID_APPOINTMENT_TIME_INPUT + \" \" + PREFIX_APPOINTMENT_VENUE + VALID_APPOINTMENT_VENUE_BOB;","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"                .withTime(VALID_APPOINTMENT_TIME_BOB).withVenue(VALID_APPOINTMENT_VENUE_BOB).build();","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"                descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"    public void parse_indexSpecifiedWithAllFields_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT_INPUT + \" \"","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"                + PREFIX_APPOINTMENT_TIME + VALID_APPOINTMENT_TIME_INPUT + \" \"","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"                + PREFIX_APPOINTMENT_VENUE + VALID_APPOINTMENT_VENUE_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().withDate(VALID_APPOINTMENT_BOB)","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"                .withTime(VALID_APPOINTMENT_TIME_BOB).withVenue(VALID_APPOINTMENT_VENUE_BOB).build();","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"                descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"    public void parse_indexSpecifiedWithRepeatedFields_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT_INPUT","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"                + \" \" + PREFIX_APPOINTMENT_TIME + VALID_APPOINTMENT_TIME_INPUT + \" \"","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"                + PREFIX_APPOINTMENT_TIME + VALID_APPOINTMENT_TIME_INPUT + \" \"","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"                + PREFIX_APPOINTMENT_TIME + VALID_APPOINTMENT_TIME_INPUT + \" \"","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"                + PREFIX_APPOINTMENT_VENUE + VALID_APPOINTMENT_VENUE_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"                .withDate(VALID_APPOINTMENT_BOB).withTime(VALID_APPOINTMENT_TIME_BOB)","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"                .withVenue(VALID_APPOINTMENT_VENUE_BOB).build();","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"                descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"    public void parse_indexSpecifiedWithSpacesFields_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT_INPUT","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"                + \" \" + PREFIX_APPOINTMENT_TIME + \" \" + \" \"","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"                + PREFIX_APPOINTMENT_VENUE + VALID_APPOINTMENT_VENUE_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"                .withDate(VALID_APPOINTMENT_BOB).withTime(VALID_APPOINTMENT_TIME_AMY)","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"                .withVenue(VALID_APPOINTMENT_VENUE_BOB).build();","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"                descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"    public void parse_missingCompulsoryField_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"        String expectedMessageInvalidCommand \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-15"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"                EditAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-14"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"        String expectedMessageMissingAllFields \u003d EditAppointmentCommand.MESSAGE_UPDATE_APPOINTMENT_FAILED","lastModifiedDate":"2021-10-16"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"                + \"\\n\" + EditAppointmentCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-16"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"        String expectedMessageWrongDateFormat \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"                Appointment.INVALID_DATE_INPUT);","lastModifiedDate":"2021-10-15"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"        // no parameters","lastModifiedDate":"2021-10-14"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"\", expectedMessageInvalidCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"        // no index, with date","lastModifiedDate":"2021-10-14"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, PREFIX_APPOINTMENT + VALID_APPOINTMENT_INPUT,","lastModifiedDate":"2021-10-15"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"                expectedMessageInvalidCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"        // with index, no date, no time, no venue","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"\" + INDEX_FIRST_PERSON.getOneBased(), expectedMessageMissingAllFields);","lastModifiedDate":"2021-10-15"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"        // with index, with date prefix, blank date","lastModifiedDate":"2021-10-14"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_APPOINTMENT","lastModifiedDate":"2021-10-15"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"                + \" \", expectedMessageWrongDateFormat);","lastModifiedDate":"2021-10-15"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":126}},{"path":"src/test/java/seedu/fast/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.EditCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Address;","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Email;","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"squeakysquak":40,"-":171}},{"path":"src/test/java/seedu/fast/logic/parser/FastParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT_VENUE;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.sort.SortByName;","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.AddCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.AppointmentCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.DeleteCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.EditCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.FindCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.ListCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.MarkAppointmentCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.RemarkCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.logic.commands.SortCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.UnmarkAppointmentCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.NameContainsQueriesPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Remark;","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.PersonUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"squeakysquak"},"content":"public class FastParserTest {","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"squeakysquak"},"content":"    private final FastParser parser \u003d new FastParser();","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"        assertEquals(new DeleteCommand(new Index[] {INDEX_FIRST_PERSON}), command);","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(new FindCommand(new NameContainsQueriesPredicate(keywords)), command);","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"    public void parseCommand_remark() throws Exception {","lastModifiedDate":"2021-10-05"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"        final Remark remark \u003d new Remark(\"Some remark.\");","lastModifiedDate":"2021-10-05"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-05"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + remark);","lastModifiedDate":"2021-10-05"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);","lastModifiedDate":"2021-10-05"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"    public void parseCommand_appointment() throws Exception {","lastModifiedDate":"2021-10-05"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"        final LocalDate date \u003d LocalDate.parse(\"2025-10-10\");","lastModifiedDate":"2021-10-30"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"        final String dateString \u003d date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":131,"author":{"gitId":"Py0000"},"content":"        final Appointment appt \u003d new Appointment(dateString, Appointment.NO_TIME, Appointment.NO_VENUE);","lastModifiedDate":"2021-10-15"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"        AppointmentCommand command \u003d (AppointmentCommand) parser.parseCommand(","lastModifiedDate":"2021-10-05"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"                AppointmentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-10-05"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"                        + PREFIX_APPOINTMENT + \"2025-10-10\");","lastModifiedDate":"2021-10-30"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"        assertEquals(new AppointmentCommand(INDEX_FIRST_PERSON, appt), command);","lastModifiedDate":"2021-10-05"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":137,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":138,"author":{"gitId":"Th-429B"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":139,"author":{"gitId":"Th-429B"},"content":"    public void parseCommand_sort() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":140,"author":{"gitId":"Th-429B"},"content":"        final SortByName sortByName \u003d new SortByName();","lastModifiedDate":"2021-10-15"},{"lineNumber":141,"author":{"gitId":"Th-429B"},"content":"        final String keyword \u003d SortByName.KEYWORD;","lastModifiedDate":"2021-10-15"},{"lineNumber":142,"author":{"gitId":"Th-429B"},"content":"        SortCommand command \u003d (SortCommand) parser.parseCommand(SortCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-15"},{"lineNumber":143,"author":{"gitId":"Th-429B"},"content":"                + keyword);","lastModifiedDate":"2021-10-15"},{"lineNumber":144,"author":{"gitId":"Th-429B"},"content":"        assertEquals(new SortCommand(sortByName, keyword), command);","lastModifiedDate":"2021-10-15"},{"lineNumber":145,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":146,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":147,"author":{"gitId":"Py0000"},"content":"    public void parseCommand_deleteAppointment() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":148,"author":{"gitId":"Py0000"},"content":"        final Appointment appt \u003d new Appointment(Appointment.NO_APPOINTMENT, Appointment.NO_TIME,","lastModifiedDate":"2021-10-15"},{"lineNumber":149,"author":{"gitId":"Py0000"},"content":"                Appointment.NO_VENUE);","lastModifiedDate":"2021-10-15"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"        DeleteAppointmentCommand command \u003d (DeleteAppointmentCommand) parser.parseCommand(","lastModifiedDate":"2021-10-15"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"                DeleteAppointmentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2021-10-15"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"        assertEquals(new DeleteAppointmentCommand(INDEX_FIRST_PERSON, appt), command);","lastModifiedDate":"2021-10-15"},{"lineNumber":153,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":154,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":155,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":156,"author":{"gitId":"Py0000"},"content":"    public void parseCommand_editAppointment() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":157,"author":{"gitId":"Py0000"},"content":"        final LocalDate date \u003d LocalDate.parse(\"2025-10-10\");","lastModifiedDate":"2021-10-30"},{"lineNumber":158,"author":{"gitId":"Py0000"},"content":"        final String dateString \u003d date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":159,"author":{"gitId":"Py0000"},"content":"        final String venue \u003d \"Clementi Mall\";","lastModifiedDate":"2021-10-15"},{"lineNumber":160,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":161,"author":{"gitId":"Py0000"},"content":"        final EditAppointmentDescriptor appt \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2021-10-15"},{"lineNumber":162,"author":{"gitId":"Py0000"},"content":"        appt.setDate(dateString);","lastModifiedDate":"2021-10-15"},{"lineNumber":163,"author":{"gitId":"Py0000"},"content":"        appt.setVenue(venue);","lastModifiedDate":"2021-10-15"},{"lineNumber":164,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":165,"author":{"gitId":"Py0000"},"content":"        EditAppointmentCommand command \u003d (EditAppointmentCommand) parser.parseCommand(","lastModifiedDate":"2021-10-15"},{"lineNumber":166,"author":{"gitId":"Py0000"},"content":"                EditAppointmentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-10-15"},{"lineNumber":167,"author":{"gitId":"Py0000"},"content":"                        + PREFIX_APPOINTMENT + \"2025-10-10\" + \" \" + PREFIX_APPOINTMENT_VENUE + venue);","lastModifiedDate":"2021-10-30"},{"lineNumber":168,"author":{"gitId":"Py0000"},"content":"        assertEquals(new EditAppointmentCommand(INDEX_FIRST_PERSON, appt), command);","lastModifiedDate":"2021-10-15"},{"lineNumber":169,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":170,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":171,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":172,"author":{"gitId":"Py0000"},"content":"    public void parseCommand_markAppointment() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":173,"author":{"gitId":"Py0000"},"content":"        final Appointment appt \u003d new Appointment(Appointment.NO_APPOINTMENT, Appointment.NO_TIME,","lastModifiedDate":"2021-10-15"},{"lineNumber":174,"author":{"gitId":"Py0000"},"content":"                Appointment.NO_VENUE);","lastModifiedDate":"2021-10-15"},{"lineNumber":175,"author":{"gitId":"Py0000"},"content":"        MarkAppointmentCommand command \u003d (MarkAppointmentCommand) parser.parseCommand(","lastModifiedDate":"2021-10-15"},{"lineNumber":176,"author":{"gitId":"Py0000"},"content":"                MarkAppointmentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2021-10-15"},{"lineNumber":177,"author":{"gitId":"Py0000"},"content":"        assertEquals(new MarkAppointmentCommand(INDEX_FIRST_PERSON, appt), command);","lastModifiedDate":"2021-10-15"},{"lineNumber":178,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":179,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":180,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":181,"author":{"gitId":"Py0000"},"content":"    public void parseCommand_unmarkAppointment() throws Exception {","lastModifiedDate":"2021-10-28"},{"lineNumber":182,"author":{"gitId":"Py0000"},"content":"        final Appointment appt \u003d new Appointment(Appointment.NO_APPOINTMENT, Appointment.NO_TIME,","lastModifiedDate":"2021-10-28"},{"lineNumber":183,"author":{"gitId":"Py0000"},"content":"                Appointment.NO_VENUE);","lastModifiedDate":"2021-10-28"},{"lineNumber":184,"author":{"gitId":"Py0000"},"content":"        UnmarkAppointmentCommand command \u003d (UnmarkAppointmentCommand) parser.parseCommand(","lastModifiedDate":"2021-10-28"},{"lineNumber":185,"author":{"gitId":"Py0000"},"content":"                UnmarkAppointmentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2021-10-28"},{"lineNumber":186,"author":{"gitId":"Py0000"},"content":"        assertEquals(new UnmarkAppointmentCommand(INDEX_FIRST_PERSON, appt), command);","lastModifiedDate":"2021-10-28"},{"lineNumber":187,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"squeakysquak":25,"Py0000":76,"-":75,"Th-429B":12}},{"path":"src/test/java/seedu/fast/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_PRIORITY_TAG;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.FindCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.NameContainsQueriesPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.PriorityPredicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.RemarkContainsKeywordPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.TagMatchesKeywordPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.PriorityTag;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"                new FindCommand(new NameContainsQueriesPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"squeakysquak"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"squeakysquak"},"content":"    public void parse_validArgs_returnsFindPriorityCommand() {","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"squeakysquak"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"squeakysquak"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"squeakysquak"},"content":"                new FindCommand(new PriorityPredicate(Arrays.asList(PriorityTag.LowPriority.TERM,","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"squeakysquak"},"content":"                        PriorityTag.MediumPriority.TERM)));","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"trash-bin99"},"content":"        assertParseSuccess(parser , PREFIX_PRIORITY_TAG.getPrefix()","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"squeakysquak"},"content":"                + PriorityTag.LowPriority.TERM + \" \"","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"squeakysquak"},"content":"                + PriorityTag.MediumPriority.TERM , expectedFindCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"squeakysquak"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"trash-bin99"},"content":"        assertParseSuccess(parser, PREFIX_PRIORITY_TAG.getPrefix()","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"squeakysquak"},"content":"                + PriorityTag.LowPriority.TERM + \" \\n \\t \"","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"squeakysquak"},"content":"                + PriorityTag.MediumPriority.TERM , expectedFindCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"squeakysquak"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"squeakysquak"},"content":"    public void parse_validArgs_returnsFindTagCommand() {","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"squeakysquak"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"squeakysquak"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"squeakysquak"},"content":"                new FindCommand(new TagMatchesKeywordPredicate(Arrays.asList(\"poo\",","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"squeakysquak"},"content":"                        \"pee\")));","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"squeakysquak"},"content":"        assertParseSuccess(parser , FindCommand.TAG_PREFIX","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"squeakysquak"},"content":"                + \"poo pee\", expectedFindCommand);","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"squeakysquak"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"squeakysquak"},"content":"        assertParseSuccess(parser, FindCommand.TAG_PREFIX","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"squeakysquak"},"content":"                + \"poo \\n \\t pee\" , expectedFindCommand);","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"squeakysquak"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"squeakysquak"},"content":"    public void parse_validArgs_returnsFindRemarkCommand() {","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"squeakysquak"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"squeakysquak"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"squeakysquak"},"content":"                new FindCommand(new RemarkContainsKeywordPredicate(Arrays.asList(\"poo\",","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"squeakysquak"},"content":"                        \"pee\")));","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"squeakysquak"},"content":"        assertParseSuccess(parser , FindCommand.REMARK_PREFIX","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"squeakysquak"},"content":"                + \"poo pee\", expectedFindCommand);","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"squeakysquak"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"squeakysquak"},"content":"        assertParseSuccess(parser, FindCommand.REMARK_PREFIX","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"squeakysquak"},"content":"                + \"poo \\n \\t pee\" , expectedFindCommand);","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"squeakysquak"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"squeakysquak":50,"trash-bin99":3,"-":27}},{"path":"src/test/java/seedu/fast/logic/parser/HelpCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Cyn7hius"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"Cyn7hius"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"Cyn7hius"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"Cyn7hius"},"content":"public class HelpCommandParserTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"    private final String validHelpArg1 \u003d \"Add\";","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"    private final String validHelpArg2 \u003d \"priority tag\";","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"    private final String invalidHelpArg \u003d \"incorrect\";","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"Cyn7hius"},"content":"    private final String emptyArg \u003d \"\";","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":"    private HelpCommandParser parser \u003d new HelpCommandParser();","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"Cyn7hius"},"content":"    public void parse_withArgsHelp_success() {","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"Cyn7hius"},"content":"        HelpCommand expectedCommand1 \u003d new HelpCommand(validHelpArg1);","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"Cyn7hius"},"content":"        assertParseSuccess(parser, \"add\", expectedCommand1);","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"Cyn7hius"},"content":"        HelpCommand expectedCommand2 \u003d new HelpCommand(validHelpArg2);","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"Cyn7hius"},"content":"        assertParseSuccess(parser, \"priority tag\", expectedCommand1);","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"    public void parse_noArgsHelp_success() {","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"Cyn7hius"},"content":"        HelpCommand expectedCommand1 \u003d new HelpCommand(\"\");","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"Cyn7hius"},"content":"        assertParseSuccess(parser, emptyArg, expectedCommand1);","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"    public void parse_invalidArgsHelp_success() {","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"Cyn7hius"},"content":"        HelpCommand expectedCommand1 \u003d new HelpCommand(\"\");","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"Cyn7hius"},"content":"        assertParseSuccess(parser, invalidHelpArg, expectedCommand1);","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"Cyn7hius":46}},{"path":"src/test/java/seedu/fast/logic/parser/MarkAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_INPUT;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.MarkAppointmentCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"public class MarkAppointmentCommandParserTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"    private MarkAppointmentCommandParser parser \u003d new MarkAppointmentCommandParser();","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"    public void parse_indexSpecified_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"        String userInput \u003d String.valueOf(targetIndex.getOneBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"        MarkAppointmentCommand expectedCommand \u003d new MarkAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"    public void parse_missingCompulsoryField_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"                MarkAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"        // no parameters","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"\", expectedMessage);","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"    public void parse_additionalField_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"                MarkAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"                        + PREFIX_APPOINTMENT + VALID_APPOINTMENT_INPUT, expectedMessage);","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":48}},{"path":"src/test/java/seedu/fast/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.logic.parser.exceptions.HelpParseException;","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Address;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Email;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.tag.InvestmentPlanTag;","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.tag.PriorityTag;","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"Cyn7hius"},"content":"    private static final String INVALID_HELP_ARG_1 \u003d \"add\";","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"Cyn7hius"},"content":"    private static final String INVALID_HELP_ARG_2 \u003d \"archive\";","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"Cyn7hius"},"content":"    private static final String INVALID_HELP_COMMAND_1 \u003d \"help archive\";","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"    private static final String INVALID_HELP_COMMAND_2 \u003d \"help random command\";","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_DATE_INPUT \u003d \"10-10-2025\";","lastModifiedDate":"2021-10-30"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_DATE_INPUT_2 \u003d \"10-Oct-2025\";","lastModifiedDate":"2021-10-30"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_DATE_INPUT_3 \u003d \"10102025\";","lastModifiedDate":"2021-10-30"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_DATE_INPUT_4 \u003d \"10-10-2021\";","lastModifiedDate":"2021-10-30"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_DATE_MONTH_INPUT \u003d \"2025-20-01\";","lastModifiedDate":"2021-10-30"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_DATE_DAY_INPUT \u003d \"2025-10-45\";","lastModifiedDate":"2021-10-30"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_TIME_INPUT \u003d \"8pm\";","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_TIME_INPUT_2 \u003d \"8\";","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_TIME_HOUR_INPUT \u003d \"26:00\";","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_TIME_MINUTE_INPUT \u003d \"08:80\";","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_VENUE_INPUT \u003d \"Test1Test2Test3Test4Test5Test6Test7\";","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":54,"author":{"gitId":"trash-bin99"},"content":"    private static final String VALID_PRIORITY_TAG_1 \u003d \"pr/low\";","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"trash-bin99"},"content":"    private static final String VALID_PRIORITY_TAG_2 \u003d \"pr/high\";","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"trash-bin99"},"content":"    private static final String VALID_INVESTMENT_PLAN_TAG_1 \u003d \"ip/save\";","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"trash-bin99"},"content":"    private static final String VALID_INVESTMENT_PLAN_TAG_2 \u003d \"ip/life\";","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"Cyn7hius"},"content":"    private static final String VALID_HELP_ARG_1 \u003d \"Add\";","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"Cyn7hius"},"content":"    private static final String VALID_HELP_ARG_2 \u003d \"\";","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"Cyn7hius"},"content":"    private static final String VALID_HELP_COMMAND_1 \u003d \"help help\";","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"Cyn7hius"},"content":"    private static final String VALID_HELP_COMMAND_2 \u003d \"help priority tag\";","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"Cyn7hius"},"content":"    private static final String VALID_HELP_COMMAND_OUTPUT_1 \u003d \"Help\";","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"Cyn7hius"},"content":"    private static final String VALID_HELP_COMMAND_OUTPUT_2 \u003d \"Priority Tag\";","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"    private static final String VALID_DATE_INPUT \u003d \"2025-10-10\";","lastModifiedDate":"2021-10-30"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"    private static final String FORMATTED_DATE \u003d \"10 Oct 2025\";","lastModifiedDate":"2021-10-30"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"    private static final String VALID_TIME_INPUT \u003d \"20:00\";","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"    private static final String FORMATTED_TIME \u003d \"2000\";","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"    private static final String VALID_VENUE_INPUT \u003d \"Clementi Mall\";","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"Cyn7hius"},"content":"    private static final String SAMPLE_STRING \u003d \"the quick brown fox jumped over the lazy dog\";","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":231,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":232,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":233,"author":{"gitId":"Cyn7hius"},"content":"    public void matchArgs_withSmallLetters_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":234,"author":{"gitId":"Cyn7hius"},"content":"        String actual \u003d ParserUtil.matchArgs(INVALID_HELP_ARG_1);","lastModifiedDate":"2021-10-12"},{"lineNumber":235,"author":{"gitId":"Cyn7hius"},"content":"        String expected \u003d \"\";","lastModifiedDate":"2021-10-12"},{"lineNumber":236,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":237,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2021-10-12"},{"lineNumber":238,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":239,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":240,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":241,"author":{"gitId":"Cyn7hius"},"content":"    public void matchArgs_withBigLetters_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":242,"author":{"gitId":"Cyn7hius"},"content":"        String actual \u003d ParserUtil.matchArgs(VALID_HELP_ARG_1);","lastModifiedDate":"2021-10-12"},{"lineNumber":243,"author":{"gitId":"Cyn7hius"},"content":"        String expected \u003d \"Add\";","lastModifiedDate":"2021-10-12"},{"lineNumber":244,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":245,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2021-10-12"},{"lineNumber":246,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":247,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":248,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":249,"author":{"gitId":"Cyn7hius"},"content":"    public void matchArgs_noInput_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":250,"author":{"gitId":"Cyn7hius"},"content":"        String actual \u003d ParserUtil.matchArgs(VALID_HELP_ARG_2);","lastModifiedDate":"2021-10-12"},{"lineNumber":251,"author":{"gitId":"Cyn7hius"},"content":"        String expected \u003d \"\";","lastModifiedDate":"2021-10-12"},{"lineNumber":252,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":253,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2021-10-12"},{"lineNumber":254,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":255,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":256,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":257,"author":{"gitId":"Cyn7hius"},"content":"    public void matchArgs_invalidInput_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":258,"author":{"gitId":"Cyn7hius"},"content":"        String actual \u003d ParserUtil.matchArgs(INVALID_HELP_ARG_2);","lastModifiedDate":"2021-10-12"},{"lineNumber":259,"author":{"gitId":"Cyn7hius"},"content":"        String expected \u003d \"\";","lastModifiedDate":"2021-10-12"},{"lineNumber":260,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":261,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2021-10-12"},{"lineNumber":262,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":263,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":264,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":265,"author":{"gitId":"Cyn7hius"},"content":"    public void capitaliseFirstLetters_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":266,"author":{"gitId":"Cyn7hius"},"content":"        String actual \u003d ParserUtil.capitaliseFirstLetters(SAMPLE_STRING);","lastModifiedDate":"2021-10-12"},{"lineNumber":267,"author":{"gitId":"Cyn7hius"},"content":"        String expected \u003d \"The Quick Brown Fox Jumped Over The Lazy Dog\";","lastModifiedDate":"2021-10-12"},{"lineNumber":268,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":269,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2021-10-12"},{"lineNumber":270,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":271,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":272,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":273,"author":{"gitId":"Cyn7hius"},"content":"    public void parseHelp_oneWordValidInput_success() throws HelpParseException {","lastModifiedDate":"2021-10-12"},{"lineNumber":274,"author":{"gitId":"Cyn7hius"},"content":"        String actual \u003d ParserUtil.parseHelp(VALID_HELP_COMMAND_1);","lastModifiedDate":"2021-10-12"},{"lineNumber":275,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":276,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(VALID_HELP_COMMAND_OUTPUT_1, actual);","lastModifiedDate":"2021-10-12"},{"lineNumber":277,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":278,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":279,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":280,"author":{"gitId":"Cyn7hius"},"content":"    public void parseHelp_multipleWordsValidInput_success() throws HelpParseException {","lastModifiedDate":"2021-10-12"},{"lineNumber":281,"author":{"gitId":"Cyn7hius"},"content":"        String actual \u003d ParserUtil.parseHelp(VALID_HELP_COMMAND_2);","lastModifiedDate":"2021-10-12"},{"lineNumber":282,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":283,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(VALID_HELP_COMMAND_OUTPUT_2, actual);","lastModifiedDate":"2021-10-12"},{"lineNumber":284,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":285,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":286,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":287,"author":{"gitId":"Cyn7hius"},"content":"    public void parseHelp_invalidInput1_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":288,"author":{"gitId":"Cyn7hius"},"content":"        assertThrows(HelpParseException.class, () -\u003e ParserUtil.parseHelp(INVALID_HELP_COMMAND_1));","lastModifiedDate":"2021-10-12"},{"lineNumber":289,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":290,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":291,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":292,"author":{"gitId":"Cyn7hius"},"content":"    public void parseHelp_invalidInput2_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":293,"author":{"gitId":"Cyn7hius"},"content":"        assertThrows(HelpParseException.class, () -\u003e ParserUtil.parseHelp(INVALID_HELP_COMMAND_2));","lastModifiedDate":"2021-10-12"},{"lineNumber":294,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":295,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":296,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":297,"author":{"gitId":"Py0000"},"content":"    public void parse_validDateFormat_success() throws ParseException {","lastModifiedDate":"2021-10-14"},{"lineNumber":298,"author":{"gitId":"Py0000"},"content":"        assertEquals(FORMATTED_DATE, ParserUtil.parseDateString(VALID_DATE_INPUT));","lastModifiedDate":"2021-10-14"},{"lineNumber":299,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":300,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":301,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":302,"author":{"gitId":"Py0000"},"content":"    public void parse_validTimeFormat_success() throws ParseException {","lastModifiedDate":"2021-10-14"},{"lineNumber":303,"author":{"gitId":"Py0000"},"content":"        assertEquals(FORMATTED_TIME, ParserUtil.parseTimeString(VALID_TIME_INPUT));","lastModifiedDate":"2021-10-14"},{"lineNumber":304,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":305,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":306,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":307,"author":{"gitId":"Py0000"},"content":"    public void parse_invalidDateFormat_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":308,"author":{"gitId":"Py0000"},"content":"        // wrong order","lastModifiedDate":"2021-10-14"},{"lineNumber":309,"author":{"gitId":"Py0000"},"content":"        assertThrows(ParseException.class, ()-\u003e ParserUtil.parseDateString(INVALID_DATE_INPUT));","lastModifiedDate":"2021-10-15"},{"lineNumber":310,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":311,"author":{"gitId":"Py0000"},"content":"        // using text","lastModifiedDate":"2021-10-14"},{"lineNumber":312,"author":{"gitId":"Py0000"},"content":"        assertThrows(ParseException.class, ()-\u003e ParserUtil.parseDateString(INVALID_DATE_INPUT_2));","lastModifiedDate":"2021-10-15"},{"lineNumber":313,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":314,"author":{"gitId":"Py0000"},"content":"        // without dash","lastModifiedDate":"2021-10-14"},{"lineNumber":315,"author":{"gitId":"Py0000"},"content":"        assertThrows(ParseException.class, ()-\u003e ParserUtil.parseDateString(INVALID_DATE_INPUT_3));","lastModifiedDate":"2021-10-15"},{"lineNumber":316,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":317,"author":{"gitId":"Py0000"},"content":"        // past date","lastModifiedDate":"2021-10-30"},{"lineNumber":318,"author":{"gitId":"Py0000"},"content":"        assertThrows(ParseException.class, ()-\u003e ParserUtil.parseDateString(INVALID_DATE_INPUT_4));","lastModifiedDate":"2021-10-30"},{"lineNumber":319,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":320,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":321,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":322,"author":{"gitId":"Py0000"},"content":"    public void parse_appointmentMonthOutOfBound_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":323,"author":{"gitId":"Py0000"},"content":"        assertThrows(ParseException.class, ()-\u003e ParserUtil.parseDateString(INVALID_DATE_MONTH_INPUT));","lastModifiedDate":"2021-10-15"},{"lineNumber":324,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":325,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":326,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":327,"author":{"gitId":"Py0000"},"content":"    public void parse_appointmentDayOutOfBound_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":328,"author":{"gitId":"Py0000"},"content":"        assertThrows(ParseException.class, ()-\u003e ParserUtil.parseDateString(INVALID_DATE_DAY_INPUT));","lastModifiedDate":"2021-10-15"},{"lineNumber":329,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":330,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":331,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":332,"author":{"gitId":"Py0000"},"content":"    public void parse_invalidTimeFormat_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":333,"author":{"gitId":"Py0000"},"content":"        // using 12-hour string-style format (i.e 8pm)","lastModifiedDate":"2021-10-14"},{"lineNumber":334,"author":{"gitId":"Py0000"},"content":"        assertThrows(ParseException.class, ()-\u003e ParserUtil.parseTimeString(INVALID_TIME_INPUT));","lastModifiedDate":"2021-10-15"},{"lineNumber":335,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":336,"author":{"gitId":"Py0000"},"content":"        // without semi-colon","lastModifiedDate":"2021-10-14"},{"lineNumber":337,"author":{"gitId":"Py0000"},"content":"        assertThrows(ParseException.class, ()-\u003e ParserUtil.parseTimeString(FORMATTED_TIME));","lastModifiedDate":"2021-10-14"},{"lineNumber":338,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":339,"author":{"gitId":"Py0000"},"content":"        // specify hour only","lastModifiedDate":"2021-10-14"},{"lineNumber":340,"author":{"gitId":"Py0000"},"content":"        assertThrows(ParseException.class, ()-\u003e ParserUtil.parseTimeString(INVALID_TIME_INPUT_2));","lastModifiedDate":"2021-10-15"},{"lineNumber":341,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":342,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":343,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":344,"author":{"gitId":"Py0000"},"content":"    public void parse_appointmentHourOutOfBound_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":345,"author":{"gitId":"Py0000"},"content":"        assertThrows(ParseException.class, ()-\u003e ParserUtil.parseTimeString(INVALID_TIME_HOUR_INPUT));","lastModifiedDate":"2021-10-15"},{"lineNumber":346,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":347,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":348,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":349,"author":{"gitId":"Py0000"},"content":"    public void parse_appointmentMinuteOutOfBound_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":350,"author":{"gitId":"Py0000"},"content":"        assertThrows(ParseException.class, ()-\u003e ParserUtil.parseTimeString(INVALID_TIME_MINUTE_INPUT));","lastModifiedDate":"2021-10-15"},{"lineNumber":351,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":352,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":353,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":354,"author":{"gitId":"trash-bin99"},"content":"    public void parsePriorityTag_validInput1_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":355,"author":{"gitId":"trash-bin99"},"content":"        String expectedString \u003d PriorityTag.LowPriority.NAME;","lastModifiedDate":"2021-10-19"},{"lineNumber":356,"author":{"gitId":"trash-bin99"},"content":"        assertEquals(expectedString, ParserUtil.parsePriorityTag(VALID_PRIORITY_TAG_1));","lastModifiedDate":"2021-10-19"},{"lineNumber":357,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":358,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":359,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":360,"author":{"gitId":"trash-bin99"},"content":"    public void parsePriorityTag_validInput2_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":361,"author":{"gitId":"trash-bin99"},"content":"        String expectedString \u003d PriorityTag.HighPriority.NAME;","lastModifiedDate":"2021-10-19"},{"lineNumber":362,"author":{"gitId":"trash-bin99"},"content":"        assertEquals(expectedString, ParserUtil.parsePriorityTag(VALID_PRIORITY_TAG_2));","lastModifiedDate":"2021-10-19"},{"lineNumber":363,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":364,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":365,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":366,"author":{"gitId":"trash-bin99"},"content":"    public void parseInvestmentPlanTag_validInput1_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":367,"author":{"gitId":"trash-bin99"},"content":"        String expectedString \u003d InvestmentPlanTag.Savings.NAME;","lastModifiedDate":"2021-10-19"},{"lineNumber":368,"author":{"gitId":"trash-bin99"},"content":"        assertEquals(expectedString, ParserUtil.parseInvestmentPlanTag(VALID_INVESTMENT_PLAN_TAG_1));","lastModifiedDate":"2021-10-19"},{"lineNumber":369,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":370,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":371,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":372,"author":{"gitId":"trash-bin99"},"content":"    public void parseInvestmentPlanTag_validInput2_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":373,"author":{"gitId":"trash-bin99"},"content":"        String expectedString \u003d InvestmentPlanTag.LifeInsurance.NAME;","lastModifiedDate":"2021-10-19"},{"lineNumber":374,"author":{"gitId":"trash-bin99"},"content":"        assertEquals(expectedString, ParserUtil.parseInvestmentPlanTag(VALID_INVESTMENT_PLAN_TAG_2));","lastModifiedDate":"2021-10-19"},{"lineNumber":375,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":376,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":377,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"squeakysquak":10,"trash-bin99":30,"Py0000":75,"-":184,"Cyn7hius":78}},{"path":"src/test/java/seedu/fast/logic/parser/RemarkCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_LENGTH;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.RemarkCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Remark;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class RemarkCommandParserTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private RemarkCommandParser parser \u003d new RemarkCommandParser();","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final String nonEmptyRemark \u003d \"Some remark.\";","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"Th-429B"},"content":"    private final String oneHundredCharRemark \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"Th-429B"},"content":"            \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean ma\";","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void parse_indexSpecified_success() {","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // have remark","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK + nonEmptyRemark;","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        RemarkCommand expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(nonEmptyRemark));","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // no remark","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK;","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(\"\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parse_missingCompulsoryField_failure() {","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // no parameters","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, RemarkCommand.COMMAND_WORD, expectedMessage);","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // no index","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, RemarkCommand.COMMAND_WORD + \" \" + nonEmptyRemark, expectedMessage);","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"Th-429B"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"Th-429B"},"content":"    public void parse_invalidRemarkLength_failure() {","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"Th-429B"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"Th-429B"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK + oneHundredCharRemark;","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"Th-429B"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_LENGTH, RemarkCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"Th-429B"},"content":"        // more than 100 characters","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"Th-429B"},"content":"        assertParseFailure(parser, userInput, expectedMessage);","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Py0000":10,"-":33,"Th-429B":14}},{"path":"src/test/java/seedu/fast/logic/parser/SortCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.sort.SortByAppointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.sort.SortByName;","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.sort.SortByPriority;","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.logic.commands.SortCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"Th-429B"},"content":"public class SortCommandParserTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"Th-429B"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"Th-429B"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"Th-429B"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"Th-429B"},"content":"        assertParseFailure(","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"Th-429B"},"content":"                parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"Th-429B"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"Th-429B"},"content":"    public void parse_invalidArg_throwsParseException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"Th-429B"},"content":"        assertParseFailure(","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"Th-429B"},"content":"                parser, \"nam\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"Th-429B"},"content":"    public void parse_validArgs_returnsSortCommand() {","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"Th-429B"},"content":"        String nameKeyword \u003d \"name\";","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"Th-429B"},"content":"        String appointmentKeyword \u003d \"appointment\";","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"Th-429B"},"content":"        String priorityKeyword \u003d \"priority\";","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"Th-429B"},"content":"        // Different Sort Commands","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"Th-429B"},"content":"        SortCommand expectedSortCommandName \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"Th-429B"},"content":"                new SortCommand(new SortByName(), SortByName.KEYWORD);","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"Th-429B"},"content":"        SortCommand expectedSortCommandAppointment \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"Th-429B"},"content":"                new SortCommand(new SortByAppointment(), SortByAppointment.KEYWORD);","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"Th-429B"},"content":"        SortCommand expectedSortCommandPriority \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"Th-429B"},"content":"                new SortCommand(new SortByPriority(), SortByPriority.KEYWORD);","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"Th-429B"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"Th-429B"},"content":"        assertParseSuccess(parser, nameKeyword, expectedSortCommandName);","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"Th-429B"},"content":"        assertParseSuccess(parser, appointmentKeyword, expectedSortCommandAppointment);","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"Th-429B"},"content":"        assertParseSuccess(parser, priorityKeyword, expectedSortCommandPriority);","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"Th-429B"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"Th-429B"},"content":"        assertParseSuccess(parser, \" \\n name \\n\", expectedSortCommandName);","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"Th-429B"},"content":"        assertParseSuccess(parser, \" \\t name \\n\", expectedSortCommandName);","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"Th-429B":56}},{"path":"src/test/java/seedu/fast/logic/parser/TagCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"trash-bin99"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.model.tag.Tag.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"trash-bin99"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"trash-bin99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.logic.commands.TagCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"trash-bin99"},"content":"public class TagCommandParserTest {","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"trash-bin99"},"content":"    private final String addTagModifier \u003d \"a/\";","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"trash-bin99"},"content":"    private final String deleteTagModifier \u003d \"d/\";","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"trash-bin99"},"content":"    private final String invalidModifier \u003d \"k/\";","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"trash-bin99"},"content":"    private final String validTagNameNormal \u003d \"fat \";","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"trash-bin99"},"content":"    private final String invalidTagName \u003d \"idolM@STER\";","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"trash-bin99"},"content":"    private final String validTagNamePriority \u003d \"pr/low \";","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"trash-bin99"},"content":"    private final String validTagNameInvestmentPlan \u003d \"ip/life \";","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"trash-bin99"},"content":"    private final String validIndex \u003d \"1 \";","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"trash-bin99"},"content":"    private final String invalidIndex \u003d \"-1 \";","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"trash-bin99"},"content":"    private final String whitespace \u003d \" \";","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"trash-bin99"},"content":"    private final String errorMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"trash-bin99"},"content":"    private TagCommandParser parser \u003d new TagCommandParser();","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"trash-bin99"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"trash-bin99"},"content":"        assertParseFailure(parser, \"\",","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"trash-bin99"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"trash-bin99"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"trash-bin99"},"content":"        //invalid command","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"trash-bin99"},"content":"        String invalidInput \u003d \"invalidd\";","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"trash-bin99"},"content":"        assertParseFailure(parser, invalidInput, errorMessage);","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"trash-bin99"},"content":"        //invalid components","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"trash-bin99"},"content":"        String invalidIndexInput \u003d invalidIndex + addTagModifier + validTagNameNormal;","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"trash-bin99"},"content":"        String invalidTagNameInput \u003d validIndex + addTagModifier + invalidTagName;","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"trash-bin99"},"content":"        String invalidModifierInput \u003d validIndex + invalidModifier + validTagNameNormal;","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"trash-bin99"},"content":"        assertParseFailure(parser, invalidIndexInput, errorMessage);","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"trash-bin99"},"content":"        assertParseFailure(parser, invalidTagNameInput, MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"trash-bin99"},"content":"        assertParseFailure(parser, invalidModifierInput, errorMessage);","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"trash-bin99"},"content":"    public void parse_validArgs_returnsTagCommand() {","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"trash-bin99"},"content":"        String addTagInput \u003d validIndex + addTagModifier + validTagNameNormal;","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"trash-bin99"},"content":"        String addPriorityTagInput \u003d validIndex + addTagModifier + validTagNamePriority;","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"trash-bin99"},"content":"        String addInvestmentPlanTagInput \u003d validIndex + addTagModifier + validTagNameInvestmentPlan;","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"trash-bin99"},"content":"        String deleteTagInput \u003d validIndex + deleteTagModifier + validTagNameNormal;","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"trash-bin99"},"content":"        String deletePriorityTagInput \u003d validIndex + deleteTagModifier + validTagNamePriority;","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"trash-bin99"},"content":"        String deleteInvestmentPlanTagInput \u003d validIndex + deleteTagModifier + validTagNameInvestmentPlan;","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"trash-bin99"},"content":"        String mixedInput \u003d validIndex + addTagModifier + validTagNamePriority","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"trash-bin99"},"content":"                + deleteTagModifier + validTagNameInvestmentPlan;","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"trash-bin99"},"content":"        String mixedInputWithWhitespace \u003d validIndex + addTagModifier + whitespace + validTagNamePriority","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"trash-bin99"},"content":"                + deleteTagModifier + whitespace + validTagNameInvestmentPlan;","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"trash-bin99"},"content":"        HashSet\u003cTag\u003e emptyTagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"trash-bin99"},"content":"        //expected instances of TagCommand","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"trash-bin99"},"content":"        TagCommand expectedTagCommandAddTag \u003d new TagCommand(","lastModifiedDate":"2021-10-20"},{"lineNumber":73,"author":{"gitId":"trash-bin99"},"content":"                INDEX_FIRST_PERSON, Collections.singleton(Tag.createTag(\"fat\")), emptyTagSet);","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"trash-bin99"},"content":"        TagCommand expectedTagCommandAddPriorityTag \u003d new TagCommand(","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"trash-bin99"},"content":"                INDEX_FIRST_PERSON, Collections.singleton(Tag.createTag(\"pr/low\")), emptyTagSet);","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"trash-bin99"},"content":"        TagCommand expectedTagCommandAddInvestmentPlanTag \u003d new TagCommand(","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"trash-bin99"},"content":"                INDEX_FIRST_PERSON, Collections.singleton(Tag.createTag(\"ip/life\")), emptyTagSet);","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"trash-bin99"},"content":"        TagCommand expectedTagCommandDeleteTag \u003d new TagCommand(","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"trash-bin99"},"content":"                INDEX_FIRST_PERSON, emptyTagSet, Collections.singleton(Tag.createTag(\"fat\")));","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"trash-bin99"},"content":"        TagCommand expectedTagCommandDeletePriorityTag \u003d new TagCommand(","lastModifiedDate":"2021-10-20"},{"lineNumber":81,"author":{"gitId":"trash-bin99"},"content":"                INDEX_FIRST_PERSON, emptyTagSet, Collections.singleton(Tag.createTag(\"pr/low\")));","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"trash-bin99"},"content":"        TagCommand expectedTagCommandDeleteInvestmentPlanTag \u003d new TagCommand(","lastModifiedDate":"2021-10-20"},{"lineNumber":83,"author":{"gitId":"trash-bin99"},"content":"                INDEX_FIRST_PERSON, emptyTagSet, Collections.singleton(Tag.createTag(\"ip/life\")));","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"trash-bin99"},"content":"        TagCommand expectedTagCommandMixed \u003d new TagCommand(","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"trash-bin99"},"content":"                INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"trash-bin99"},"content":"                Collections.singleton(Tag.createTag(\"pr/low\")),","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"trash-bin99"},"content":"                Collections.singleton(Tag.createTag(\"ip/life\")));","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"trash-bin99"},"content":"        assertParseSuccess(parser, addTagInput, expectedTagCommandAddTag);","lastModifiedDate":"2021-10-20"},{"lineNumber":90,"author":{"gitId":"trash-bin99"},"content":"        assertParseSuccess(parser, addPriorityTagInput, expectedTagCommandAddPriorityTag);","lastModifiedDate":"2021-10-20"},{"lineNumber":91,"author":{"gitId":"trash-bin99"},"content":"        assertParseSuccess(parser, addInvestmentPlanTagInput, expectedTagCommandAddInvestmentPlanTag);","lastModifiedDate":"2021-10-20"},{"lineNumber":92,"author":{"gitId":"trash-bin99"},"content":"        assertParseSuccess(parser, deleteTagInput, expectedTagCommandDeleteTag);","lastModifiedDate":"2021-10-20"},{"lineNumber":93,"author":{"gitId":"trash-bin99"},"content":"        assertParseSuccess(parser, deletePriorityTagInput, expectedTagCommandDeletePriorityTag);","lastModifiedDate":"2021-10-20"},{"lineNumber":94,"author":{"gitId":"trash-bin99"},"content":"        assertParseSuccess(parser, deleteInvestmentPlanTagInput, expectedTagCommandDeleteInvestmentPlanTag);","lastModifiedDate":"2021-10-20"},{"lineNumber":95,"author":{"gitId":"trash-bin99"},"content":"        assertParseSuccess(parser, mixedInput, expectedTagCommandMixed);","lastModifiedDate":"2021-10-20"},{"lineNumber":96,"author":{"gitId":"trash-bin99"},"content":"        assertParseSuccess(parser, mixedInputWithWhitespace, expectedTagCommandMixed);","lastModifiedDate":"2021-10-20"},{"lineNumber":97,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":99,"author":{"gitId":"trash-bin99"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"trash-bin99":99}},{"path":"src/test/java/seedu/fast/logic/parser/UnmarkAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.logic.parser;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_AMY;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_INPUT;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_AMY;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_AMY;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.UnmarkAppointmentCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"public class UnmarkAppointmentCommandParserTest {","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"    private UnmarkAppointmentCommandParser parser \u003d new UnmarkAppointmentCommandParser();","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"    public void parse_indexSpecified_success() {","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"        String userInput \u003d String.valueOf(targetIndex.getOneBased());","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"        UnmarkAppointmentCommand expectedCommand \u003d new UnmarkAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"                new Appointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY));","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"    public void parse_missingCompulsoryField_failure() {","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"                UnmarkAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"        // no parameters","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, \"\", expectedMessage);","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"    public void parse_additionalField_failure() {","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"                UnmarkAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"                + PREFIX_APPOINTMENT + VALID_APPOINTMENT_INPUT, expectedMessage);","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"Py0000":48}},{"path":"src/test/java/seedu/fast/model/FastTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"Cyn7hius"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFastSetTwo;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"public class FastTest {","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"    private final Fast fast \u003d new Fast();","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"Cyn7hius"},"content":"    private final Fast fastSetTwo \u003d getTypicalFastSetTwo();","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(Collections.emptyList(), fast.getPersonList());","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(NullPointerException.class, () -\u003e fast.resetData(null));","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"squeakysquak"},"content":"    public void resetData_withValidReadOnlyFast_replacesData() {","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"squeakysquak"},"content":"        Fast newData \u003d getTypicalFast();","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"squeakysquak"},"content":"        fast.resetData(newData);","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(newData, fast);","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"squeakysquak"},"content":"        FastStub newData \u003d new FastStub(newPersons);","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e fast.resetData(newData));","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(NullPointerException.class, () -\u003e fast.hasPerson(null));","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"squeakysquak"},"content":"    public void hasPerson_personNotInFast_returnsFalse() {","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"squeakysquak"},"content":"        assertFalse(fast.hasPerson(ALICE));","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"squeakysquak"},"content":"    public void hasPerson_personInFast_returnsTrue() {","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"squeakysquak"},"content":"        fast.addPerson(ALICE);","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"squeakysquak"},"content":"        assertTrue(fast.hasPerson(ALICE));","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"squeakysquak"},"content":"    public void hasPerson_personWithSameIdentityFieldsInFast_returnsTrue() {","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"squeakysquak"},"content":"        fast.addPerson(ALICE);","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"squeakysquak"},"content":"        assertTrue(fast.hasPerson(editedAlice));","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e fast.getPersonList().remove(0));","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":88,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"Cyn7hius"},"content":"    void getHighPriorityCount_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":93,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(fastSetTwo.getHighPriorityCount(), 2);","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"Cyn7hius"},"content":"    void getMediumPriorityCount_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(fastSetTwo.getMediumPriorityCount(), 2);","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"Cyn7hius"},"content":"    void getLowPriorityCount_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(fastSetTwo.getLowPriorityCount(), 4);","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"Cyn7hius"},"content":"    void getLifeInsuranceCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(fastSetTwo.getLifeInsuranceCount(), 2);","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"Cyn7hius"},"content":"    void getMotorInsuranceCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(fastSetTwo.getMotorInsuranceCount(), 2);","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"Cyn7hius"},"content":"    void getHealthInsuranceCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(fastSetTwo.getHealthInsuranceCount(), 1);","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"Cyn7hius"},"content":"    void getTravelInsuranceCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(fastSetTwo.getTravelInsuranceCount(), 4);","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"Cyn7hius"},"content":"    void getPropertyInsuranceCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(fastSetTwo.getPropertyInsuranceCount(), 1);","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"Cyn7hius"},"content":"    void getInvestmentCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(fastSetTwo.getInvestmentCount(), 3);","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"Cyn7hius"},"content":"    void getSavingsCount() {","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(fastSetTwo.getSavingsCount(), 8);","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":145,"author":{"gitId":"squeakysquak"},"content":"    private static class FastStub implements ReadOnlyFast {","lastModifiedDate":"2021-10-01"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":148,"author":{"gitId":"squeakysquak"},"content":"        FastStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2021-10-01"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"squeakysquak":31,"-":71,"Cyn7hius":56}},{"path":"src/test/java/seedu/fast/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.GuiSettings;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.NameContainsQueriesPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.FastBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(new Fast(), new Fast(modelManager.getFast()));","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"squeakysquak"},"content":"        userPrefs.setFastFilePath(Paths.get(\"fast/file/path\"));","lastModifiedDate":"2021-10-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"squeakysquak"},"content":"        userPrefs.setFastFilePath(Paths.get(\"new/fast/file/path\"));","lastModifiedDate":"2021-10-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"squeakysquak"},"content":"    public void setFastFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setFastFilePath(null));","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"squeakysquak"},"content":"    public void setFastFilePath_validPath_setsFastFilePath() {","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"squeakysquak"},"content":"        Path path \u003d Paths.get(\"fast/file/path\");","lastModifiedDate":"2021-10-04"},{"lineNumber":71,"author":{"gitId":"squeakysquak"},"content":"        modelManager.setFastFilePath(path);","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(path, modelManager.getFastFilePath());","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"squeakysquak"},"content":"    public void hasPerson_personNotInFast_returnsFalse() {","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"squeakysquak"},"content":"    public void hasPerson_personInFast_returnsTrue() {","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"squeakysquak"},"content":"        Fast fast \u003d new FastBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2021-10-04"},{"lineNumber":99,"author":{"gitId":"squeakysquak"},"content":"        Fast differentFast \u003d new Fast();","lastModifiedDate":"2021-10-04"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"squeakysquak"},"content":"        modelManager \u003d new ModelManager(fast, userPrefs);","lastModifiedDate":"2021-10-04"},{"lineNumber":104,"author":{"gitId":"squeakysquak"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(fast, userPrefs);","lastModifiedDate":"2021-10-04"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"squeakysquak"},"content":"        // different fast -\u003e returns false","lastModifiedDate":"2021-10-04"},{"lineNumber":117,"author":{"gitId":"squeakysquak"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentFast, userPrefs)));","lastModifiedDate":"2021-10-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":121,"author":{"gitId":"squeakysquak"},"content":"        modelManager.updateFilteredPersonList(new NameContainsQueriesPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2021-10-19"},{"lineNumber":122,"author":{"gitId":"squeakysquak"},"content":"        assertFalse(modelManager.equals(new ModelManager(fast, userPrefs)));","lastModifiedDate":"2021-10-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"squeakysquak"},"content":"        differentUserPrefs.setFastFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2021-10-01"},{"lineNumber":130,"author":{"gitId":"squeakysquak"},"content":"        assertFalse(modelManager.equals(new ModelManager(fast, differentUserPrefs)));","lastModifiedDate":"2021-10-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"squeakysquak":29,"-":103}},{"path":"src/test/java/seedu/fast/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"    public void setFastFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFastFilePath(null));","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"squeakysquak":4,"-":17}},{"path":"src/test/java/seedu/fast/model/person/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"        assertFalse(Address.isValidAddress(LengthUtil.EMPTY_STRING)); // empty string","lastModifiedDate":"2021-10-31"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"        assertFalse(Address.isValidAddress(LengthUtil.WHITE_SPACE_STRING)); // spaces only","lastModifiedDate":"2021-10-31"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"        assertFalse(Address.isValidAddress(LengthUtil.ONE_HUNDRED_CHARA + LengthUtil.ONE_CHARA));","lastModifiedDate":"2021-10-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"Th-429B"},"content":"        assertTrue(Address.isValidAddress(LengthUtil.ONE_CHARA)); // one character","lastModifiedDate":"2021-10-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"Th-429B"},"content":"        assertTrue(Address.isValidAddress(LengthUtil.ONE_HUNDRED_CHARA));","lastModifiedDate":"2021-10-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"    public void hashcode() {","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"        Address standardAddress \u003d new Address(\"Blk 456, Den Road, #01-355\");","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"        Address addressWithSameValue \u003d new Address(\"Blk 456, Den Road, #01-355\");","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"        Address addressWithDifferentValue \u003d new Address(\"Blk 717, Den Road, #01-355\");","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardAddress.hashCode() \u003d\u003d addressWithSameValue.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardAddress.hashCode() \u003d\u003d standardAddress.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardAddress.hashCode() \u003d\u003d addressWithDifferentValue.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"squeakysquak":2,"Py0000":12,"-":31,"Th-429B":5}},{"path":"src/test/java/seedu/fast/model/person/AppointmentCountTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"public class AppointmentCountTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"    private static final String INITIAL_COUNT \u003d \"0\";","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"    private static final String VALID_COUNT \u003d \"10\";","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentCount(null));","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"    public void getCount() {","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"        AppointmentCount initialCount \u003d new AppointmentCount(\"0\");","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"        assertTrue(initialCount.toString().equals(INITIAL_COUNT));","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"        AppointmentCount count \u003d new AppointmentCount(\"10\");","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"        assertTrue(count.toString().equals(VALID_COUNT));","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"    public void incrementAppointmentCount() {","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"        AppointmentCount initialCount \u003d new AppointmentCount(\"0\");","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"        initialCount.incrementAppointmentCount();","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"        assertTrue(initialCount.toString().equals(\"1\"));","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"    public void decrementAppointmentCount() {","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"        AppointmentCount initialCount \u003d new AppointmentCount(\"5\");","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"        initialCount.decrementAppointmentCount();","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"        assertTrue(initialCount.toString().equals(\"4\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"    public void equals() {","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"        AppointmentCount standard \u003d new AppointmentCount(\"0\");","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        AppointmentCount countWithSameValue \u003d new AppointmentCount(\"0\");","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"        // same data","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"        assertTrue(standard.equals(countWithSameValue));","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"        // same appointment","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        assertTrue(standard.equals(standard));","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"        // null","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"        assertFalse(standard.equals(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"        // different type","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"        assertFalse(standard.equals(\"Matthew\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"        // different fields","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"Py0000"},"content":"        assertFalse(standard.equals(new AppointmentCount(\"11\")));","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"Py0000"},"content":"    public void hashcode() {","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"        AppointmentCount standard \u003d new AppointmentCount(\"0\");","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"        AppointmentCount countWithSameValue \u003d new AppointmentCount(\"0\");","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"        AppointmentCount countWithDifferentValue \u003d new AppointmentCount(\"11\");","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"        assertTrue(standard.hashCode() \u003d\u003d countWithSameValue.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"        assertTrue(standard.hashCode() \u003d\u003d standard.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"        assertFalse(standard.hashCode() \u003d\u003d countWithDifferentValue.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"    public void isValidCount() {","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"        // valid input","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"        assertTrue(AppointmentCount.isValidCount(\"0\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"        // negative input","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"        assertFalse(AppointmentCount.isValidCount(\"-10\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"        // empty input","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"        assertFalse(AppointmentCount.isValidCount(\"\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"        assertFalse(AppointmentCount.isValidCount(\" \"));","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"        // non integer input","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"        assertFalse(AppointmentCount.isValidCount(\"Matthew\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"        assertFalse(AppointmentCount.isValidCount(\"!\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"    public void isValidDecrementCount() {","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"        // valid input","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"        assertTrue(AppointmentCount.isValidDecrementCount(new AppointmentCount(\"1\")));","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"        assertTrue(AppointmentCount.isValidDecrementCount(new AppointmentCount(\"2\")));","lastModifiedDate":"2021-10-28"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"        // invalid input","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"        assertFalse(AppointmentCount.isValidDecrementCount(new AppointmentCount(\"0\")));","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":101}},{"path":"src/test/java/seedu/fast/model/person/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"trash-bin99"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"trash-bin99"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"trash-bin99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.commons.util.DateUtil;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"public class AppointmentTest {","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"trash-bin99"},"content":"    public static final String VALID_DATE \u003d \"11 Nov 2021\";","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"trash-bin99"},"content":"    public static final String VALID_TIME \u003d \"2300\";","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"trash-bin99"},"content":"    public static final String VALID_VENUE \u003d \"testArea\";","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"trash-bin99"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"trash-bin99"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Appointment(null, null, null));","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"trash-bin99"},"content":"    public void convertDate() {","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"trash-bin99"},"content":"        //no date specified","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"trash-bin99"},"content":"        Appointment noDateAppointment \u003d new Appointment(Appointment.NO_APPOINTMENT, Appointment.NO_TIME,","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"trash-bin99"},"content":"                Appointment.NO_VENUE);","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(noDateAppointment.convertDate().equals(DateUtil.MAX_DATE));","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"trash-bin99"},"content":"        //correct format, valid date input","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"trash-bin99"},"content":"        Appointment validDateAppointment \u003d new Appointment(VALID_DATE, Appointment.NO_TIME, Appointment.NO_VENUE);","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"trash-bin99"},"content":"        assertFalse(validDateAppointment.convertDate().equals(DateUtil.MAX_DATE));","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"    public void getDate() {","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"        //no date specified","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"        Appointment noTimeAppointment \u003d new Appointment(Appointment.NO_APPOINTMENT, Appointment.NO_TIME,","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"                Appointment.NO_VENUE);","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"        assertTrue(noTimeAppointment.getDate().equals(Appointment.NO_APPOINTMENT));","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"        //date specified","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"        Appointment validTimeAppointment \u003d new Appointment(VALID_DATE, VALID_TIME,","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"                Appointment.NO_VENUE);","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"        assertTrue(validTimeAppointment.getDate().equals(VALID_DATE));","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"        //invalid date not tested as parser automatically rejects invalid instances","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"trash-bin99"},"content":"    public void getTime() {","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"trash-bin99"},"content":"        //no time specified","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"trash-bin99"},"content":"        Appointment noTimeAppointment \u003d new Appointment(Appointment.NO_APPOINTMENT, Appointment.NO_TIME,","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"trash-bin99"},"content":"                Appointment.NO_VENUE);","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"        assertTrue(noTimeAppointment.getTimeFormatted().equals(\"\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"trash-bin99"},"content":"        //time specified","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"trash-bin99"},"content":"        Appointment validTimeAppointment \u003d new Appointment(VALID_DATE, VALID_TIME,","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"trash-bin99"},"content":"                Appointment.NO_VENUE);","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"Py0000"},"content":"        assertTrue(validTimeAppointment.getTimeFormatted().equals(VALID_TIME + \"hrs\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"trash-bin99"},"content":"        //invalid time not tested as parser automatically rejects invalid instances","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"trash-bin99"},"content":"    public void getVenue() {","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"trash-bin99"},"content":"        //no venue specified","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"trash-bin99"},"content":"        Appointment noTimeAppointment \u003d new Appointment(Appointment.NO_APPOINTMENT, Appointment.NO_TIME,","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"trash-bin99"},"content":"                Appointment.NO_VENUE);","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(noTimeAppointment.getVenue().equals(\"\"));","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"trash-bin99"},"content":"        //venue specified","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"trash-bin99"},"content":"        Appointment validVenueAppointment \u003d new Appointment(VALID_DATE, Appointment.NO_TIME,","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"trash-bin99"},"content":"                VALID_VENUE);","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(validVenueAppointment.getVenue().equals(VALID_VENUE));","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"trash-bin99"},"content":"        //invalid venue not tested as parser automatically rejects invalid instances","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"Py0000"},"content":"    public void equal() {","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"Py0000"},"content":"        Appointment standardAppointment \u003d new Appointment(VALID_DATE, VALID_TIME, VALID_VENUE);","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"Py0000"},"content":"        Appointment appointmentWithSameData \u003d new Appointment(VALID_DATE, VALID_TIME, VALID_VENUE);","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"Py0000"},"content":"        // same data appointment","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardAppointment.equals(appointmentWithSameData));","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"        // same appointment","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardAppointment.equals(standardAppointment));","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"Py0000"},"content":"        // null","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardAppointment.equals(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"        // different type","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardAppointment.equals(\"Matthew\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":95,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"Py0000"},"content":"        // different fields","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardAppointment.equals(new Appointment(\"27 Mar 2021\", VALID_TIME, VALID_VENUE)));","lastModifiedDate":"2021-10-15"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardAppointment.equals(new Appointment(VALID_DATE, \"1130\", VALID_VENUE)));","lastModifiedDate":"2021-10-15"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardAppointment.equals(new Appointment(VALID_DATE, VALID_TIME, \"\")));","lastModifiedDate":"2021-10-15"},{"lineNumber":100,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":101,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":102,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"    public void hashcode() {","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"Py0000"},"content":"        Appointment standardAppointment \u003d new Appointment(VALID_DATE, VALID_TIME, VALID_VENUE);","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"Py0000"},"content":"        Appointment appointmentWithSameData \u003d new Appointment(VALID_DATE, VALID_TIME, VALID_VENUE);","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"Py0000"},"content":"        Appointment appointmentWithDifferentData \u003d new Appointment(Appointment.NO_APPOINTMENT,","lastModifiedDate":"2021-10-15"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"                Appointment.NO_TIME, Appointment.NO_VENUE);","lastModifiedDate":"2021-10-15"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardAppointment.hashCode() \u003d\u003d appointmentWithSameData.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":110,"author":{"gitId":"Py0000"},"content":"        assertTrue(standardAppointment.hashCode() \u003d\u003d standardAppointment.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":111,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":112,"author":{"gitId":"Py0000"},"content":"        assertFalse(standardAppointment.hashCode() \u003d\u003d appointmentWithDifferentData.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":113,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":114,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":115,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":116,"author":{"gitId":"Py0000"},"content":"    public void isValidDateFormat() {","lastModifiedDate":"2021-10-15"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"        // valid date","lastModifiedDate":"2021-10-15"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"        assertTrue(Appointment.isValidDateFormat(\"27 Mar 2021\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"        // empty date","lastModifiedDate":"2021-10-15"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"        assertTrue(Appointment.isValidDateFormat(Appointment.NO_APPOINTMENT));","lastModifiedDate":"2021-10-15"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"        // invalid date","lastModifiedDate":"2021-10-15"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidDateFormat(\"2021-03-27\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidDateFormat(\"03-27-2021\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidDateFormat(\"2021 Mar 27\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidDateFormat(\"Mar 27 2021\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidDateFormat(\"27/Mar/2021\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidDateFormat(\"27/03/2021\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidDateFormat(\"27-Mar-2021\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":131,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidDateFormat(\"27-03-2021\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidDateFormat(\"\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":133,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":134,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":136,"author":{"gitId":"Py0000"},"content":"    public void isValidTimeFormat() {","lastModifiedDate":"2021-10-15"},{"lineNumber":137,"author":{"gitId":"Py0000"},"content":"        // valid time","lastModifiedDate":"2021-10-15"},{"lineNumber":138,"author":{"gitId":"Py0000"},"content":"        assertTrue(Appointment.isValidTimeFormat(\"1000\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":140,"author":{"gitId":"Py0000"},"content":"        // empty time","lastModifiedDate":"2021-10-15"},{"lineNumber":141,"author":{"gitId":"Py0000"},"content":"        assertTrue(Appointment.isValidTimeFormat(\"\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":142,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":143,"author":{"gitId":"Py0000"},"content":"        // invalid time","lastModifiedDate":"2021-10-15"},{"lineNumber":144,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidTimeFormat(\"1000hrs\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":145,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidTimeFormat(\"10:00\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":146,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidTimeFormat(\"10:00hrs\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":147,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidTimeFormat(\"10am\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":148,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidTimeFormat(\"10.00\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":149,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidTimeFormat(\"10:00am\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidTimeFormat(\"ten o\u0027clock\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":153,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":154,"author":{"gitId":"Py0000"},"content":"    public void isValidVenueFormat() {","lastModifiedDate":"2021-10-15"},{"lineNumber":155,"author":{"gitId":"Py0000"},"content":"        // valid time","lastModifiedDate":"2021-10-15"},{"lineNumber":156,"author":{"gitId":"Py0000"},"content":"        assertTrue(Appointment.isValidVenueFormat(\"Clementi Mall\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":157,"author":{"gitId":"Py0000"},"content":"        assertTrue(Appointment.isValidVenueFormat(\"1234\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":158,"author":{"gitId":"Py0000"},"content":"        assertTrue(Appointment.isValidVenueFormat(\"Clementi 123\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":159,"author":{"gitId":"Py0000"},"content":"        assertTrue(Appointment.isValidVenueFormat(\"?!@!!?@\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":160,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":161,"author":{"gitId":"Py0000"},"content":"        // empty time","lastModifiedDate":"2021-10-15"},{"lineNumber":162,"author":{"gitId":"Py0000"},"content":"        assertTrue(Appointment.isValidVenueFormat(\"\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":163,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":164,"author":{"gitId":"Py0000"},"content":"        // invalid time","lastModifiedDate":"2021-10-15"},{"lineNumber":165,"author":{"gitId":"Py0000"},"content":"        assertFalse(Appointment.isValidVenueFormat(\"testttestttestttestttesttestttestt\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":166,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":167,"author":{"gitId":"trash-bin99"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"trash-bin99":62,"Py0000":105}},{"path":"src/test/java/seedu/fast/model/person/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"        assertFalse(Email.isValidEmail(LengthUtil.EMPTY_STRING)); // empty string","lastModifiedDate":"2021-10-31"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"        assertFalse(Email.isValidEmail(LengthUtil.WHITE_SPACE_STRING)); // spaces only","lastModifiedDate":"2021-10-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"Py0000"},"content":"    public void hashcode() {","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"Py0000"},"content":"        Email standard \u003d new Email(\"PeterJack_1190@example.com\");","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"Py0000"},"content":"        Email emailWithSameValue \u003d new Email(\"PeterJack_1190@example.com\");","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"Py0000"},"content":"        Email emailWithDifferentValue \u003d new Email(\"test@localhost\");","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"Py0000"},"content":"        assertTrue(standard.hashCode() \u003d\u003d emailWithSameValue.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"Py0000"},"content":"        assertTrue(standard.hashCode() \u003d\u003d standard.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"        assertFalse(standard.hashCode() \u003d\u003d emailWithDifferentValue.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"squeakysquak":2,"Py0000":12,"-":64,"Th-429B":2}},{"path":"src/test/java/seedu/fast/model/person/LengthUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Th-429B"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":3,"author":{"gitId":"Th-429B"},"content":"public class LengthUtil {","lastModifiedDate":"2021-10-31"},{"lineNumber":4,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":5,"author":{"gitId":"Th-429B"},"content":"    public static final String ONE_HUNDRED_CHARA \u003d","lastModifiedDate":"2021-10-31"},{"lineNumber":6,"author":{"gitId":"Th-429B"},"content":"            \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean m\";","lastModifiedDate":"2021-10-31"},{"lineNumber":7,"author":{"gitId":"Th-429B"},"content":"    public static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"Th-429B"},"content":"    public static final String WHITE_SPACE_STRING \u003d \" \";","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"Th-429B"},"content":"    public static final String ONE_CHARA \u003d \"-\";","lastModifiedDate":"2021-10-31"},{"lineNumber":10,"author":{"gitId":"Th-429B"},"content":"}","lastModifiedDate":"2021-10-31"}],"authorContributionMap":{"Th-429B":10}},{"path":"src/test/java/seedu/fast/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"        NameContainsQueriesPredicate firstPredicate \u003d new NameContainsQueriesPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"        NameContainsQueriesPredicate secondPredicate \u003d new NameContainsQueriesPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"        NameContainsQueriesPredicate firstPredicateCopy \u003d new NameContainsQueriesPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"squeakysquak"},"content":"        NameContainsQueriesPredicate predicate \u003d new NameContainsQueriesPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"squeakysquak"},"content":"        predicate \u003d new NameContainsQueriesPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"squeakysquak"},"content":"        predicate \u003d new NameContainsQueriesPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"squeakysquak"},"content":"        predicate \u003d new NameContainsQueriesPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"squeakysquak"},"content":"        NameContainsQueriesPredicate predicate \u003d new NameContainsQueriesPredicate(Collections.emptyList());","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"squeakysquak"},"content":"        predicate \u003d new NameContainsQueriesPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"squeakysquak"},"content":"        predicate \u003d new NameContainsQueriesPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"squeakysquak":12,"-":63}},{"path":"src/test/java/seedu/fast/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"        String tooLongName \u003d \"this is a 51 character name that is not allowed hah\";","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(tooLongName));","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"        assertFalse(Name.isValidName(LengthUtil.EMPTY_STRING)); // empty string","lastModifiedDate":"2021-10-31"},{"lineNumber":31,"author":{"gitId":"Th-429B"},"content":"        assertFalse(Name.isValidName(LengthUtil.WHITE_SPACE_STRING)); // spaces only","lastModifiedDate":"2021-10-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"    public void hashcode() {","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        Name standard \u003d new Name(\"peter jack\");","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"        Name nameWithSameValue \u003d new Name(\"peter jack\");","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"        Name nameWithDifferentValue \u003d new Name(\"Capital Tan\");","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"        assertTrue(standard.hashCode() \u003d\u003d nameWithSameValue.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"        assertTrue(standard.hashCode() \u003d\u003d standard.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"        assertFalse(standard.hashCode() \u003d\u003d nameWithDifferentValue.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"squeakysquak":4,"Py0000":12,"-":36,"Th-429B":2}},{"path":"src/test/java/seedu/fast/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"squeakysquak":10,"-":81}},{"path":"src/test/java/seedu/fast/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"        assertFalse(Phone.isValidPhone(LengthUtil.EMPTY_STRING)); // empty string","lastModifiedDate":"2021-10-31"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"        assertFalse(Phone.isValidPhone(LengthUtil.WHITE_SPACE_STRING)); // spaces only","lastModifiedDate":"2021-10-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"Th-429B"},"content":"        assertFalse(Phone.isValidPhone(\"123123123123123123123\")); // more than 20 numbers","lastModifiedDate":"2021-10-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"Th-429B"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers (15 numbers)","lastModifiedDate":"2021-10-31"},{"lineNumber":40,"author":{"gitId":"Th-429B"},"content":"        assertTrue(Phone.isValidPhone(\"12312312312312312312\")); // exactly 20 numbers","lastModifiedDate":"2021-10-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"    public void hashcode() {","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"        Phone standard \u003d new Phone(\"93121534\");","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"        Phone phoneWithSameValue \u003d new Phone(\"93121534\");","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"        Phone phoneWithDifferentValue \u003d new Phone(\"911\");","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"        assertTrue(standard.hashCode() \u003d\u003d phoneWithSameValue.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"        assertTrue(standard.hashCode() \u003d\u003d standard.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"        assertFalse(standard.hashCode() \u003d\u003d phoneWithDifferentValue.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"squeakysquak":2,"Py0000":11,"-":36,"Th-429B":5}},{"path":"src/test/java/seedu/fast/model/person/RemarkTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"trash-bin99"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"trash-bin99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"trash-bin99"},"content":"public class RemarkTest {","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"trash-bin99"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"trash-bin99"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Remark(null));","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"    public void hashcode() {","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"        Remark standard \u003d new Remark(\"\");","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"        Remark remarkWithSameValue \u003d new Remark(\"\");","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"        Remark remarkWithDifferentValue \u003d new Remark(\"Test\");","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"        assertTrue(standard.hashCode() \u003d\u003d remarkWithSameValue.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"        assertTrue(standard.hashCode() \u003d\u003d standard.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"        assertFalse(standard.hashCode() \u003d\u003d remarkWithDifferentValue.hashCode());","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"Th-429B"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"Th-429B"},"content":"    public void isValidRemark() {","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"Th-429B"},"content":"        // null remark","lastModifiedDate":"2021-10-31"},{"lineNumber":31,"author":{"gitId":"Th-429B"},"content":"        assertThrows(NullPointerException.class, () -\u003e Remark.isValidRemark(null));","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"Th-429B"},"content":"        // invalid remarks","lastModifiedDate":"2021-10-31"},{"lineNumber":34,"author":{"gitId":"Th-429B"},"content":"        assertFalse(Remark.isValidRemark(","lastModifiedDate":"2021-10-31"},{"lineNumber":35,"author":{"gitId":"Th-429B"},"content":"                \"this is a fourty-six chara string that fails. \")); // 46 chara","lastModifiedDate":"2021-10-31"},{"lineNumber":36,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"Th-429B"},"content":"        // valid remarks","lastModifiedDate":"2021-10-31"},{"lineNumber":38,"author":{"gitId":"Th-429B"},"content":"        assertTrue(Remark.isValidRemark(LengthUtil.EMPTY_STRING)); // empty string","lastModifiedDate":"2021-10-31"},{"lineNumber":39,"author":{"gitId":"Th-429B"},"content":"        assertTrue(Remark.isValidRemark(LengthUtil.WHITE_SPACE_STRING)); // spaces only","lastModifiedDate":"2021-10-31"},{"lineNumber":40,"author":{"gitId":"Th-429B"},"content":"        assertTrue(Remark.isValidRemark(\"Likes to eat\")); // less than 20 chara","lastModifiedDate":"2021-10-31"},{"lineNumber":41,"author":{"gitId":"Th-429B"},"content":"        assertTrue(Remark.isValidRemark(LengthUtil.ONE_CHARA)); // one character","lastModifiedDate":"2021-10-31"},{"lineNumber":42,"author":{"gitId":"Th-429B"},"content":"        assertTrue(Remark.isValidRemark(","lastModifiedDate":"2021-10-31"},{"lineNumber":43,"author":{"gitId":"Th-429B"},"content":"                \"this is a fourty-five chara string that pass.\")); // 45 chara","lastModifiedDate":"2021-10-31"},{"lineNumber":44,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"trash-bin99"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"trash-bin99":14,"Py0000":14,"Th-429B":19}},{"path":"src/test/java/seedu/fast/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"Th-429B"},"content":"import static seedu.fast.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"Th-429B"},"content":"import seedu.fast.commons.util.sort.SortByName;","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.PersonBuilder;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":168,"author":{"gitId":"Th-429B"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":169,"author":{"gitId":"Th-429B"},"content":"    public void sortPersons_nullComparator_throwsNullPointerException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":170,"author":{"gitId":"Th-429B"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.sortPersons(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":171,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":172,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":173,"author":{"gitId":"Th-429B"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":174,"author":{"gitId":"Th-429B"},"content":"    public void sortPersons_unsortedPersonList_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":175,"author":{"gitId":"Th-429B"},"content":"        uniquePersonList.add(GEORGE);","lastModifiedDate":"2021-10-15"},{"lineNumber":176,"author":{"gitId":"Th-429B"},"content":"        uniquePersonList.add(CARL);","lastModifiedDate":"2021-10-15"},{"lineNumber":177,"author":{"gitId":"Th-429B"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-15"},{"lineNumber":178,"author":{"gitId":"Th-429B"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2021-10-15"},{"lineNumber":179,"author":{"gitId":"Th-429B"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-15"},{"lineNumber":180,"author":{"gitId":"Th-429B"},"content":"        expectedUniquePersonList.add(CARL);","lastModifiedDate":"2021-10-15"},{"lineNumber":181,"author":{"gitId":"Th-429B"},"content":"        expectedUniquePersonList.add(GEORGE);","lastModifiedDate":"2021-10-15"},{"lineNumber":182,"author":{"gitId":"Th-429B"},"content":"        uniquePersonList.sortPersons(new SortByName());","lastModifiedDate":"2021-10-15"},{"lineNumber":183,"author":{"gitId":"Th-429B"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2021-10-15"},{"lineNumber":184,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":185,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"squeakysquak":9,"-":161,"Th-429B":21}},{"path":"src/test/java/seedu/fast/model/tag/InvestmentPlanTagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"trash-bin99"},"content":"package seedu.fast.model.tag;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"trash-bin99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"trash-bin99"},"content":"public class InvestmentPlanTagTest {","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"        assertThrows(NullPointerException.class, () -\u003e new InvestmentPlanTag(null));","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"trash-bin99"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"trash-bin99":14}},{"path":"src/test/java/seedu/fast/model/tag/PriorityTagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"trash-bin99"},"content":"package seedu.fast.model.tag;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"trash-bin99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"trash-bin99"},"content":"public class PriorityTagTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"        assertThrows(NullPointerException.class, () -\u003e new PriorityTag(null));","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"trash-bin99"},"content":"}","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"trash-bin99":15}},{"path":"src/test/java/seedu/fast/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.model.tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"trash-bin99"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"trash-bin99"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"trash-bin99"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_PRIORITY_TAG;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"trash-bin99"},"content":"import seedu.fast.commons.util.TagUtil;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"trash-bin99"},"content":"    public static final String VALID_ALPHABET_TAG_TERM \u003d \"test\";","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"trash-bin99"},"content":"    public static final String VALID_NUMBER_TAG_TERM \u003d \"1234567890\";","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"trash-bin99"},"content":"    public static final String VALID_MIXED_TAG_TERM \u003d \"te12345test67890st\";","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"trash-bin99"},"content":"    public static final String INVALID_TAG_TERM \u003d \"hi there\";","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"trash-bin99"},"content":"    public static final String VALID_PRIORITY_TAG_TERM \u003d \"pr/low\";","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"Th-429B"},"content":"    public static final String INVALID_TAG_LENGTH \u003d \"Loremipsumdolorsitama\";","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":32,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"trash-bin99"},"content":"    public void isValidTagName() {","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"trash-bin99"},"content":"        // null tag name","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"trash-bin99"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"trash-bin99"},"content":"    public void isValidTagTerm() {","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"trash-bin99"},"content":"        //null tag term","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"trash-bin99"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagTerm(null));","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"trash-bin99"},"content":"        //valid Tag terms","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(Tag.isValidTagTerm(VALID_ALPHABET_TAG_TERM));","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(Tag.isValidTagTerm(VALID_NUMBER_TAG_TERM));","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(Tag.isValidTagTerm(VALID_MIXED_TAG_TERM));","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"trash-bin99"},"content":"        //invalid Tag term","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"trash-bin99"},"content":"        assertFalse(Tag.isValidTagTerm(INVALID_TAG_TERM));","lastModifiedDate":"2021-10-12"},{"lineNumber":50,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"Th-429B"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"Th-429B"},"content":"    public void isValidTagLength() {","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"Th-429B"},"content":"        //null tag term","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"Th-429B"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagLength(null));","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"Th-429B"},"content":"        //valid Tag terms","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"Th-429B"},"content":"        assertTrue(Tag.isValidTagTerm(VALID_ALPHABET_TAG_TERM));","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"Th-429B"},"content":"        assertTrue(Tag.isValidTagTerm(VALID_NUMBER_TAG_TERM));","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"Th-429B"},"content":"        assertTrue(Tag.isValidTagTerm(VALID_MIXED_TAG_TERM));","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"Th-429B"},"content":"        //invalid Tag term","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"Th-429B"},"content":"        assertFalse(Tag.isValidTagLength(INVALID_TAG_LENGTH)); // 21 characters","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"Th-429B"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"Th-429B"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"trash-bin99"},"content":"    public void createTag() {","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"trash-bin99"},"content":"        //null term","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"trash-bin99"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.createTag(null));","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"trash-bin99"},"content":"        //valid Tag term","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(Tag.createTag(VALID_ALPHABET_TAG_TERM) instanceof Tag);","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"trash-bin99"},"content":"        //valid PriorityTag term","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(Tag.createTag(VALID_PRIORITY_TAG_TERM) instanceof PriorityTag);","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"trash-bin99"},"content":"        //invalid term","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"trash-bin99"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Tag.createTag(INVALID_TAG_TERM));","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":81,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"trash-bin99"},"content":"    public void setPriority() {","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"trash-bin99"},"content":"        //individual cases for each PriorityTag","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(Tag.setPriority(PriorityTag.HighPriority.NAME) \u003d\u003d PriorityTag.HighPriority.PRIORITY);","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(Tag.setPriority(PriorityTag.MediumPriority.NAME) \u003d\u003d PriorityTag.MediumPriority.PRIORITY);","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(Tag.setPriority(PriorityTag.LowPriority.NAME) \u003d\u003d PriorityTag.LowPriority.PRIORITY);","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"trash-bin99"},"content":"        //case for a normal tag","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(Tag.setPriority(\"test\") \u003d\u003d TagUtil.NO_PRIORITY);","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"trash-bin99"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"trash-bin99"},"content":"    public void getPriority() {","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"trash-bin99"},"content":"        //individual cases for each PriorityTag","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(Tag.createTag(PREFIX_PRIORITY_TAG.getPrefix() + PriorityTag.HighPriority.TERM)","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"trash-bin99"},"content":"                .getPriority() \u003d\u003d PriorityTag.HighPriority.PRIORITY);","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(Tag.createTag(PREFIX_PRIORITY_TAG.getPrefix() + PriorityTag.MediumPriority.TERM)","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"trash-bin99"},"content":"                .getPriority() \u003d\u003d PriorityTag.MediumPriority.PRIORITY);","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(Tag.createTag(PREFIX_PRIORITY_TAG.getPrefix() + PriorityTag.LowPriority.TERM)","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"trash-bin99"},"content":"                .getPriority() \u003d\u003d PriorityTag.LowPriority.PRIORITY);","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"trash-bin99"},"content":"        //case for a normal tag","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"trash-bin99"},"content":"        assertTrue(new Tag(\"test\").getPriority() \u003d\u003d TagUtil.NO_PRIORITY);","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"trash-bin99"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"trash-bin99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"squeakysquak":2,"trash-bin99":71,"-":18,"Th-429B":15}},{"path":"src/test/java/seedu/fast/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Address;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.AppointmentCount;","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Email;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_APPOINTMENT \u003d \"2021-10-10\";","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_APPOINTMENT_TIME \u003d \"10:00\";","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_APPOINTMENT_VENUE \u003d \"test1test2test3test4test5test6test7\";","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"    private static final String INVALID_APPOINTMENT_COUNT \u003d \"-1000\";","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"    private static final String VALID_APPOINTMENT_DATE \u003d BENSON.getAppointment().getDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"    private static final String VALID_APPOINTMENT_TIME \u003d BENSON.getAppointment().getTimeFormatted();","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"    private static final String VALID_APPOINTMENT_VENUE \u003d BENSON.getAppointment().getVenue();","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"    private static final String VALID_APPOINTMENT_COUNT \u003d BENSON.getCount().toString();","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"Py0000"},"content":"                INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_DATE, VALID_APPOINTMENT_TIME, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_DATE, VALID_APPOINTMENT_TIME, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(","lastModifiedDate":"2021-09-13"},{"lineNumber":77,"author":{"gitId":"Py0000"},"content":"                        VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"Py0000"},"content":"                        VALID_APPOINTMENT_DATE, VALID_APPOINTMENT_TIME, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"Py0000"},"content":"                        VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(","lastModifiedDate":"2021-09-13"},{"lineNumber":87,"author":{"gitId":"Py0000"},"content":"                VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-05"},{"lineNumber":88,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_DATE, VALID_APPOINTMENT_TIME, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(","lastModifiedDate":"2021-09-13"},{"lineNumber":97,"author":{"gitId":"Py0000"},"content":"                VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-05"},{"lineNumber":98,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_DATE, VALID_APPOINTMENT_TIME, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-14"},{"lineNumber":99,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(","lastModifiedDate":"2021-09-13"},{"lineNumber":107,"author":{"gitId":"Py0000"},"content":"                VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-05"},{"lineNumber":108,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_DATE, VALID_APPOINTMENT_TIME, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-14"},{"lineNumber":109,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(","lastModifiedDate":"2021-09-13"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"                        VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-05"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"                        VALID_APPOINTMENT_DATE, VALID_APPOINTMENT_TIME, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-14"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"                        VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(","lastModifiedDate":"2021-09-13"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-05"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_DATE, VALID_APPOINTMENT_TIME, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":140,"author":{"gitId":"Py0000"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK,","lastModifiedDate":"2021-10-05"},{"lineNumber":141,"author":{"gitId":"Py0000"},"content":"                        invalidTags, VALID_APPOINTMENT_DATE, VALID_APPOINTMENT_TIME, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"Py0000"},"content":"                        VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":146,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":147,"author":{"gitId":"Py0000"},"content":"    public void toModelType_invalidAppointmentDate_throwsIllegalValueException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":148,"author":{"gitId":"Py0000"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(","lastModifiedDate":"2021-10-15"},{"lineNumber":149,"author":{"gitId":"Py0000"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-15"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"                INVALID_APPOINTMENT, VALID_APPOINTMENT_TIME, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-15"},{"lineNumber":151,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-15"},{"lineNumber":152,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d Appointment.INVALID_DATE_INPUT;","lastModifiedDate":"2021-10-15"},{"lineNumber":153,"author":{"gitId":"Py0000"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-15"},{"lineNumber":154,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":155,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":156,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":157,"author":{"gitId":"Py0000"},"content":"    public void toModelType_nullAppointmentDate_throwsIllegalValueException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":158,"author":{"gitId":"Py0000"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(","lastModifiedDate":"2021-10-15"},{"lineNumber":159,"author":{"gitId":"Py0000"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-15"},{"lineNumber":160,"author":{"gitId":"Py0000"},"content":"                null, VALID_APPOINTMENT_TIME, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-15"},{"lineNumber":161,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-15"},{"lineNumber":162,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Appointment.class.getSimpleName());","lastModifiedDate":"2021-10-15"},{"lineNumber":163,"author":{"gitId":"Py0000"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-15"},{"lineNumber":164,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":165,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":166,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":167,"author":{"gitId":"Py0000"},"content":"    public void toModelType_invalidAppointmentTime_throwsIllegalValueException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":168,"author":{"gitId":"Py0000"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(","lastModifiedDate":"2021-10-15"},{"lineNumber":169,"author":{"gitId":"Py0000"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-15"},{"lineNumber":170,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_DATE, INVALID_APPOINTMENT_TIME, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-15"},{"lineNumber":171,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-15"},{"lineNumber":172,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d Appointment.INVALID_TIME_INPUT;","lastModifiedDate":"2021-10-15"},{"lineNumber":173,"author":{"gitId":"Py0000"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-15"},{"lineNumber":174,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":175,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":176,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":177,"author":{"gitId":"Py0000"},"content":"    public void toModelType_nullAppointmentTime_throwsIllegalValueException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":178,"author":{"gitId":"Py0000"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(","lastModifiedDate":"2021-10-15"},{"lineNumber":179,"author":{"gitId":"Py0000"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-15"},{"lineNumber":180,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_DATE, null, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-15"},{"lineNumber":181,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-15"},{"lineNumber":182,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Appointment.class.getSimpleName());","lastModifiedDate":"2021-10-15"},{"lineNumber":183,"author":{"gitId":"Py0000"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-15"},{"lineNumber":184,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":185,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":186,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":187,"author":{"gitId":"Py0000"},"content":"    public void toModelType_invalidAppointmentVenue_throwsIllegalValueException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":188,"author":{"gitId":"Py0000"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(","lastModifiedDate":"2021-10-15"},{"lineNumber":189,"author":{"gitId":"Py0000"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-15"},{"lineNumber":190,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_DATE, VALID_APPOINTMENT_TIME, INVALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-15"},{"lineNumber":191,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-15"},{"lineNumber":192,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d Appointment.INVALID_VENUE_INPUT;","lastModifiedDate":"2021-10-15"},{"lineNumber":193,"author":{"gitId":"Py0000"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-15"},{"lineNumber":194,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":195,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":196,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":197,"author":{"gitId":"Py0000"},"content":"    public void toModelType_nullAppointmentVenue_throwsIllegalValueException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":198,"author":{"gitId":"Py0000"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(","lastModifiedDate":"2021-10-15"},{"lineNumber":199,"author":{"gitId":"Py0000"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-15"},{"lineNumber":200,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_DATE, VALID_APPOINTMENT_TIME, null,","lastModifiedDate":"2021-10-15"},{"lineNumber":201,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-15"},{"lineNumber":202,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Appointment.class.getSimpleName());","lastModifiedDate":"2021-10-15"},{"lineNumber":203,"author":{"gitId":"Py0000"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-15"},{"lineNumber":204,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":205,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":206,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":207,"author":{"gitId":"Py0000"},"content":"    public void toModelType_invalidAppointmentCount_throwsIllegalValueException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":208,"author":{"gitId":"Py0000"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(","lastModifiedDate":"2021-10-15"},{"lineNumber":209,"author":{"gitId":"Py0000"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-15"},{"lineNumber":210,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_DATE, VALID_APPOINTMENT_TIME, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-15"},{"lineNumber":211,"author":{"gitId":"Py0000"},"content":"                INVALID_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-15"},{"lineNumber":212,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d AppointmentCount.INVALID_COUNT_INPUT;","lastModifiedDate":"2021-10-15"},{"lineNumber":213,"author":{"gitId":"Py0000"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-15"},{"lineNumber":214,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":215,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":216,"author":{"gitId":"Py0000"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":217,"author":{"gitId":"Py0000"},"content":"    public void toModelType_nullAppointmentCount_throwsIllegalValueException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":218,"author":{"gitId":"Py0000"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(","lastModifiedDate":"2021-10-15"},{"lineNumber":219,"author":{"gitId":"Py0000"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,","lastModifiedDate":"2021-10-15"},{"lineNumber":220,"author":{"gitId":"Py0000"},"content":"                VALID_APPOINTMENT_DATE, VALID_APPOINTMENT_TIME, VALID_APPOINTMENT_VENUE,","lastModifiedDate":"2021-10-15"},{"lineNumber":221,"author":{"gitId":"Py0000"},"content":"                null);","lastModifiedDate":"2021-10-15"},{"lineNumber":222,"author":{"gitId":"Py0000"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-15"},{"lineNumber":223,"author":{"gitId":"Py0000"},"content":"                AppointmentCount.class.getSimpleName());","lastModifiedDate":"2021-10-15"},{"lineNumber":224,"author":{"gitId":"Py0000"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-15"},{"lineNumber":225,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":226,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":227,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"squeakysquak":9,"Py0000":119,"-":99}},{"path":"src/test/java/seedu/fast/storage/JsonFastStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.HOON;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.IDA;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"squeakysquak"},"content":"public class JsonFastStorageTest {","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"squeakysquak"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFastStorageTest\");","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"    public void readFast_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(NullPointerException.class, () -\u003e readFast(null));","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"squeakysquak"},"content":"    private java.util.Optional\u003cReadOnlyFast\u003e readFast(String filePath) throws Exception {","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"squeakysquak"},"content":"        return new JsonFastStorage(Paths.get(filePath)).readFast(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"squeakysquak"},"content":"        assertFalse(readFast(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(DataConversionException.class, () -\u003e readFast(\"notJsonFormatFast.json\"));","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"squeakysquak"},"content":"    public void readFast_invalidPersonFast_throwDataConversionException() {","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(DataConversionException.class, () -\u003e readFast(\"invalidPersonFast.json\"));","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"squeakysquak"},"content":"    public void readFast_invalidAndValidPersonFast_throwDataConversionException() {","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(DataConversionException.class, () -\u003e readFast(\"invalidAndValidPersonFast.json\"));","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"squeakysquak"},"content":"    public void readAndSaveFast_allInOrder_success() throws Exception {","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"squeakysquak"},"content":"        Path filePath \u003d testFolder.resolve(\"TempFast.json\");","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"squeakysquak"},"content":"        Fast original \u003d getTypicalFast();","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"squeakysquak"},"content":"        JsonFastStorage jsonFastStorage \u003d new JsonFastStorage(filePath);","lastModifiedDate":"2021-10-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"squeakysquak"},"content":"        jsonFastStorage.saveFast(original, filePath);","lastModifiedDate":"2021-10-04"},{"lineNumber":71,"author":{"gitId":"squeakysquak"},"content":"        ReadOnlyFast readBack \u003d jsonFastStorage.readFast(filePath).get();","lastModifiedDate":"2021-10-04"},{"lineNumber":72,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(original, new Fast(readBack));","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"squeakysquak"},"content":"        jsonFastStorage.saveFast(original, filePath);","lastModifiedDate":"2021-10-04"},{"lineNumber":78,"author":{"gitId":"squeakysquak"},"content":"        readBack \u003d jsonFastStorage.readFast(filePath).get();","lastModifiedDate":"2021-10-04"},{"lineNumber":79,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(original, new Fast(readBack));","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"squeakysquak"},"content":"        jsonFastStorage.saveFast(original); // file path not specified","lastModifiedDate":"2021-10-04"},{"lineNumber":84,"author":{"gitId":"squeakysquak"},"content":"        readBack \u003d jsonFastStorage.readFast().get(); // file path not specified","lastModifiedDate":"2021-10-04"},{"lineNumber":85,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(original, new Fast(readBack));","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"squeakysquak"},"content":"    public void saveFast_nullFast_throwsNullPointerException() {","lastModifiedDate":"2021-10-01"},{"lineNumber":91,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveFast(null, \"SomeFile.json\"));","lastModifiedDate":"2021-10-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"squeakysquak"},"content":"     * Saves {@code fast} at the specified {@code filePath}.","lastModifiedDate":"2021-10-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"squeakysquak"},"content":"    private void saveFast(ReadOnlyFast fast, String filePath) {","lastModifiedDate":"2021-10-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"squeakysquak"},"content":"            new JsonFastStorage(Paths.get(filePath))","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"squeakysquak"},"content":"                    .saveFast(fast, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-10-04"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"squeakysquak"},"content":"    public void saveFast_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveFast(new Fast(), null));","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"squeakysquak":42,"-":68}},{"path":"src/test/java/seedu/fast/storage/JsonSerializableFastTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.util.JsonUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.testutil.TypicalPersons;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"public class JsonSerializableFastTest {","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFastTest\");","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsFast.json\");","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonFast.json\");","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"squeakysquak"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonFast.json\");","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"        JsonSerializableFast dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"                JsonSerializableFast.class).get();","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"        Fast fastFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"squeakysquak"},"content":"        Fast typicalPersonsFast \u003d TypicalPersons.getTypicalFast();","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(fastFromFile, typicalPersonsFast);","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"squeakysquak"},"content":"        JsonSerializableFast dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"squeakysquak"},"content":"                JsonSerializableFast.class).get();","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"squeakysquak"},"content":"        JsonSerializableFast dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"squeakysquak"},"content":"                JsonSerializableFast.class).get();","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"squeakysquak"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableFast.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"squeakysquak":21,"-":26}},{"path":"src/test/java/seedu/fast/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.GuiSettings;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"squeakysquak"},"content":"        userPrefs.setFastFilePath(Paths.get(\"data/fast.json\"));","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"squeakysquak":6,"-":117}},{"path":"src/test/java/seedu/fast/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.TypicalPersons.getTypicalFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.GuiSettings;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.ReadOnlyFast;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.UserPrefs;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"        JsonFastStorage fastStorage \u003d new JsonFastStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"squeakysquak"},"content":"        storageManager \u003d new StorageManager(fastStorage, userPrefsStorage);","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"squeakysquak"},"content":"    public void fastReadSave() throws Exception {","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"squeakysquak"},"content":"         * {@link JsonFastStorage} class.","lastModifiedDate":"2021-10-04"},{"lineNumber":55,"author":{"gitId":"squeakysquak"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonFastStorageTest} class.","lastModifiedDate":"2021-10-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"squeakysquak"},"content":"        Fast original \u003d getTypicalFast();","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"squeakysquak"},"content":"        storageManager.saveFast(original);","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"squeakysquak"},"content":"        ReadOnlyFast retrieved \u003d storageManager.readFast().get();","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"squeakysquak"},"content":"        assertEquals(original, new Fast(retrieved));","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"squeakysquak"},"content":"    public void getFastFilePath() {","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"squeakysquak"},"content":"        assertNotNull(storageManager.getFastFilePath());","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":17,"-":51}},{"path":"src/test/java/seedu/fast/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.testutil;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"squeakysquak":1,"-":33}},{"path":"src/test/java/seedu/fast/testutil/EditAppointmentDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Py0000"},"content":"package seedu.fast.testutil;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"Py0000"},"content":"import seedu.fast.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"public class EditAppointmentDescriptorBuilder {","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"    private EditAppointmentDescriptor descriptor;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"    public EditAppointmentDescriptorBuilder() {","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"Py0000"},"content":"        descriptor \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"Py0000"},"content":"    public EditAppointmentDescriptorBuilder(EditAppointmentDescriptor descriptor) {","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"Py0000"},"content":"        this.descriptor \u003d new EditAppointmentDescriptor(descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"Py0000"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"Py0000"},"content":"    public EditAppointmentDescriptorBuilder(Appointment appointment) {","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"Py0000"},"content":"        descriptor \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"Py0000"},"content":"        descriptor.setDate(appointment.getDate());","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"Py0000"},"content":"        descriptor.setTime(appointment.getTime());","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"Py0000"},"content":"        descriptor.setVenue(appointment.getVenue());","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"Py0000"},"content":"    public EditAppointmentDescriptorBuilder withDate(String date) {","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"Py0000"},"content":"        descriptor.setDate(date);","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"        return this;","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"    public EditAppointmentDescriptorBuilder withTime(String time) {","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"Py0000"},"content":"        descriptor.setTime(time);","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"Py0000"},"content":"        return this;","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"Py0000"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"Py0000"},"content":"    public EditAppointmentDescriptorBuilder withVenue(String venue) {","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"Py0000"},"content":"        descriptor.setVenue(venue);","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"Py0000"},"content":"        return this;","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"    public EditAppointmentDescriptor build() {","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"Py0000"},"content":"        return descriptor;","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"Py0000"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Py0000":55}},{"path":"src/test/java/seedu/fast/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.testutil;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Address;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Email;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"squeakysquak":8,"-":79}},{"path":"src/test/java/seedu/fast/testutil/FastBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.testutil;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":" * A utility class to help with building FAST objects.","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":" *     {@code Fast fast \u003d new FastBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"public class FastBuilder {","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"    private Fast fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"    public FastBuilder() {","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"        fast \u003d new Fast();","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"squeakysquak"},"content":"    public FastBuilder(Fast fast) {","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"squeakysquak"},"content":"        this.fast \u003d fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"     * Adds a new {@code Person} to the {@code Fast} that we are building.","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"squeakysquak"},"content":"    public FastBuilder withPerson(Person person) {","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"        fast.addPerson(person);","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"squeakysquak"},"content":"    public Fast build() {","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"squeakysquak"},"content":"        return fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":16,"-":18}},{"path":"src/test/java/seedu/fast/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.testutil;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Address;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.Appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import seedu.fast.model.person.AppointmentCount;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Email;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Remark;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.util.SampleDataUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_REMARK \u003d \"She likes aardvarks.\";","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"Py0000"},"content":"    public static final String DEFAULT_APPOINTMENT \u003d \"10 Oct 2021\";","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"Py0000"},"content":"    public static final String DEFAULT_APPOINTMENT_TIME \u003d \"2000\";","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"Py0000"},"content":"    public static final String DEFAULT_APPOINTMENT_VENUE \u003d \"Jewel Changi\";","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"Py0000"},"content":"    public static final String DEFAULT_APPOINTMENT_COUNT \u003d \"0\";","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Remark remark;","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"Py0000"},"content":"    private Appointment appointment;","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"Py0000"},"content":"    private AppointmentCount count;","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"Py0000"},"content":"        appointment \u003d new Appointment(DEFAULT_APPOINTMENT, DEFAULT_APPOINTMENT_TIME, DEFAULT_APPOINTMENT_VENUE);","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"Py0000"},"content":"        count \u003d new AppointmentCount(DEFAULT_APPOINTMENT_COUNT);","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        remark \u003d personToCopy.getRemark();","lastModifiedDate":"2021-09-13"},{"lineNumber":65,"author":{"gitId":"Py0000"},"content":"        appointment \u003d personToCopy.getAppointment();","lastModifiedDate":"2021-10-05"},{"lineNumber":66,"author":{"gitId":"Py0000"},"content":"        count \u003d personToCopy.getCount();","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building.","lastModifiedDate":"2021-09-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public PersonBuilder withRemark(String remark) {","lastModifiedDate":"2021-09-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        this.remark \u003d new Remark(remark);","lastModifiedDate":"2021-09-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2021-09-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":117,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":118,"author":{"gitId":"Py0000"},"content":"     * Sets the {@code Appointment} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-05"},{"lineNumber":119,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":120,"author":{"gitId":"Py0000"},"content":"    public PersonBuilder withAppointment(String date, String time, String venue) {","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"Py0000"},"content":"        this.appointment \u003d new Appointment(date, time, venue);","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"Py0000"},"content":"        return this;","lastModifiedDate":"2021-10-05"},{"lineNumber":123,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":124,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":125,"author":{"gitId":"Py0000"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"Py0000"},"content":"     * Sets the {@code AppointmentCount} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"Py0000"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"Py0000"},"content":"    public PersonBuilder withAppointmentCount(String count) {","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"Py0000"},"content":"        this.count \u003d new AppointmentCount(count);","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"Py0000"},"content":"        return this;","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"Py0000"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":132,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":135,"author":{"gitId":"Py0000"},"content":"        return new Person(name, phone, email, address, remark, tags, appointment, count);","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"squeakysquak":9,"Py0000":29,"-":100}},{"path":"src/test/java/seedu/fast/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.testutil;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.AddCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.Tag;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"squeakysquak":10,"-":52}},{"path":"src/test/java/seedu/fast/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.testutil;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":1,"-":71}},{"path":"src/test/java/seedu/fast/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.testutil;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Model;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"squeakysquak":4,"-":51}},{"path":"src/test/java/seedu/fast/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.testutil;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.commons.core.index.Index;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"Py0000"},"content":"    public static final Index INDEX_SIXTH_PERSON \u003d Index.fromOneBased(6);","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"Py0000"},"content":"    public static final Index INDEX_SEVENTH_PERSON \u003d Index.fromOneBased(7);","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"squeakysquak":2,"Py0000":2,"-":10}},{"path":"src/test/java/seedu/fast/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.testutil;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_AMY;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_BOB;","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"Py0000"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_APPOINTMENT_VENUE_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":24,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.Fast;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.person.Person;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.tag.InvestmentPlanTag;","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.model.tag.PriorityTag;","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"Py0000"},"content":"    public static final String NO_APPT \u003d \"No Appointment Scheduled Yet\";","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"Py0000"},"content":"    public static final String NO_APPT_TIME \u003d \"\";","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"Py0000"},"content":"    public static final String NO_APPT_VENUE \u003d \"\";","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"Py0000"},"content":"    public static final String INITIAL_COUNT \u003d \"0\";","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"Py0000"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":39,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person ALICE \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"Cyn7hius"},"content":"        .withName(\"Alice Pauline\")","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(\"123, Jurong West Ave 6, #08-111\")","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(\"alice@example.com\")","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(\"94351253\")","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"Cyn7hius"},"content":"        .withRemark(\"She likes aardvarks.\")","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"Cyn7hius"},"content":"        .withTags(\"friends\")","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointment(NO_APPT, NO_APPT_TIME, NO_APPT_VENUE)","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointmentCount(INITIAL_COUNT)","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person BENSON \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"Cyn7hius"},"content":"        .withName(\"Benson Meier\")","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"Cyn7hius"},"content":"        .withRemark(\"He can\u0027t take beer!\")","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(\"johnd@example.com\")","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(\"98765432\")","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"Cyn7hius"},"content":"        .withTags(\"owesMoney\", \"friends\")","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointment(\"10 Nov 2025\", NO_APPT_TIME, NO_APPT_VENUE)","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointmentCount(INITIAL_COUNT)","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person CARL \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"Cyn7hius"},"content":"        .withName(\"Carl Kurz\")","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(\"95352563\")","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(\"heinz@example.com\")","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(\"wall street\")","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointment(NO_APPT, NO_APPT_TIME, NO_APPT_VENUE)","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointmentCount(INITIAL_COUNT)","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person DANIEL \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"Cyn7hius"},"content":"        .withName(\"Daniel Meier\")","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(\"87652533\")","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(\"cornelia@example.com\")","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(\"10th street\")","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"Cyn7hius"},"content":"        .withTags(\"friends\")","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointment(NO_APPT, NO_APPT_TIME, NO_APPT_VENUE)","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointmentCount(INITIAL_COUNT)","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person ELLE \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"Cyn7hius"},"content":"        .withName(\"Elle Meyer\")","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(\"9482224\")","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(\"werner@example.com\")","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(\"michegan ave\")","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointment(\"07 Dec 2021\", NO_APPT_TIME, NO_APPT_VENUE)","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointmentCount(INITIAL_COUNT)","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":88,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person FIONA \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"Cyn7hius"},"content":"        .withName(\"Fiona Kunz\")","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(\"9482427\")","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(\"lydia@example.com\")","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(\"little tokyo\")","lastModifiedDate":"2021-10-25"},{"lineNumber":93,"author":{"gitId":"Py0000"},"content":"        .withAppointment(\"11 Oct 2021\", NO_APPT_TIME, NO_APPT_VENUE)","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"Py0000"},"content":"        .withAppointmentCount(\"1\")","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person GEORGE \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"Cyn7hius"},"content":"        .withName(\"George Best\")","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(\"9482442\")","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(\"anna@example.com\")","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(\"4th street\")","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointment(NO_APPT, NO_APPT_TIME, NO_APPT_VENUE)","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"Py0000"},"content":"        .withAppointmentCount(\"3\")","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"Cyn7hius"},"content":"    //----------Manually added persons, not in TypicalPersons --------------","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person HOON \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"Cyn7hius"},"content":"        .withName(\"Hoon Meier\")","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(\"8482424\")","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(\"stefan@example.com\")","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(\"little india\")","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"Cyn7hius"},"content":"        .withTags(PriorityTag.MediumPriority.NAME, InvestmentPlanTag.TravelInsurance.NAME,","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"Cyn7hius"},"content":"            InvestmentPlanTag.Savings.NAME)","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointment(NO_APPT, NO_APPT_TIME, NO_APPT_VENUE)","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointmentCount(INITIAL_COUNT)","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person IDA \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"Cyn7hius"},"content":"        .withName(\"Ida Mueller\")","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(\"8482131\")","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(\"hans@example.com\")","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(\"chicago ave\")","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"Cyn7hius"},"content":"        .withTags(PriorityTag.LowPriority.NAME, InvestmentPlanTag.LifeInsurance.NAME, InvestmentPlanTag.Savings.NAME)","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointment(NO_APPT, NO_APPT_TIME, NO_APPT_VENUE)","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointmentCount(INITIAL_COUNT)","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":130,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person AMY \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"Cyn7hius"},"content":"        .withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"Cyn7hius"},"content":"        .withTags(VALID_TAG_FRIEND, PriorityTag.HighPriority.NAME, InvestmentPlanTag.TravelInsurance.NAME,","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"Cyn7hius"},"content":"            InvestmentPlanTag.PropertyInsurance.NAME, InvestmentPlanTag.HealthInsurance.NAME,","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"Cyn7hius"},"content":"            InvestmentPlanTag.LifeInsurance.NAME, InvestmentPlanTag.MotorInsurance.NAME,","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"Cyn7hius"},"content":"            InvestmentPlanTag.Savings.NAME, InvestmentPlanTag.Investment.NAME)","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"Py0000"},"content":"        .withAppointment(VALID_APPOINTMENT_AMY, VALID_APPOINTMENT_TIME_AMY, VALID_APPOINTMENT_VENUE_AMY)","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointmentCount(INITIAL_COUNT)","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person BOB \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"Cyn7hius"},"content":"        .withName(VALID_NAME_BOB)","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-25"},{"lineNumber":147,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"Cyn7hius"},"content":"        .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND, PriorityTag.LowPriority.NAME,","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"Cyn7hius"},"content":"            InvestmentPlanTag.Savings.NAME, InvestmentPlanTag.TravelInsurance.NAME)","lastModifiedDate":"2021-10-25"},{"lineNumber":150,"author":{"gitId":"Py0000"},"content":"        .withAppointment(VALID_APPOINTMENT_BOB, VALID_APPOINTMENT_TIME_BOB, VALID_APPOINTMENT_VENUE_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointmentCount(INITIAL_COUNT)","lastModifiedDate":"2021-10-25"},{"lineNumber":152,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":154,"author":{"gitId":"squeakysquak"},"content":"    // Manually added - for findCommand","lastModifiedDate":"2021-10-11"},{"lineNumber":155,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person JOE \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"Cyn7hius"},"content":"        .withName(\"Joe Mama\")","lastModifiedDate":"2021-10-25"},{"lineNumber":157,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(\"92349123\")","lastModifiedDate":"2021-10-25"},{"lineNumber":158,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(\"joe@mama.com\")","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(\"final destination\")","lastModifiedDate":"2021-10-25"},{"lineNumber":160,"author":{"gitId":"Cyn7hius"},"content":"        .withTags(PriorityTag.HighPriority.NAME, InvestmentPlanTag.Savings.NAME)","lastModifiedDate":"2021-10-25"},{"lineNumber":161,"author":{"gitId":"Th-429B"},"content":"        .withAppointment(\"07 Dec 2021\", \"0000\", NO_APPT_VENUE)","lastModifiedDate":"2021-10-31"},{"lineNumber":162,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointmentCount(INITIAL_COUNT)","lastModifiedDate":"2021-10-25"},{"lineNumber":163,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":165,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person GRABAHAN \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":166,"author":{"gitId":"Cyn7hius"},"content":"        .withName(\"Grabahan Ful\")","lastModifiedDate":"2021-10-25"},{"lineNumber":167,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(\"89172389\")","lastModifiedDate":"2021-10-25"},{"lineNumber":168,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(\"grabahan@ful.com\")","lastModifiedDate":"2021-10-25"},{"lineNumber":169,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(\"deez lane\")","lastModifiedDate":"2021-10-25"},{"lineNumber":170,"author":{"gitId":"Cyn7hius"},"content":"        .withTags(PriorityTag.LowPriority.NAME, InvestmentPlanTag.Savings.NAME,","lastModifiedDate":"2021-10-25"},{"lineNumber":171,"author":{"gitId":"Cyn7hius"},"content":"            InvestmentPlanTag.MotorInsurance.NAME, InvestmentPlanTag.Investment.NAME)","lastModifiedDate":"2021-10-25"},{"lineNumber":172,"author":{"gitId":"Th-429B"},"content":"        .withAppointment(\"07 Dec 2021\", \"1800\", NO_APPT_VENUE)","lastModifiedDate":"2021-10-31"},{"lineNumber":173,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointmentCount(INITIAL_COUNT)","lastModifiedDate":"2021-10-25"},{"lineNumber":174,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":175,"author":{"gitId":"squeakysquak"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":176,"author":{"gitId":"squeakysquak"},"content":"    // Manually added - for find remark","lastModifiedDate":"2021-10-18"},{"lineNumber":177,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person SUGON \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":178,"author":{"gitId":"Cyn7hius"},"content":"        .withName(\"Sugon Deez\")","lastModifiedDate":"2021-10-25"},{"lineNumber":179,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(\"89172389\")","lastModifiedDate":"2021-10-25"},{"lineNumber":180,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(\"sugondeez@nutz.com\")","lastModifiedDate":"2021-10-25"},{"lineNumber":181,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(\"gottem\")","lastModifiedDate":"2021-10-25"},{"lineNumber":182,"author":{"gitId":"Cyn7hius"},"content":"        .withTags(PriorityTag.LowPriority.NAME, InvestmentPlanTag.TravelInsurance.NAME,","lastModifiedDate":"2021-10-25"},{"lineNumber":183,"author":{"gitId":"Cyn7hius"},"content":"            InvestmentPlanTag.Investment.NAME, InvestmentPlanTag.Savings.NAME)","lastModifiedDate":"2021-10-25"},{"lineNumber":184,"author":{"gitId":"Cyn7hius"},"content":"        .withRemark(\"What\u0027s DN?\")","lastModifiedDate":"2021-10-25"},{"lineNumber":185,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointment(NO_APPT, NO_APPT_TIME, NO_APPT_VENUE)","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointmentCount(INITIAL_COUNT)","lastModifiedDate":"2021-10-25"},{"lineNumber":187,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":188,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":189,"author":{"gitId":"Cyn7hius"},"content":"    public static final Person CAVE \u003d new PersonBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":190,"author":{"gitId":"Cyn7hius"},"content":"        .withName(\"CAVE JOHNSON\")","lastModifiedDate":"2021-10-25"},{"lineNumber":191,"author":{"gitId":"Cyn7hius"},"content":"        .withPhone(\"92292299\")","lastModifiedDate":"2021-10-25"},{"lineNumber":192,"author":{"gitId":"Cyn7hius"},"content":"        .withEmail(\"cave@johnson.com\")","lastModifiedDate":"2021-10-25"},{"lineNumber":193,"author":{"gitId":"Cyn7hius"},"content":"        .withAddress(\"Badwater\")","lastModifiedDate":"2021-10-25"},{"lineNumber":194,"author":{"gitId":"Cyn7hius"},"content":"        .withTags(PriorityTag.MediumPriority.NAME, InvestmentPlanTag.Savings.NAME)","lastModifiedDate":"2021-10-25"},{"lineNumber":195,"author":{"gitId":"Cyn7hius"},"content":"        .withRemark(\"Heavy\")","lastModifiedDate":"2021-10-25"},{"lineNumber":196,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointment(NO_APPT, NO_APPT_TIME, NO_APPT_VENUE)","lastModifiedDate":"2021-10-25"},{"lineNumber":197,"author":{"gitId":"Cyn7hius"},"content":"        .withAppointmentCount(INITIAL_COUNT)","lastModifiedDate":"2021-10-25"},{"lineNumber":198,"author":{"gitId":"Cyn7hius"},"content":"        .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":199,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":202,"author":{"gitId":"Cyn7hius"},"content":"    private TypicalPersons() {","lastModifiedDate":"2021-10-25"},{"lineNumber":203,"author":{"gitId":"Cyn7hius"},"content":"    } // prevents instantiation","lastModifiedDate":"2021-10-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":206,"author":{"gitId":"squeakysquak"},"content":"     * Returns an {@code Fast} with all the typical persons.","lastModifiedDate":"2021-10-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":208,"author":{"gitId":"squeakysquak"},"content":"    public static Fast getTypicalFast() {","lastModifiedDate":"2021-10-01"},{"lineNumber":209,"author":{"gitId":"squeakysquak"},"content":"        Fast fast \u003d new Fast();","lastModifiedDate":"2021-10-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":211,"author":{"gitId":"squeakysquak"},"content":"            fast.addPerson(person);","lastModifiedDate":"2021-10-04"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":213,"author":{"gitId":"squeakysquak"},"content":"        return fast;","lastModifiedDate":"2021-10-04"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":216,"author":{"gitId":"Cyn7hius"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":217,"author":{"gitId":"Cyn7hius"},"content":"     * Returns an {@code Fast} with all the typical persons.","lastModifiedDate":"2021-10-25"},{"lineNumber":218,"author":{"gitId":"Cyn7hius"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":219,"author":{"gitId":"Cyn7hius"},"content":"    public static Fast getTypicalFastSetTwo() {","lastModifiedDate":"2021-10-25"},{"lineNumber":220,"author":{"gitId":"Cyn7hius"},"content":"        Fast fast \u003d new Fast();","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"Cyn7hius"},"content":"        for (Person person : getTypicalPersonsSetTwo()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"Cyn7hius"},"content":"            fast.addPerson(person);","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"Cyn7hius"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":224,"author":{"gitId":"Cyn7hius"},"content":"        return fast;","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":226,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":230,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":231,"author":{"gitId":"Cyn7hius"},"content":"    public static List\u003cPerson\u003e getTypicalPersonsSetTwo() {","lastModifiedDate":"2021-10-25"},{"lineNumber":232,"author":{"gitId":"Cyn7hius"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(HOON, IDA, AMY, BOB, JOE, GRABAHAN, SUGON, CAVE));","lastModifiedDate":"2021-10-25"},{"lineNumber":233,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"squeakysquak":22,"Py0000":16,"-":28,"Cyn7hius":166,"Th-429B":2}},{"path":"src/test/java/seedu/fast/ui/StatsWindowDataTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Cyn7hius"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"Cyn7hius"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"Cyn7hius"},"content":"import static seedu.fast.ui.StatsWindowData.InvestmentPlanData;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"Cyn7hius"},"content":"import static seedu.fast.ui.StatsWindowData.PriorityData;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"Cyn7hius"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.tag.InvestmentPlanTag;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.tag.PriorityTag.HighPriority;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"Cyn7hius"},"content":"import seedu.fast.model.tag.PriorityTag.LowPriority;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"Cyn7hius"},"content":"public class StatsWindowDataTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"Cyn7hius"},"content":"    private final PriorityData pDataEqualCounts \u003d new PriorityData(5, 5, 5);","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"Cyn7hius"},"content":"    private final PriorityData pDataDifferentCounts \u003d new PriorityData(10, 20, 30);","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"Cyn7hius"},"content":"    private final InvestmentPlanData iPDataEqualCounts \u003d new InvestmentPlanData(5, 5, 5, 5, 5, 5, 5);","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"Cyn7hius"},"content":"    private final InvestmentPlanData iPDataDifferentCounts \u003d new InvestmentPlanData(1, 2, 3, 4, 5, 6, 7);","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"Cyn7hius"},"content":"    public void getMaxName_priorityDataEqualCounts_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(pDataEqualCounts.getMaxName(), HighPriority.NAME);","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"Cyn7hius"},"content":"    public void getMaxName_priorityDataDifferentCounts_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(pDataDifferentCounts.getMaxName(), LowPriority.NAME);","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"Cyn7hius"},"content":"    public void getMaxValue_priorityDataEqualCounts_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(pDataEqualCounts.getMaxValue(), 5);","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"Cyn7hius"},"content":"    public void getMaxValue_priorityDataDifferentCounts_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(pDataDifferentCounts.getMaxValue(), 30);","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"Cyn7hius"},"content":"    public void getTotalCount_priorityData_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(pDataDifferentCounts.getTotalCount(), 60);","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(pDataEqualCounts.getTotalCount(), 15);","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"Cyn7hius"},"content":"    public void getMaxName_investmentPlanDataDifferentCounts_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(iPDataEqualCounts.getMaxName(), InvestmentPlanTag.Savings.NAME);","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"Cyn7hius"},"content":"    public void getMaxValue_investmentPlanDataEqualCounts_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(iPDataEqualCounts.getMaxValue(), 5);","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"Cyn7hius"},"content":"    public void getMaxValue_investmentPlanDataDifferentCounts_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(iPDataDifferentCounts.getMaxValue(), 7);","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"Cyn7hius"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"Cyn7hius"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"Cyn7hius"},"content":"    public void getTotalCount_investmentPlanData_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(iPDataEqualCounts.getTotalCount(), 35);","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"Cyn7hius"},"content":"        assertEquals(iPDataDifferentCounts.getTotalCount(), 28);","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"Cyn7hius"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"Cyn7hius"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"Cyn7hius":69}},{"path":"src/test/java/seedu/fast/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"squeakysquak":1,"-":34}},{"path":"src/test/java/seedu/fast/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"squeakysquak"},"content":"package seedu.fast.ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"squeakysquak"},"content":"import static seedu.fast.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"squeakysquak"},"content":"import seedu.fast.MainApp;","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"squeakysquak":3,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"\u003c?import seedu.fast.ui.TestFxmlObject?\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"squeakysquak":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"squeakysquak"},"content":"\u003cfx:root type\u003d\"seedu.fast.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"squeakysquak":1,"-":5}}]
